client/test/smlTest.cpp:  char *sql = (char *)taosMemoryCalloc(256, 1);
client/test/smlTest.cpp:  taosMemoryFree(sql);
client/test/smlTest.cpp:    char   *sql = (char *)taosMemoryCalloc(256, 1);
client/test/smlTest.cpp:    taosMemoryFree(sql);
client/test/smlTest.cpp:  char   *sql = (char *)taosMemoryCalloc(1024, 1);
client/test/smlTest.cpp:  taosMemoryFree(sql);
client/src/clientSmlJson.c:      taosMemoryFree(elements->tags);
client/src/clientSmlJson.c:    taosMemoryFree(elements->tags);
client/src/clientSmlJson.c:      if (info->lines[i].measureTagsLen != 0) taosMemoryFree(info->lines[i].measureTag);
client/src/clientSmlJson.c:    taosMemoryFree(info->lines);
client/src/clientSmlJson.c:      if (element.measureTagsLen != 0) taosMemoryFree(element.measureTag);
client/src/clientSmlJson.c:        void *tmp = taosMemoryRealloc(info->lines, payloadNum * sizeof(SSmlLineInfo));
client/src/clientSml.c:  SSmlTableInfo *tag = (SSmlTableInfo *)taosMemoryCalloc(sizeof(SSmlTableInfo), 1);
client/src/clientSml.c:  taosMemoryFree(tag);
client/src/clientSml.c:    measure = (char *)taosMemoryMalloc(measureLen);
client/src/clientSml.c:    taosMemoryFree(measure);
client/src/clientSml.c:    taosMemoryFreeClear(pTableMeta);
client/src/clientSml.c:  elements->measureTag = (char *)taosMemoryMalloc(elements->measureLen + elements->tagsLen);
client/src/clientSml.c:  taosMemoryFreeClear(meta->tableMeta);
client/src/clientSml.c:  taosMemoryFree(meta);
client/src/clientSml.c:  SSmlSTableMeta *meta = (SSmlSTableMeta *)taosMemoryCalloc(sizeof(SSmlSTableMeta), 1);
client/src/clientSml.c:  pCmdMsg.pMsg = taosMemoryMalloc(pCmdMsg.msgLen);
client/src/clientSml.c:  taosMemoryFree(pCmdMsg.pMsg);
client/src/clientSml.c:    char  *measure = taosMemoryMalloc(superTableLen);
client/src/clientSml.c:    taosMemoryFree(measure);
client/src/clientSml.c:      taosMemoryFreeClear(pTableMeta);
client/src/clientSml.c:        taosMemoryFreeClear(pTableMeta);
client/src/clientSml.c:        taosMemoryFreeClear(pTableMeta);
client/src/clientSml.c:    taosMemoryFreeClear(sTableData->tableMeta);
client/src/clientSml.c:  taosMemoryFreeClear(pTableMeta);
client/src/clientSml.c:  taosMemoryFree(tag);
client/src/clientSml.c:  if (kv->keyEscaped) taosMemoryFreeClear(kv->key);
client/src/clientSml.c:  if (kv->valueEscaped) taosMemoryFreeClear(kv->value);
client/src/clientSml.c:  if (kv->type == TSDB_DATA_TYPE_VARBINARY) taosMemoryFreeClear(kv->value);
client/src/clientSml.c:        taosMemoryFree(info->lines[i].tags);
client/src/clientSml.c:        taosMemoryFree(info->lines[i].measureTag);
client/src/clientSml.c:    taosMemoryFree(info->lines);
client/src/clientSml.c:  taosMemoryFreeClear(info);
client/src/clientSml.c:  SSmlHandle *info = (SSmlHandle *)taosMemoryCalloc(1, sizeof(SSmlHandle));
client/src/clientSml.c:    char *measure = (char *)taosMemoryMalloc(tableData->sTableNameLen);
client/src/clientSml.c:      taosMemoryFree(measure);
client/src/clientSml.c:      taosMemoryFree(measure);
client/src/clientSml.c:      taosMemoryFree(measure);
client/src/clientSml.c:    taosMemoryFree(measure);
client/src/clientSml.c:    info->lines = (SSmlLineInfo *)taosMemoryCalloc(info->lineNum, sizeof(SSmlLineInfo));
client/src/clientSml.c:    char *print = taosMemoryCalloc(*len + 1, 1);
client/src/clientSml.c:    taosMemoryFree(print);
client/src/clientSml.c:        if (element.measureTagsLen != 0) taosMemoryFree(element.measureTag);
client/src/clientSml.c:        char *print = taosMemoryCalloc(len + 1, 1);
client/src/clientSml.c:        taosMemoryFree(print);
client/src/clientSml.c:    char *sql = taosMemoryMalloc(rlen + 1);
client/src/clientRawBlockWrite.c:    taosMemoryFree(pJson);
client/src/clientRawBlockWrite.c:        buf = taosMemoryCalloc(pTagVal->nData * 2 + 2 + 3, 1);
client/src/clientRawBlockWrite.c:        buf = taosMemoryCalloc(pTagVal->nData + 3, 1);
client/src/clientRawBlockWrite.c:      taosMemoryFree(buf);
client/src/clientRawBlockWrite.c:  SDecoder*      decoder = taosMemoryCalloc(rsp->createTableNum, sizeof(SDecoder));
client/src/clientRawBlockWrite.c:  SVCreateTbReq* pCreateReq = taosMemoryCalloc(rsp->createTableNum, sizeof(SVCreateTbReq));
client/src/clientRawBlockWrite.c:    taosMemoryFreeClear(pCreateReq[i].comment);
client/src/clientRawBlockWrite.c:  taosMemoryFree(decoder);
client/src/clientRawBlockWrite.c:  taosMemoryFree(pCreateReq);
client/src/clientRawBlockWrite.c:            buf = taosMemoryCalloc(vAlterTbReq.nTagVal * 2 + 2 + 3, 1);
client/src/clientRawBlockWrite.c:            buf = taosMemoryCalloc(vAlterTbReq.nTagVal + 3, 1);
client/src/clientRawBlockWrite.c:        taosMemoryFree(buf);
client/src/clientRawBlockWrite.c:  pCmdMsg.pMsg = taosMemoryMalloc(pCmdMsg.msgLen);
client/src/clientRawBlockWrite.c:  taosMemoryFree(pCmdMsg.pMsg);
client/src/clientRawBlockWrite.c:    taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:  taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:  pCmdMsg.pMsg = taosMemoryMalloc(pCmdMsg.msgLen);
client/src/clientRawBlockWrite.c:  taosMemoryFree(pCmdMsg.pMsg);
client/src/clientRawBlockWrite.c:        taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:      taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:      taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:    taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:  pVgData = taosMemoryCalloc(1, sizeof(SVgDataBlocks));
client/src/clientRawBlockWrite.c:  void* pMsg = taosMemoryMalloc(tlen);
client/src/clientRawBlockWrite.c:  if (pVgData) taosMemoryFreeClear(pVgData->pData);
client/src/clientRawBlockWrite.c:  taosMemoryFreeClear(pVgData);
client/src/clientRawBlockWrite.c:  taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:  taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:    TAOS_FIELD*     fields = taosMemoryCalloc(pSW->nCols, sizeof(TAOS_FIELD));
client/src/clientRawBlockWrite.c:    taosMemoryFree(fields);
client/src/clientRawBlockWrite.c:    taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:  taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:    TAOS_FIELD*     fields = taosMemoryCalloc(pSW->nCols, sizeof(TAOS_FIELD));
client/src/clientRawBlockWrite.c:    taosMemoryFree(fields);
client/src/clientRawBlockWrite.c:    taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:  taosMemoryFreeClear(pTableMeta);
client/src/clientRawBlockWrite.c:    taosMemoryFree(pCreateReqDst);
client/src/clientRawBlockWrite.c:void tmq_free_json_meta(char* jsonMeta) { taosMemoryFreeClear(jsonMeta); }
client/src/clientRawBlockWrite.c:  buf = taosMemoryCalloc(1, len);
client/src/clientRawBlockWrite.c:  taosMemoryFree(buf);
client/src/clientRawBlockWrite.c:    taosMemoryFree(raw.raw);
client/src/clientStmt.c:    void *buff = taosMemoryMalloc(pTblBuf->buffSize);
client/src/clientStmt.c:  //taosMemoryFreeClear(orig);
client/src/clientStmt.c:  pRes->fields = taosMemoryMalloc(size);
client/src/clientStmt.c:  pRes->userFields = taosMemoryMalloc(size);
client/src/clientStmt.c:    pStmt->exec.pRequest->body.resInfo.fields = taosMemoryMalloc(size);
client/src/clientStmt.c:    pStmt->exec.pRequest->body.resInfo.userFields = taosMemoryMalloc(size);
client/src/clientStmt.c:  pStmt->sql.pBindInfo = taosMemoryMalloc(pTableCtx->boundColsInfo.numOfBound * sizeof(*pStmt->sql.pBindInfo));
client/src/clientStmt.c:    taosMemoryFreeClear(pStmt->bInfo.boundTags);
client/src/clientStmt.c:    taosMemoryFreeClear(pStmt->exec.pCurrTbData);
client/src/clientStmt.c:  taosMemoryFree(pStmt->sql.queryRes.fields);
client/src/clientStmt.c:  taosMemoryFree(pStmt->sql.queryRes.userFields);
client/src/clientStmt.c:  taosMemoryFree(pStmt->sql.sqlStr);
client/src/clientStmt.c:    taosMemoryFreeClear(pCache->boundTags);
client/src/clientStmt.c:  taosMemoryFree(pTableMeta);
client/src/clientStmt.c:  //taosMemoryFree(pParam->pTbData);
client/src/clientStmt.c:  void *buff = taosMemoryMalloc(pTblBuf->buffSize);
client/src/clientStmt.c:  pStmt = taosMemoryCalloc(1, sizeof(STscStmt));
client/src/clientStmt.c:    taosMemoryFree(pStmt);
client/src/clientStmt.c:      taosMemoryFreeClear(pStmt->sql.pQuery->pResSchema);
client/src/clientStmt.c:        taosMemoryFree(pTableMeta);
client/src/clientStmt.c:      taosMemoryFree(pTableMeta);
client/src/clientStmt.c:      taosMemoryFreeClear(pStmt->exec.pCurrTbData);
client/src/clientStmt.c:  taosMemoryFree(stmt);
client/src/clientStmt.c:    taosMemoryFree(pField);
client/src/clientStmt.c:  taosMemoryFree(pField);
client/src/clientJniConnector.c:  char *str = (char *)taosMemoryCalloc(1, sizeof(char) * (len + 1));
client/src/clientJniConnector.c:  taosMemoryFreeClear(str);
client/src/clientJniConnector.c:  char *str = (char *)taosMemoryCalloc(1, sizeof(char) * (len + 1));
client/src/clientJniConnector.c:  taosMemoryFreeClear(str);
client/src/clientJniConnector.c:  char *str = (char *)taosMemoryCalloc(1, sizeof(char) * (len + 1));
client/src/clientJniConnector.c:  taosMemoryFreeClear(str);
client/src/clientJniConnector.c:  char *str = (char *)taosMemoryCalloc(1, sizeof(char) * (len + 1));
client/src/clientJniConnector.c:  taosMemoryFreeClear(str);
client/src/clientJniConnector.c:  char *str = (char *)taosMemoryCalloc(1, sizeof(char) * (len + 1));
client/src/clientJniConnector.c:  taosMemoryFreeClear(str);
client/src/clientJniConnector.c:  char *tagsData = (char *)taosMemoryCalloc(1, len);
client/src/clientJniConnector.c:  int32_t *lengthArray = (int32_t *)taosMemoryCalloc(1, len);
client/src/clientJniConnector.c:  char *typeArray = (char *)taosMemoryCalloc(1, len);
client/src/clientJniConnector.c:  char *nullArray = (char *)taosMemoryCalloc(1, len);
client/src/clientJniConnector.c:  TAOS_MULTI_BIND *tagsBind = taosMemoryCalloc(numOfTags, sizeof(TAOS_MULTI_BIND));
client/src/clientJniConnector.c:  taosMemoryFreeClear(tagsData);
client/src/clientJniConnector.c:  taosMemoryFreeClear(lengthArray);
client/src/clientJniConnector.c:  taosMemoryFreeClear(typeArray);
client/src/clientJniConnector.c:  taosMemoryFreeClear(nullArray);
client/src/clientJniConnector.c:  taosMemoryFreeClear(tagsBind);
client/src/clientJniConnector.c:  char *colBuf = (char *)taosMemoryCalloc(1, len);
client/src/clientJniConnector.c:  char *lengthArray = (char *)taosMemoryCalloc(1, len);
client/src/clientJniConnector.c:  char *nullArray = (char *)taosMemoryCalloc(1, len);
client/src/clientJniConnector.c:  TAOS_MULTI_BIND *b = taosMemoryCalloc(1, sizeof(TAOS_MULTI_BIND));
client/src/clientJniConnector.c:  taosMemoryFreeClear(b->length);
client/src/clientJniConnector.c:  taosMemoryFreeClear(b->buffer);
client/src/clientJniConnector.c:  taosMemoryFreeClear(b->is_null);
client/src/clientJniConnector.c:  taosMemoryFreeClear(b);
client/src/clientJniConnector.c:  char **c_lines = taosMemoryCalloc(numLines, sizeof(char *));
client/src/clientJniConnector.c:  taosMemoryFreeClear(c_lines);
client/src/clientJniConnector.c:  char **c_lines = taosMemoryCalloc(numLines, sizeof(char *));
client/src/clientJniConnector.c:  taosMemoryFreeClear(c_lines);
client/src/clientJniConnector.c:  char **c_lines = taosMemoryCalloc(numLines, sizeof(char *));
client/src/clientJniConnector.c:  taosMemoryFreeClear(c_lines);
client/src/clientJniConnector.c:  char **c_lines = taosMemoryCalloc(numLines, sizeof(char *));
client/src/clientJniConnector.c:  taosMemoryFreeClear(c_lines);
client/src/clientSmlLine.c:      char* tmp = taosMemoryCalloc(pVal->length, 1);
client/src/clientSmlLine.c:      taosMemoryFree(tmp);
client/src/clientSmlLine.c:          taosMemoryFree(data);
client/src/clientSmlLine.c:        void *data = taosMemoryMalloc(pVal->length);
client/src/clientSmlLine.c:      char *tmp = (char *)taosMemoryMalloc(keyLen);
client/src/clientSmlLine.c:      char *tmp = (char *)taosMemoryMalloc(valueLen);
client/src/clientSmlLine.c:      char *tmp = (char *)taosMemoryMalloc(kv.keyLen);
client/src/clientSmlLine.c:      char *tmp = (char *)taosMemoryMalloc(kv.length);
client/src/clientSmlLine.c:        taosMemoryFree((void*)kv.value);
client/src/clientEnv.c:  taosMemoryFreeClear(pAppInfo->instKey);
client/src/clientEnv.c:  taosMemoryFree(pAppInfo);
client/src/clientEnv.c:  taosMemoryFree(pTscObj);
client/src/clientEnv.c:  STscObj *pObj = (STscObj *)taosMemoryCalloc(1, sizeof(STscObj));
client/src/clientEnv.c:    taosMemoryFree(pObj);
client/src/clientEnv.c:  SRequestObj *pRequest = (SRequestObj *)taosMemoryCalloc(1, sizeof(SRequestObj));
client/src/clientEnv.c:    taosMemoryFree(pRequest);
client/src/clientEnv.c:  SSyncQueryParam *interParam = taosMemoryCalloc(1, sizeof(SSyncQueryParam));
client/src/clientEnv.c:  pRequest->msgBuf = taosMemoryCalloc(1, ERROR_MSG_BUF_DEFAULT_SIZE);
client/src/clientEnv.c:  taosMemoryFreeClear(pResInfo->pRspMsg);
client/src/clientEnv.c:  taosMemoryFreeClear(pResInfo->length);
client/src/clientEnv.c:  taosMemoryFreeClear(pResInfo->row);
client/src/clientEnv.c:  taosMemoryFreeClear(pResInfo->pCol);
client/src/clientEnv.c:  taosMemoryFreeClear(pResInfo->fields);
client/src/clientEnv.c:  taosMemoryFreeClear(pResInfo->userFields);
client/src/clientEnv.c:  taosMemoryFreeClear(pResInfo->convertJson);
client/src/clientEnv.c:      taosMemoryFreeClear(pResInfo->convertBuf[i]);
client/src/clientEnv.c:    taosMemoryFreeClear(pResInfo->convertBuf);
client/src/clientEnv.c:  taosMemoryFreeClear(pRequest->msgBuf);
client/src/clientEnv.c:  taosMemoryFreeClear(pRequest->pDb);
client/src/clientEnv.c:  taosMemoryFree(pRequest->body.interParam);
client/src/clientEnv.c:  taosMemoryFreeClear(pRequest->effectiveUser);
client/src/clientEnv.c:  taosMemoryFreeClear(pRequest->sqlstr);
client/src/clientEnv.c:  taosMemoryFree(pRequest);
client/src/clientEnv.c:    taosMemoryFree(pMsg);
client/src/clientEnv.c:    int32_t code = taosMemoryDbgInit();
client/src/clientImpl.c:    p = taosMemoryCalloc(1, sizeof(struct SAppInstInfo));
client/src/clientImpl.c:      taosMemoryFreeClear(key);
client/src/clientImpl.c:      taosMemoryFree(p);
client/src/clientImpl.c:      taosMemoryFreeClear(key);
client/src/clientImpl.c:  taosMemoryFreeClear(key);
client/src/clientImpl.c:  taosMemoryFree(param);
client/src/clientImpl.c:  (*pRequest)->sqlstr = taosMemoryMalloc(sqlLen + 1);
client/src/clientImpl.c:    taosMemoryFree(pResInfo->fields);
client/src/clientImpl.c:    taosMemoryFree(pResInfo->userFields);
client/src/clientImpl.c:  pResInfo->fields = taosMemoryCalloc(numOfCols, sizeof(TAOS_FIELD));
client/src/clientImpl.c:  pResInfo->userFields = taosMemoryCalloc(numOfCols, sizeof(TAOS_FIELD));
client/src/clientImpl.c:  taosMemoryFree(pResult);
client/src/clientImpl.c:  SMsgSendInfo* pMsgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientImpl.c:  pMsgSendInfo->param = taosMemoryCalloc(1, sizeof(pRequest->self));
client/src/clientImpl.c:  taosMemoryFreeClear(db);
client/src/clientImpl.c:  void*   pReq = taosMemoryMalloc(contLen);
client/src/clientImpl.c:      taosMemoryFreeClear(pSendInfo->target.dbFName);
client/src/clientImpl.c:    buf.pData = taosMemoryCalloc(1, pMsg->contLen);
client/src/clientImpl.c:  taosMemoryFree(arg);
client/src/clientImpl.c:    tEpSet = taosMemoryCalloc(1, sizeof(SEpSet));
client/src/clientImpl.c:  AsyncArg* arg = taosMemoryCalloc(1, sizeof(AsyncArg));
client/src/clientImpl.c:    taosMemoryFree(arg->pEpset);
client/src/clientImpl.c:    taosMemoryFree(arg);
client/src/clientImpl.c:    int64_t* rid = taosMemoryCalloc(1, sizeof(int64_t));
client/src/clientImpl.c:    pResInfo->row = taosMemoryCalloc(pResInfo->numOfCols, POINTER_BYTES);
client/src/clientImpl.c:    pResInfo->pCol = taosMemoryCalloc(pResInfo->numOfCols, sizeof(SResultColumn));
client/src/clientImpl.c:    pResInfo->length = taosMemoryCalloc(pResInfo->numOfCols, sizeof(int32_t));
client/src/clientImpl.c:    pResInfo->convertBuf = taosMemoryCalloc(pResInfo->numOfCols, POINTER_BYTES);
client/src/clientImpl.c:      char* p = taosMemoryRealloc(pResultInfo->convertBuf[i], colLength[i]);
client/src/clientImpl.c:  taosMemoryFreeClear(pResultInfo->convertJson);
client/src/clientImpl.c:  pResultInfo->convertJson = taosMemoryCalloc(1, dataLen);
client/src/clientImpl.c:          taosMemoryFree(jsonString);
client/src/clientImpl.c:  taosMemoryFreeClear(pResultInfo->pRspMsg);
client/src/clientImpl.c:  SSyncQueryParam* param = taosMemoryCalloc(1, sizeof(SSyncQueryParam));
client/src/clientImpl.c:  taosMemoryFree(param);
client/src/clientImpl.c:  SSyncQueryParam* param = taosMemoryCalloc(1, sizeof(SSyncQueryParam));
client/src/clientImpl.c:  taosMemoryFree(param);
client/src/clientImpl.c:    taosMemoryFreeClear(pResultInfo->pData);
client/src/clientImpl.c:    taosMemoryFreeClear(pResultInfo->pData);
client/src/clientHb.c:  SDBVgInfo *vgInfo = taosMemoryCalloc(1, sizeof(SDBVgInfo));
client/src/clientHb.c:    taosMemoryFreeClear(vgInfo);
client/src/clientHb.c:  taosMemoryFreeClear(pRsp);
client/src/clientHb.c:      taosMemoryFreeClear(rsp);
client/src/clientHb.c:    taosMemoryFree(pMsg->pData);
client/src/clientHb.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientHb.c:    taosMemoryFree(pMsg->pData);
client/src/clientHb.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientHb.c:  taosMemoryFree(pMsg->pData);
client/src/clientHb.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientHb.c:  SQueryHbReqBasic *hbBasic = (SQueryHbReqBasic *)taosMemoryCalloc(1, sizeof(SQueryHbReqBasic));
client/src/clientHb.c:    taosMemoryFree(hbBasic);
client/src/clientHb.c:    taosMemoryFree(hbBasic);
client/src/clientHb.c:        (SUserAuthVersion *)taosMemoryRealloc(pKv->value, (userNum + 1) * sizeof(SUserAuthVersion));
client/src/clientHb.c:  SUserAuthVersion *user = taosMemoryMalloc(sizeof(SUserAuthVersion));
client/src/clientHb.c:    taosMemoryFree(user);
client/src/clientHb.c:    taosMemoryFree(users);
client/src/clientHb.c:    taosMemoryFree(dbs);
client/src/clientHb.c:    taosMemoryFree(stbs);
client/src/clientHb.c:    taosMemoryFree(views);
client/src/clientHb.c:    taosMemoryFree(pDynViewVer);
client/src/clientHb.c:    taosMemoryFree(views);
client/src/clientHb.c:    taosMemoryFree(pDynViewVer);
client/src/clientHb.c:    taosMemoryFree(tsmas);
client/src/clientHb.c:    taosMemoryFree(tsmas);
client/src/clientHb.c:  SClientHbBatchReq *pBatchReq = taosMemoryCalloc(1, sizeof(SClientHbBatchReq));
client/src/clientHb.c:      void *buf = taosMemoryMalloc(tlen);
client/src/clientHb.c:      SMsgSendInfo *pInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientHb.c:        taosMemoryFree(buf);
client/src/clientHb.c:      pInfo->param = taosMemoryMalloc(sizeof(int32_t));
client/src/clientHb.c:      pInfo->paramFreeFp = taosMemoryFree;
client/src/clientHb.c:  SAppHbMgr *pAppHbMgr = taosMemoryMalloc(sizeof(SAppHbMgr));
client/src/clientHb.c:    taosMemoryFree(pAppHbMgr);
client/src/clientHb.c:  taosMemoryFree(pTarget->key);
client/src/clientHb.c:  taosMemoryFree(pTarget);
client/src/clientTmq.c:  tmq_conf_t* conf = taosMemoryCalloc(1, sizeof(tmq_conf_t));
client/src/clientTmq.c:      taosMemoryFree(conf->ip);
client/src/clientTmq.c:      taosMemoryFree(conf->user);
client/src/clientTmq.c:      taosMemoryFree(conf->pass);
client/src/clientTmq.c:    taosMemoryFree(conf);
client/src/clientTmq.c:  taosArrayDestroyP(container, taosMemoryFree);
client/src/clientTmq.c:  taosMemoryFree(pBuf->pData);
client/src/clientTmq.c:  taosMemoryFree(pBuf->pEpSet);
client/src/clientTmq.c:  void* buf = taosMemoryCalloc(1, sizeof(SMsgHead) + len);
client/src/clientTmq.c:  SMqCommitCbParam* pParam = taosMemoryCalloc(1, sizeof(SMqCommitCbParam));
client/src/clientTmq.c:    taosMemoryFree(buf);
client/src/clientTmq.c:  SMsgSendInfo* pMsgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:    taosMemoryFree(buf);
client/src/clientTmq.c:    taosMemoryFree(pParam);
client/src/clientTmq.c:  pMsgSendInfo->paramFreeFp = taosMemoryFree;
client/src/clientTmq.c:  SMqCommitCbParamSet* pParamSet = taosMemoryCalloc(1, sizeof(SMqCommitCbParamSet));
client/src/clientTmq.c:    taosMemoryFree(pParamSet);
client/src/clientTmq.c:  taosMemoryFree(pParamSet);
client/src/clientTmq.c:  taosMemoryFree(param);
client/src/clientTmq.c:  taosMemoryFree(param);
client/src/clientTmq.c:  taosMemoryFree(param);
client/src/clientTmq.c:    taosMemoryFree(pMsg->pData);
client/src/clientTmq.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientTmq.c:    taosMemoryFree(param);
client/src/clientTmq.c:  void* pReq = taosMemoryCalloc(1, tlen);
client/src/clientTmq.c:    taosMemoryFree(pReq);
client/src/clientTmq.c:  SMsgSendInfo* sendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:    taosMemoryFree(pReq);
client/src/clientTmq.c:  sendInfo->paramFreeFp = taosMemoryFree;
client/src/clientTmq.c:  sendInfo->param = taosMemoryMalloc(sizeof(int64_t));
client/src/clientTmq.c:      int64_t* pRefId = taosMemoryMalloc(sizeof(int64_t));
client/src/clientTmq.c:      int64_t* pRefId = taosMemoryMalloc(sizeof(int64_t));
client/src/clientTmq.c:    taosMemoryFreeClear(pRsp->pEpset);
client/src/clientTmq.c:    taosMemoryFreeClear(pRsp->pEpset);
client/src/clientTmq.c:    taosMemoryFreeClear(pRsp->pEpset);
client/src/clientTmq.c:    taosMemoryFreeClear(pRsp->pEpset);
client/src/clientTmq.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientTmq.c:  taosMemoryFreeClear(pTopic->schema.pSchema);
client/src/clientTmq.c:  taosMemoryFree(tmq);
client/src/clientTmq.c:  tmq_t* pTmq = taosMemoryCalloc(1, sizeof(tmq_t));
client/src/clientTmq.c:  int64_t* pRefId = taosMemoryMalloc(sizeof(int64_t));
client/src/clientTmq.c:    char* topicFName = taosMemoryCalloc(1, TSDB_TOPIC_FNAME_LEN);
client/src/clientTmq.c:  buf = taosMemoryMalloc(tlen);
client/src/clientTmq.c:  sendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:    taosMemoryFree(buf);
client/src/clientTmq.c:    taosMemoryFree(buf);
client/src/clientTmq.c:    taosMemoryFree(sendInfo);
client/src/clientTmq.c:    int64_t* pRefId1 = taosMemoryMalloc(sizeof(int64_t));
client/src/clientTmq.c:    int64_t* pRefId2 = taosMemoryMalloc(sizeof(int64_t));
client/src/clientTmq.c:  taosArrayDestroyP(req.topicNames, taosMemoryFree);
client/src/clientTmq.c:  taosMemoryFree(pParam);
client/src/clientTmq.c:  if (pMsg) taosMemoryFreeClear(pMsg->pData);
client/src/clientTmq.c:  if (pMsg) taosMemoryFreeClear(pMsg->pEpSet);
client/src/clientTmq.c:  SMqMetaRspObj* pRspObj = taosMemoryCalloc(1, sizeof(SMqMetaRspObj));
client/src/clientTmq.c:  SMqBatchMetaRspObj* pRspObj = taosMemoryCalloc(1, sizeof(SMqBatchMetaRspObj));
client/src/clientTmq.c:  SMqRspObj* pRspObj = taosMemoryCalloc(1, sizeof(SMqRspObj));
client/src/clientTmq.c:  SMqTaosxRspObj* pRspObj = taosMemoryCalloc(1, sizeof(SMqTaosxRspObj));
client/src/clientTmq.c:  msg = taosMemoryCalloc(1, msgSize);
client/src/clientTmq.c:  pParam = taosMemoryMalloc(sizeof(SMqPollCbParam));
client/src/clientTmq.c:    taosMemoryFreeClear(msg);
client/src/clientTmq.c:  sendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:    taosMemoryFreeClear(msg);
client/src/clientTmq.c:              int64_t* pRefId1 = taosMemoryMalloc(sizeof(int64_t));
client/src/clientTmq.c:  SSyncCommitInfo* pInfo = taosMemoryMalloc(sizeof(SSyncCommitInfo));
client/src/clientTmq.c:  taosMemoryFree(pInfo);
client/src/clientTmq.c:  SSyncCommitInfo* pInfo = taosMemoryMalloc(sizeof(SSyncCommitInfo));
client/src/clientTmq.c:  taosMemoryFree(pInfo);
client/src/clientTmq.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientTmq.c:  taosMemoryFree(pMsg->pData);
client/src/clientTmq.c:  taosMemoryFree(pParam);
client/src/clientTmq.c:  SAskEpInfo* pInfo = taosMemoryMalloc(sizeof(SAskEpInfo));
client/src/clientTmq.c:  taosMemoryFree(pInfo);
client/src/clientTmq.c:  pReq = taosMemoryCalloc(1, tlen);
client/src/clientTmq.c:    taosMemoryFree(pReq);
client/src/clientTmq.c:  pParam = taosMemoryCalloc(1, sizeof(SMqAskEpCbParam));
client/src/clientTmq.c:    taosMemoryFree(pReq);
client/src/clientTmq.c:  SMsgSendInfo* sendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:    taosMemoryFree(pReq);
client/src/clientTmq.c:    taosMemoryFree(pParamSet);
client/src/clientTmq.c:  taosMemoryFree(pParamSet);
client/src/clientTmq.c:  taosMemoryFree(pMsg->pData);
client/src/clientTmq.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientTmq.c:  taosMemoryFree(pCommon->pTopicName);
client/src/clientTmq.c:  taosMemoryFree(pCommon);
client/src/clientTmq.c:    taosMemoryFree(pMsg->pData);
client/src/clientTmq.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientTmq.c:  void* buf = taosMemoryCalloc(1, sizeof(SMsgHead) + len);
client/src/clientTmq.c:  SMsgSendInfo* sendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:    taosMemoryFree(buf);
client/src/clientTmq.c:  SMqCommittedParam* pParam = taosMemoryMalloc(sizeof(SMqCommittedParam));
client/src/clientTmq.c:    taosMemoryFree(buf);
client/src/clientTmq.c:    taosMemoryFree(sendInfo);
client/src/clientTmq.c:    taosMemoryFree(pParam);
client/src/clientTmq.c:  taosMemoryFree(pParam);
client/src/clientTmq.c:  *assignment = taosMemoryCalloc(*numOfAssignment, sizeof(tmq_topic_assignment));
client/src/clientTmq.c:    pCommon = taosMemoryCalloc(1, sizeof(SMqVgCommon));
client/src/clientTmq.c:      SMqVgWalInfoParam* pParam = taosMemoryMalloc(sizeof(SMqVgWalInfoParam));
client/src/clientTmq.c:        taosMemoryFree(pParam);
client/src/clientTmq.c:      char* msg = taosMemoryCalloc(1, msgSize);
client/src/clientTmq.c:        taosMemoryFree(pParam);
client/src/clientTmq.c:        taosMemoryFree(msg);
client/src/clientTmq.c:        taosMemoryFree(pParam);
client/src/clientTmq.c:      SMsgSendInfo* sendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:        taosMemoryFree(pParam);
client/src/clientTmq.c:        taosMemoryFree(msg);
client/src/clientTmq.c:      sendInfo->paramFreeFp = taosMemoryFree;
client/src/clientTmq.c:    taosMemoryFree(*assignment);
client/src/clientTmq.c:  taosMemoryFree(pAssignment);
client/src/clientTmq.c:    taosMemoryFree(pMsg->pData);
client/src/clientTmq.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientTmq.c:  char* msg = taosMemoryCalloc(1, msgSize);
client/src/clientTmq.c:    taosMemoryFree(msg);
client/src/clientTmq.c:  SMsgSendInfo* sendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientTmq.c:    taosMemoryFree(msg);
client/src/clientTmq.c:  SMqSeekParam* pParam = taosMemoryMalloc(sizeof(SMqSeekParam));
client/src/clientTmq.c:    taosMemoryFree(msg);
client/src/clientTmq.c:    taosMemoryFree(sendInfo);
client/src/clientTmq.c:    taosMemoryFree(pParam);
client/src/clientTmq.c:  taosMemoryFree(pParam);
client/src/clientMain.c:    int64_t *rid = taosMemoryCalloc(1, sizeof(int64_t));
client/src/clientMain.c:    taosMemoryFree(pMsg->pData);
client/src/clientMain.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientMain.c:    taosMemoryFree(pInfo);
client/src/clientMain.c:  uint64_t* pWhiteLists = taosMemoryMalloc(wlRsp.numWhiteLists * sizeof(uint64_t));
client/src/clientMain.c:    taosMemoryFree(pMsg->pData);
client/src/clientMain.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientMain.c:    taosMemoryFree(pInfo);
client/src/clientMain.c:  taosMemoryFree(pWhiteLists);
client/src/clientMain.c:  taosMemoryFree(pMsg->pData);
client/src/clientMain.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMain.c:  taosMemoryFree(pInfo);
client/src/clientMain.c:  void* pReq = taosMemoryMalloc(msgLen);
client/src/clientMain.c:    taosMemoryFree(pReq);
client/src/clientMain.c:  SFetchWhiteListInfo* pParam = taosMemoryMalloc(sizeof(SFetchWhiteListInfo));
client/src/clientMain.c:    taosMemoryFree(pReq);
client/src/clientMain.c:  SMsgSendInfo* pSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientMain.c:    taosMemoryFree(pParam);
client/src/clientMain.c:    taosMemoryFree(pReq);
client/src/clientMain.c:    taosMemoryFree(taos);
client/src/clientMain.c:  taosMemoryFree(taos);
client/src/clientMain.c:    taosMemoryFree(pRsp);
client/src/clientMain.c:    taosMemoryFree(pRsp);
client/src/clientMain.c:    taosMemoryFree(pRspObj);
client/src/clientMain.c:    taosMemoryFree(pBtRspObj);
client/src/clientMain.c:        taosMemoryFree(data);
client/src/clientMain.c:  taosMemoryFree(pWrapper->pCatalogReq);
client/src/clientMain.c:  taosMemoryFree(pWrapper);
client/src/clientMain.c:  SCatalogReq *pTarget = taosMemoryCalloc(1, sizeof(SCatalogReq));
client/src/clientMain.c:  *pCxt = taosMemoryCalloc(1, sizeof(SParseContext));
client/src/clientMain.c:  SSqlCallbackWrapper *pWrapper = taosMemoryCalloc(1, sizeof(SSqlCallbackWrapper));
client/src/clientMain.c:    pWrapper->pCatalogReq = taosMemoryCalloc(1, sizeof(SCatalogReq));
client/src/clientMain.c:  taosMemoryFree(fields);
client/src/clientTmqConnector.c:  char *msg = (char *)taosMemoryCalloc(1, sizeof(char) * (len + 1));
client/src/clientTmqConnector.c:    taosMemoryFreeClear(msg);
client/src/clientTmqConnector.c:  taosMemoryFreeClear(msg);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(param);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  SMsgSendInfo* pMsgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:    taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:    taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  taosMemoryFreeClear(output.dbVgroup);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
client/src/clientMsgHandler.c:  *pRsp = taosMemoryCalloc(1, rspSize);
client/src/clientMsgHandler.c:      taosMemoryFree(pRes);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
client/src/clientMsgHandler.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
client/src/clientMsgHandler.c:  *pRsp = taosMemoryCalloc(1, rspSize);
client/src/clientMsgHandler.c:      taosMemoryFree(pRes);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pData);
client/src/clientMsgHandler.c:  taosMemoryFree(pMsg->pEpSet);
common/test/dataformatTest.cpp:  SSchema *pSchema = (SSchema *)taosMemoryCalloc(nCols, sizeof(SSchema));
common/test/dataformatTest.cpp:  taosMemoryFree(pSchema);
common/test/dataformatTest.cpp:  taosMemoryFreeClear(row);
common/test/dataformatTest.cpp:  taosMemoryFree(pTSchema);
common/test/dataformatTest.cpp:  taosMemoryFreeClear(row);
common/test/dataformatTest.cpp:  taosMemoryFree(pTSchema);
common/test/commonTests.cpp:  SSDataBlock* b = static_cast<SSDataBlock*>(taosMemoryCalloc(1, sizeof(SSDataBlock)));
common/test/commonTests.cpp:  infoData.pData = (char*) taosMemoryCalloc(numOfRows, infoData.info.bytes);
common/test/commonTests.cpp:  infoData.nullbitmap = (char*) taosMemoryCalloc(1, sizeof(char) * (numOfRows/8));
common/test/commonTests.cpp:  infoData1.pData = (char*) taosMemoryCalloc(numOfRows, infoData.info.bytes);
common/test/commonTests.cpp:  infoData1.nullbitmap = (char*) taosMemoryCalloc(1, sizeof(char) * (numOfRows/8));
common/src/tdatablock.c:      char* buf = taosMemoryRealloc(pColumnInfoData->pData, newSize);
common/src/tdatablock.c:    char* buf = taosMemoryRealloc(pColumnInfoData->pData, newSize);
common/src/tdatablock.c:      char* p = taosMemoryRealloc(pColumnInfoData->varmeta.offset, sizeof(int32_t) * (numOfRow1 + numOfRow2));
common/src/tdatablock.c:      char* tmp = taosMemoryRealloc(pColumnInfoData->pData, len + oldLen);
common/src/tdatablock.c:      char* tmp = taosMemoryRealloc(pColumnInfoData->pData, finalNumOfRows * pColumnInfoData->info.bytes);
common/src/tdatablock.c:        char* btmp = taosMemoryRealloc(pColumnInfoData->nullbitmap, BitmapLen(finalNumOfRows));
common/src/tdatablock.c:      char* tmp = taosMemoryRealloc(pColumnInfoData->pData, newLen);
common/src/tdatablock.c:        char* tmp = taosMemoryRealloc(pDst->pData, pDst->varmeta.length + allLen);
common/src/tdatablock.c:      char*  tmp = taosMemoryRealloc(pCol->varmeta.offset, metaSize);  // preview calloc is too small
common/src/tdatablock.c:        char* tmp = taosMemoryRealloc(pCol->pData, colLength);
common/src/tdatablock.c:        char* tmp = taosMemoryRealloc(pCol->pData, colLength);
common/src/tdatablock.c:  SColumnInfoData* pCols = taosMemoryCalloc(numOfCols, sizeof(SColumnInfoData));
common/src/tdatablock.c:      pCols[i].varmeta.offset = taosMemoryCalloc(rows, sizeof(int32_t));
common/src/tdatablock.c:      pCols[i].pData = taosMemoryCalloc(1, pColInfoData->varmeta.length);
common/src/tdatablock.c:      pCols[i].nullbitmap = taosMemoryCalloc(1, BitmapLen(rows));
common/src/tdatablock.c:      pCols[i].pData = taosMemoryCalloc(rows, pCols[i].info.bytes);
common/src/tdatablock.c:      taosMemoryFreeClear(pColInfoData->varmeta.offset);
common/src/tdatablock.c:      taosMemoryFreeClear(pColInfoData->nullbitmap);
common/src/tdatablock.c:    taosMemoryFreeClear(pColInfoData->pData);
common/src/tdatablock.c:  taosMemoryFreeClear(pCols);
common/src/tdatablock.c:  int32_t* index = taosMemoryCalloc(rows, sizeof(int32_t));
common/src/tdatablock.c:static void destroyTupleIndex(int32_t* index) { taosMemoryFreeClear(index); }
common/src/tdatablock.c:    char* tmp = taosMemoryRealloc(pColumn->varmeta.offset, sizeof(int32_t) * numOfRows);
common/src/tdatablock.c:    char* tmp = taosMemoryRealloc(pColumn->nullbitmap, BitmapLen(numOfRows));
common/src/tdatablock.c:    tmp = taosMemoryMallocAlign(MALLOC_ALIGN_BYTES, numOfRows * pColumn->info.bytes);
common/src/tdatablock.c:      taosMemoryFreeClear(pColumn->pData);
common/src/tdatablock.c:  taosMemoryFreeClear(pBlock->pBlockAgg);
common/src/tdatablock.c:    taosMemoryFreeClear(pBlock->info.pks[0].pData);
common/src/tdatablock.c:    taosMemoryFreeClear(pBlock->info.pks[1].pData);
common/src/tdatablock.c:  taosMemoryFreeClear(pBlock);
common/src/tdatablock.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
common/src/tdatablock.c:  p->pData = taosMemoryCalloc(1, pDst->pks[0].nData);
common/src/tdatablock.c:  p->pData = taosMemoryCalloc(1, pDst->pks[1].nData);
common/src/tdatablock.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
common/src/tdatablock.c:    taosMemoryFree(pBlock);
common/src/tdatablock.c:    taosMemoryFreeClear(pColData->varmeta.offset);
common/src/tdatablock.c:    taosMemoryFreeClear(pColData->nullbitmap);
common/src/tdatablock.c:  taosMemoryFreeClear(pColData->pData);
common/src/tdatablock.c:  *pDataBuf = taosMemoryCalloc(size, 1);
common/src/tdatablock.c:    if (!(pReq = taosMemoryMalloc(sizeof(SSubmitReq2)))) {
common/src/tdatablock.c:      taosMemoryFreeClear(pReq);
common/src/tdatablock.c:  char* pBuf = taosMemoryCalloc(1, TSDB_TABLE_NAME_LEN + 1);
common/src/tdatablock.c:    taosMemoryFree(pBuf);
common/src/tdatablock.c:        char* tmp = taosMemoryRealloc(pColInfoData->pData, colLen[i]);
common/src/tdatablock.c:          char* p2 = taosMemoryMalloc(len);
common/src/tdatablock.c:          taosMemoryFree(p2);
common/src/tdatablock.c:        pBitmap = taosMemoryCalloc(1, bmLen);
common/src/tdatablock.c:    taosMemoryFree(pBitmap);
common/src/tname.c:  SName* p = taosMemoryMalloc(sizeof(SName));
common/src/ttszip.c:  STSBuf* pTSBuf = taosMemoryCalloc(1, sizeof(STSBuf));
common/src/ttszip.c:    taosMemoryFree(pTSBuf);
common/src/ttszip.c:      taosMemoryFree(pTSBuf);
common/src/ttszip.c:  STSBuf* pTSBuf = taosMemoryCalloc(1, sizeof(STSBuf));
common/src/ttszip.c:    taosMemoryFree(pTSBuf);
common/src/ttszip.c:    STSGroupBlockInfoEx* tmp = taosMemoryRealloc(pTSBuf->pData, sizeof(STSGroupBlockInfoEx) * pTSBuf->numOfAlloc);
common/src/ttszip.c:  STSGroupBlockInfo* buf = (STSGroupBlockInfo*)taosMemoryCalloc(1, infoSize);
common/src/ttszip.c:  taosMemoryFree(buf);
common/src/ttszip.c:  taosMemoryFreeClear(pTSBuf->assistBuf);
common/src/ttszip.c:  taosMemoryFreeClear(pTSBuf->tsData.rawBuf);
common/src/ttszip.c:  taosMemoryFreeClear(pTSBuf->pData);
common/src/ttszip.c:  taosMemoryFreeClear(pTSBuf->block.payload);
common/src/ttszip.c:  taosMemoryFree(pTSBuf);
common/src/ttszip.c:        (STSGroupBlockInfoEx*)taosMemoryRealloc(pTSBuf->pData, sizeof(STSGroupBlockInfoEx) * newSize);
common/src/ttszip.c:    char* rawBuf = taosMemoryRealloc(ptsData->rawBuf, MEM_BUF_SIZE);
common/src/ttszip.c:    char*   tmp = taosMemoryRealloc(ptsData->rawBuf, (size_t)newSize);
common/src/ttszip.c:    char* tp = taosMemoryRealloc(pBlock->tag.pz, pBlock->tag.nLen + 1);
common/src/ttszip.c:      STSGroupBlockInfoEx* tmp = taosMemoryRealloc(pDestBuf->pData, sizeof(STSGroupBlockInfoEx) * newSize);
common/src/ttszip.c:  pTSBuf->pData = taosMemoryCalloc(pTSBuf->numOfAlloc, sizeof(STSGroupBlockInfoEx));
common/src/ttszip.c:  pTSBuf->tsData.rawBuf = taosMemoryMalloc(MEM_BUF_SIZE);
common/src/ttszip.c:  pTSBuf->assistBuf = taosMemoryMalloc(MEM_BUF_SIZE);
common/src/ttszip.c:  pTSBuf->block.payload = taosMemoryMalloc(MEM_BUF_SIZE);
common/src/ttszip.c:  (*id) = taosMemoryMalloc(tsBufGetNumOfGroup(pTSBuf) * sizeof(int32_t));
common/src/cos_cp.c:  if (cp_body) taosMemoryFree(cp_body);
common/src/cos_cp.c:  char* cp_body = taosMemoryMalloc(size + 1);
common/src/cos_cp.c:    taosMemoryFree(cp_body);
common/src/cos_cp.c:  taosMemoryFree(data);
common/src/tmsg.c:      taosMemoryFree(pReq->sql); \
common/src/tmsg.c:      pReq->query = taosMemoryCalloc(1, sizeof(*pReq->query));
common/src/tmsg.c:    pRsp->query = taosMemoryCalloc(1, sizeof(*pRsp->query));
common/src/tmsg.c:    pReq->pComment = taosMemoryMalloc(pReq->commentLen + 1);
common/src/tmsg.c:    pReq->pAst1 = taosMemoryMalloc(pReq->ast1Len);
common/src/tmsg.c:    pReq->pAst2 = taosMemoryMalloc(pReq->ast2Len);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->pComment);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->pAst1);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->pAst2);
common/src/tmsg.c:    pReq->comment = taosMemoryMalloc(pReq->commentLen + 1);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->comment);
common/src/tmsg.c:    pReq->expr = taosMemoryMalloc(pReq->exprLen);
common/src/tmsg.c:    pReq->tagsFilter = taosMemoryMalloc(pReq->tagsFilterLen);
common/src/tmsg.c:    pReq->sql = taosMemoryMalloc(pReq->sqlLen);
common/src/tmsg.c:    pReq->ast = taosMemoryMalloc(pReq->astLen);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->expr);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->tagsFilter);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->sql);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->ast);
common/src/tmsg.c:    pReq->pCont = taosMemoryMalloc(pReq->contLen + 1);
common/src/tmsg.c:void tFreeSStatisReq(SStatisReq *pReq) { taosMemoryFreeClear(pReq->pCont); }
common/src/tmsg.c:  SIpWhiteList *pNew = taosMemoryCalloc(1, sz);
common/src/tmsg.c:  pReq->pIpRanges = taosMemoryMalloc(pReq->numIpRanges * sizeof(SIpV4Range));
common/src/tmsg.c:  pReq->pUserIpWhite = taosMemoryCalloc(1, sizeof(SUpdateUserIpWhite) * pReq->numOfUser);
common/src/tmsg.c:    pUserWhite->pIpRanges = taosMemoryCalloc(1, pUserWhite->numOfRange * sizeof(SIpV4Range));
common/src/tmsg.c:    taosMemoryFree(pUserWhite->pIpRanges);
common/src/tmsg.c:  taosMemoryFree(pReq->pUserIpWhite);
common/src/tmsg.c:  SUpdateIpWhite *pClone = taosMemoryCalloc(1, sizeof(SUpdateIpWhite));
common/src/tmsg.c:  pClone->pUserIpWhite = taosMemoryCalloc(1, sizeof(SUpdateUserIpWhite) * pReq->numOfUser);
common/src/tmsg.c:    pNew->pIpRanges = taosMemoryCalloc(1, sz);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->pIpRanges);
common/src/tmsg.c:  pReq->pIpRanges = taosMemoryMalloc(pReq->numIpRanges * sizeof(SIpV4Range));
common/src/tmsg.c:  taosMemoryFreeClear(pReq->tagCond);
common/src/tmsg.c:  taosMemoryFree(pReq->pIpRanges);
common/src/tmsg.c:      key = taosMemoryCalloc(keyLen + 1, sizeof(char));
common/src/tmsg.c:      value = taosMemoryCalloc(valuelen + 1, sizeof(char));
common/src/tmsg.c:      taosMemoryFreeClear(key);
common/src/tmsg.c:      taosMemoryFreeClear(value);
common/src/tmsg.c:      key = taosMemoryCalloc(keyLen + 1, sizeof(char));
common/src/tmsg.c:      value = taosMemoryCalloc(valuelen + 1, sizeof(char));
common/src/tmsg.c:      taosMemoryFreeClear(key);
common/src/tmsg.c:      taosMemoryFreeClear(value);
common/src/tmsg.c:      key = taosMemoryCalloc(keyLen + 1, sizeof(char));
common/src/tmsg.c:      value = taosMemoryCalloc(valuelen + 1, sizeof(char));
common/src/tmsg.c:      taosMemoryFreeClear(key);
common/src/tmsg.c:      taosMemoryFreeClear(value);
common/src/tmsg.c:      key = taosMemoryCalloc(keyLen + 1, sizeof(char));
common/src/tmsg.c:      value = taosMemoryCalloc(valuelen + 1, sizeof(char));
common/src/tmsg.c:      taosMemoryFreeClear(key);
common/src/tmsg.c:      taosMemoryFreeClear(value);
common/src/tmsg.c:      key = taosMemoryCalloc(keyLen + 1, sizeof(char));
common/src/tmsg.c:      value = taosMemoryCalloc(valuelen + 1, sizeof(char));
common/src/tmsg.c:      taosMemoryFreeClear(key);
common/src/tmsg.c:      taosMemoryFreeClear(value);
common/src/tmsg.c:      key = taosMemoryCalloc(keyLen + 1, sizeof(char));
common/src/tmsg.c:      value = taosMemoryCalloc(valuelen + 1, sizeof(char));
common/src/tmsg.c:      taosMemoryFreeClear(key);
common/src/tmsg.c:      taosMemoryFreeClear(value);
common/src/tmsg.c:      key = taosMemoryCalloc(keyLen + 1, sizeof(char));
common/src/tmsg.c:      taosMemoryFreeClear(key);
common/src/tmsg.c:  taosMemoryFreeClear(key);
common/src/tmsg.c:  taosMemoryFreeClear(value);
common/src/tmsg.c:  pRsp->pWhiteLists = taosMemoryMalloc(pRsp->numWhiteLists * sizeof(SIpV4Range));
common/src/tmsg.c:void tFreeSGetUserWhiteListRsp(SGetUserWhiteListRsp *pRsp) { taosMemoryFree(pRsp->pWhiteLists); }
common/src/tmsg.c:    pReq->pCode = taosMemoryCalloc(1, pReq->codeLen);
common/src/tmsg.c:    pReq->pComment = taosMemoryCalloc(1, commentSize);
common/src/tmsg.c:  taosMemoryFree(pReq->pCode);
common/src/tmsg.c:  taosMemoryFree(pReq->pComment);
common/src/tmsg.c:      fInfo.pCode = taosMemoryCalloc(1, fInfo.codeSize);
common/src/tmsg.c:      fInfo.pComment = taosMemoryCalloc(1, fInfo.commentSize);
common/src/tmsg.c:  taosMemoryFree(pInfo->pCode);
common/src/tmsg.c:  taosMemoryFree(pInfo->pComment);
common/src/tmsg.c:  pRsp->pSchemas = taosMemoryMalloc(sizeof(SSchema) * totalCols);
common/src/tmsg.c:      pRsp->pSchemaExt = taosMemoryMalloc(sizeof(SSchemaExt) * pRsp->numOfColumns);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->pComment);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->pSchemas);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->pSchemaExt);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->pTags);
common/src/tmsg.c:    pRsp->useDbRsp = taosMemoryCalloc(1, sizeof(SUseDbRsp));
common/src/tmsg.c:    pRsp->cfgRsp = taosMemoryCalloc(1, sizeof(SDbCfgRsp));
common/src/tmsg.c:      pRsp->pTsmaRsp = taosMemoryCalloc(1, sizeof(STableTSMAInfoRsp));
common/src/tmsg.c:    taosMemoryFree(pDbRsp->useDbRsp);
common/src/tmsg.c:    taosMemoryFree(pDbRsp->cfgRsp);
common/src/tmsg.c:    taosMemoryFree(pDbRsp->pTsmaRsp);
common/src/tmsg.c:        taosMemoryFree(info.expr);
common/src/tmsg.c:  taosMemoryFree(pInfo->expr);
common/src/tmsg.c://     pReq->payload = taosMemoryMalloc(pReq->payloadLen);
common/src/tmsg.c:void tFreeSShowReq(SShowReq *pReq) { taosMemoryFreeClear(pReq->payload); }
common/src/tmsg.c:    pRsp->pSchemas = taosMemoryMalloc(sizeof(SSchema) * totalCols);
common/src/tmsg.c:      pRsp->pSchemaExt = taosMemoryMalloc(sizeof(SSchemaExt) * pRsp->numOfColumns);
common/src/tmsg.c:          taosMemoryFree(info.expr);
common/src/tmsg.c:  taosMemoryFreeClear(((STableMetaRsp *)pRsp)->pSchemas);
common/src/tmsg.c:  taosMemoryFreeClear(((STableMetaRsp *)pRsp)->pSchemaExt);
common/src/tmsg.c:      pReq->ast = taosMemoryCalloc(1, astLen + 1);
common/src/tmsg.c:    pReq->sql = taosMemoryCalloc(1, sqlLen + 1);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->sql);
common/src/tmsg.c:    taosMemoryFreeClear(pReq->ast);
common/src/tmsg.c:  pReq->arbToken = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  taosMemoryFree(pReq->arbToken);
common/src/tmsg.c:  pReq->arbToken = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  pReq->member0Token = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  pReq->member1Token = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->arbToken);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->member0Token);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->member1Token);
common/src/tmsg.c:  pRsp->arbToken = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  pRsp->member0Token = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  pRsp->member1Token = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->arbToken);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->member0Token);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->member1Token);
common/src/tmsg.c:  pReq->arbToken = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  pReq->memberToken = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->arbToken);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->memberToken);
common/src/tmsg.c:  pRsp->arbToken = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  pRsp->memberToken = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->arbToken);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->memberToken);
common/src/tmsg.c:      group.members[i].token = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:    group.assignedLeader.token = taosMemoryMalloc(TSDB_ARB_TOKEN_SIZE);
common/src/tmsg.c:      taosMemoryFreeClear(pGroup->members[i].token);
common/src/tmsg.c:    taosMemoryFreeClear(pGroup->assignedLeader.token);
common/src/tmsg.c:    pRsp->subplanInfo = taosMemoryCalloc(pRsp->numOfPlans, sizeof(SExplainExecInfo));
common/src/tmsg.c:    taosMemoryFree(pExec->verboseInfo);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->subplanInfo);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->sql);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->msg);
common/src/tmsg.c:      STableScanOperatorParam *pScan = taosMemoryMalloc(sizeof(STableScanOperatorParam));
common/src/tmsg.c:      SOperatorParam *pChild = taosMemoryCalloc(1, sizeof(SOperatorParam));
common/src/tmsg.c:    pReq->pOpParam = taosMemoryMalloc(sizeof(*pReq->pOpParam));
common/src/tmsg.c:  pReq->sql = taosMemoryCalloc(1, pReq->sqlLen + 1);
common/src/tmsg.c:    pReq->sql = taosMemoryCalloc(1, sqlLen + 1);
common/src/tmsg.c:    pReq->ast = taosMemoryCalloc(1, astLen + 1);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->sql);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->ast);
common/src/tmsg.c:  taosMemoryFree(pWrapper->pColCmpr);
common/src/tmsg.c:    pReq->comment = taosMemoryMalloc(pReq->commentLen + 1);
common/src/tmsg.c:      taosMemoryFree(pReq->comment);
common/src/tmsg.c:      if (pReq->ntb.schemaRow.pSchema) taosMemoryFree(pReq->ntb.schemaRow.pSchema);
common/src/tmsg.c:  if (pReq->colCmpr.pColCmpr) taosMemoryFree(pReq->colCmpr.pColCmpr);
common/src/tmsg.c:    taosMemoryFree(pReq->sql);
common/src/tmsg.c:    taosMemoryFreeClear(pCreateReq->sql);
common/src/tmsg.c:    taosMemoryFreeClear(pCreateReq->comment);
common/src/tmsg.c:    pRsp->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta->pSchemas);
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta->pSchemaExt);
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta);
common/src/tmsg.c://   pBlock->tblFName = taosMemoryCalloc(TSDB_TABLE_FNAME_LEN, 1);
common/src/tmsg.c://     pBlock->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c://   pRsp->pBlocks = taosMemoryCalloc(pRsp->nBlocks, sizeof(*pRsp->pBlocks));
common/src/tmsg.c://   taosMemoryFree(pRsp->tblFName);
common/src/tmsg.c://     taosMemoryFree(pRsp->pMeta->pSchemas);
common/src/tmsg.c://     taosMemoryFree(pRsp->pMeta);
common/src/tmsg.c:      taosMemoryFree(sRsp->tblFName);
common/src/tmsg.c:      taosMemoryFree(sRsp->pMeta);
common/src/tmsg.c:    taosMemoryFree(pRsp->pBlocks);
common/src/tmsg.c:  taosMemoryFree(pRsp);
common/src/tmsg.c:    pRsp->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c://     pRsp->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c:    pRsp->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c://     pRsp->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta->pSchemas);
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta->pSchemaExt);
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta);
common/src/tmsg.c:    pRsp->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c://     pRsp->pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta->pSchemas);
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta->pSchemaExt);
common/src/tmsg.c:    taosMemoryFree(pRsp->pMeta);
common/src/tmsg.c:      char *tmp = taosMemoryCalloc(1, pVal->primaryKey.nData + 1);
common/src/tmsg.c:      taosMemoryFree(tmp);
common/src/tmsg.c:    pLeft->primaryKey.pData = taosMemoryMalloc(pRight->primaryKey.nData);
common/src/tmsg.c:    taosMemoryFreeClear(pVal->primaryKey.pData);
common/src/tmsg.c:void tDeleteMqMetaRsp(SMqMetaRsp *pRsp) { taosMemoryFree(pRsp->metaRsp); }
common/src/tmsg.c:        SSchemaWrapper *pSW = (SSchemaWrapper *)taosMemoryCalloc(1, sizeof(SSchemaWrapper));
common/src/tmsg.c:          taosMemoryFree(pSW);
common/src/tmsg.c:  taosArrayDestroyP(pRsp->blockData, (FDelete)taosMemoryFree);
common/src/tmsg.c:  taosArrayDestroyP(pRsp->blockTbName, (FDelete)taosMemoryFree);
common/src/tmsg.c:  taosArrayDestroyP(pRsp->createTableReq, (FDelete)taosMemoryFree);
common/src/tmsg.c:    pSubmitTbData->pCreateTbReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
common/src/tmsg.c:      taosMemoryFreeClear(pTbData->pCreateTbReq);
common/src/tmsg.c:      taosMemoryFree(pTbData->pCreateTbReq);
common/src/tmsg.c:          taosMemoryFree(aCreateTbRsp[i].pMeta);
common/src/tmsg.c:          taosMemoryFree(aCreateTbRsp[i].pMeta);
common/src/tmsg.c:  taosMemoryFreeClear(pSubTopicEp->schema.pSchema);
common/src/tmsg.c:    pReq->pSchema = taosMemoryCalloc(pReq->numOfCols, sizeof(SSchema));
common/src/tmsg.c:  taosMemoryFreeClear(pReq->querySql);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->sql);
common/src/tmsg.c:  taosMemoryFreeClear(pReq->pSchema);
common/src/tmsg.c:  taosMemoryFree(pReq->sql);
common/src/tmsg.c:    pRsp->pSchema = taosMemoryCalloc(pRsp->numOfCols, sizeof(SSchema));
common/src/tmsg.c:  taosMemoryFree(pRsp->user);
common/src/tmsg.c:  taosMemoryFree(pRsp->querySql);
common/src/tmsg.c:  taosMemoryFree(pRsp->pSchema);
common/src/tmsg.c:    SViewMetaRsp *metaRsp = taosMemoryCalloc(1, sizeof(SViewMetaRsp));
common/src/tmsg.c:    taosMemoryFree(pMetaRsp);
common/src/tmsg.c:    STableTSMAInfo *pTsma = taosMemoryCalloc(1, sizeof(STableTSMAInfo));
common/src/tmsg.c:    taosMemoryFree(pTsmaInfo->ast);
common/src/tmsg.c:    taosMemoryFree(pTsmaInfo);
common/src/tmsg.c:  STableTSMAInfo *pRet = taosMemoryCalloc(1, sizeof(STableTSMAInfo));
common/src/tmsg.c:  pRsp->pMetaBuff = taosMemoryCalloc(1, pRsp->metaBuffLen);
common/src/tmsg.c:  taosMemoryFreeClear(pRsp->pMetaBuff);
common/src/tmsg.c:  taosArrayDestroyP(pRsp->batchMetaReq, taosMemoryFree);
common/src/ttime.c:    newColData = taosMemoryCalloc(1, charLen + 1);
common/src/ttime.c:      taosMemoryFree(newColData);
common/src/ttime.c:    taosMemoryFree(newColData);
common/src/ttime.c:    newColData = taosMemoryCalloc(1, charLen + TSDB_NCHAR_SIZE);
common/src/ttime.c:      taosMemoryFree(newColData);
common/src/ttime.c:      taosMemoryFree(newColData);
common/src/ttime.c:    taosMemoryFree(newColData);
common/src/trow.c:  STSRow *trow = taosMemoryMalloc(TD_ROW_LEN(row));
common/src/trow.c:    *ppRow = (STSRow *)taosMemoryCalloc(1, rowTotalLen);
common/src/trow.c:    varBuf = taosMemoryMalloc(maxVarDataLen);
common/src/trow.c:        taosMemoryFreeClear(*ppRow);
common/src/trow.c:  taosMemoryFreeClear(varBuf);
common/src/tvariant.c:      pVar->ucs4 = taosMemoryCalloc(1, (lenInwchar + 1) * TSDB_NCHAR_SIZE);
common/src/tvariant.c:      pVar->pz = taosMemoryCalloc(len + 1, sizeof(char));
common/src/tvariant.c:    taosMemoryFreeClear(pVar->pz);
common/src/tvariant.c:    char   *p = taosMemoryRealloc(pDst->pz, len);
common/src/tdataformat.c:  *ppRow = (SRow *)taosMemoryCalloc(1, sinfo->tupleRowSize);
common/src/tdataformat.c:  *ppRow = (SRow *)taosMemoryCalloc(1, sinfo->kvRowSize);
common/src/tdataformat.c:  if (pRow) taosMemoryFree(pRow);
common/src/tdataformat.c:  aIter = taosMemoryCalloc(nRow, sizeof(SRowIter *));
common/src/tdataformat.c:    taosMemoryFree(aIter);
common/src/tdataformat.c:  SRowIter *pIter = taosMemoryCalloc(1, sizeof(*pIter));
common/src/tdataformat.c:    taosMemoryFree(pIter);
common/src/tdataformat.c:  (*ppTag) = (STag *)taosMemoryCalloc(szTag, 1);
common/src/tdataformat.c:  if (pTag) taosMemoryFree(pTag);
common/src/tdataformat.c:    data = taosMemoryCalloc(1, typeBytes + VARSTR_HEADER_SIZE + value->nData);
common/src/tdataformat.c:  STSchema *pTSchema = taosMemoryCalloc(1, sizeof(STSchema) + sizeof(STColumn) * numOfCols);
common/src/tdataformat.c:    aDstColData = taosMemoryCalloc(1, sizeof(SColData) * nColData);
common/src/tdataformat.c:    taosMemoryFree(aDstColData);
common/src/cos.c:  taosMemoryFree(pBlock);
common/src/cos.c:  manager.etags = (char **)taosMemoryCalloc(totalSeq, sizeof(char *));
common/src/cos.c:    taosMemoryFree(manager.upload_id);
common/src/cos.c:    taosMemoryFree(manager.etags[i]);
common/src/cos.c:  taosMemoryFree(manager.etags);
common/src/cos.c:  cp.parts = taosMemoryCalloc(max_part_num, sizeof(SCheckpointPart));
common/src/cos.c:  // SCheckpointPart *parts = taosMemoryCalloc(cp.part_num, sizeof(SCheckpointPart));
common/src/cos.c:  manager.etags = (char **)taosMemoryCalloc(totalSeq, sizeof(char *));
common/src/cos.c:    taosMemoryFree(parts);
common/src/cos.c:    taosMemoryFree(cp.parts);
common/src/cos.c:    taosMemoryFree(manager.upload_id);
common/src/cos.c:      taosMemoryFree(manager.etags[i]);
common/src/cos.c:  taosMemoryFree(manager.etags);
common/src/cos.c:  taosMemoryFree(key);
common/src/cos.c:    cbd->buf = taosMemoryCalloc(1, cbd->content_length);
common/src/cos.c:  char *buf = taosMemoryCalloc(1, (apr_size_t)(len));
dnode/snode/src/snode.c:  SSnode *pSnode = taosMemoryCalloc(1, sizeof(SSnode));
dnode/snode/src/snode.c:  taosMemoryFree(pSnode);
dnode/snode/src/snode.c:  taosMemoryFree(pSnode);
dnode/mnode/sdb/src/sdb.c:  SSdb *pSdb = taosMemoryCalloc(1, sizeof(SSdb));
dnode/mnode/sdb/src/sdb.c:    taosMemoryFreeClear(pSdb->currDir);
dnode/mnode/sdb/src/sdb.c:    taosMemoryFreeClear(pSdb->tmpDir);
dnode/mnode/sdb/src/sdb.c:  taosMemoryFree(pSdb);
dnode/mnode/sdb/src/sdbRaw.c:  SSdbRaw *pRaw = taosMemoryCalloc(1, dataLen + sizeof(SSdbRaw));
dnode/mnode/sdb/src/sdbRaw.c:    taosMemoryFree(pRaw);
dnode/mnode/sdb/src/sdbRow.c:  SSdbRow *pRow = taosMemoryCalloc(1, objSize + sizeof(SSdbRow));
dnode/mnode/sdb/src/sdbRow.c:  taosMemoryFreeClear(pRow);
dnode/mnode/sdb/src/sdbFile.c:  SSdbRaw *pRaw = taosMemoryMalloc(bufLen + 100);
dnode/mnode/sdb/src/sdbFile.c:    taosMemoryFree(pRaw);
dnode/mnode/sdb/src/sdbFile.c:    taosMemoryFree(pRaw);
dnode/mnode/sdb/src/sdbFile.c:      SSdbRaw *pNewRaw = taosMemoryMalloc(bufLen + 100);
dnode/mnode/sdb/src/sdbFile.c:      char *plantContent = taosMemoryMalloc(ENCRYPTED_LEN(pRaw->dataLen));
dnode/mnode/sdb/src/sdbFile.c:      taosMemoryFree(plantContent);
dnode/mnode/sdb/src/sdbFile.c:          newData = taosMemoryMalloc(newDataLen);
dnode/mnode/sdb/src/sdbFile.c:          taosMemoryFree(newData);
dnode/mnode/sdb/src/sdbFile.c:  SSdbIter *pIter = taosMemoryCalloc(1, sizeof(SSdbIter));
dnode/mnode/sdb/src/sdbFile.c:    taosMemoryFree(pIter);
dnode/mnode/sdb/src/sdbFile.c:    taosMemoryFree(pIter->name);
dnode/mnode/sdb/src/sdbFile.c:  taosMemoryFree(pIter);
dnode/mnode/sdb/src/sdbFile.c:  void   *pBuf = taosMemoryCalloc(1, maxlen);
dnode/mnode/sdb/src/sdbFile.c:    taosMemoryFree(pBuf);
dnode/mnode/sdb/src/sdbFile.c:    taosMemoryFree(pBuf);
dnode/mnode/impl/test/arbgroup/arbgroup.cpp:  taosMemoryFree(pRow);
dnode/mnode/impl/test/arbgroup/arbgroup.cpp:  taosMemoryFree(pRaw);
dnode/mnode/impl/test/sdb/sdbTest.cpp:        taosMemoryFree(pBuf);
dnode/mnode/impl/test/stream/stream.cpp:  SMnode* pMnode = static_cast<SMnode*>(taosMemoryCalloc(1, sizeof(SMnode)));
dnode/mnode/impl/test/stream/stream.cpp:  SStreamTask* pTask = static_cast<SStreamTask*>(taosMemoryCalloc(1, sizeof(SStreamTask)));
dnode/mnode/impl/test/stream/stream.cpp:  pTask->exec.qmsg = (char*)taosMemoryMalloc(1);
dnode/mnode/impl/test/stream/stream.cpp:  taosMemoryFree(pMnode);
dnode/mnode/impl/test/trans/trans2.cpp:      void   *pReq = taosMemoryCalloc(1, contLen);
dnode/mnode/impl/test/trans/trans2.cpp:      void   *pReq = taosMemoryCalloc(1, contLen);
dnode/mnode/impl/test/trans/trans2.cpp:      void *pRsp = taosMemoryCalloc(1, 256);
dnode/mnode/impl/test/trans/trans1.cpp:    void*     buffer = taosMemoryMalloc(size);
dnode/mnode/impl/test/trans/trans1.cpp:    taosMemoryFree(buffer);
dnode/mnode/impl/test/func/func.cpp:  pReq->pCode = (char*)taosMemoryMalloc(size);
dnode/mnode/impl/test/func/func.cpp:  pReq->pComment = (char*)taosMemoryCalloc(1, len + 1);
dnode/mnode/impl/src/mndInfoSchema.c:  SSchema *schema = taosMemoryCalloc(colNum, sizeof(SSchema));
dnode/mnode/impl/src/mndInfoSchema.c:  pRsp->pSchemas = taosMemoryCalloc(pMeta->numOfColumns, sizeof(SSchema));
dnode/mnode/impl/src/mndInfoSchema.c:  pRsp->pSchemas = taosMemoryCalloc(pMeta->numOfColumns, sizeof(SSchema));
dnode/mnode/impl/src/mndInfoSchema.c:  pRsp->pSchemaExt = taosMemoryCalloc(pMeta->numOfColumns, sizeof(SSchemaExt));
dnode/mnode/impl/src/mndInfoSchema.c:    taosMemoryFreeClear(pMeta->pSchemas);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFree(pSub);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFree(req.qmsg);
dnode/mnode/impl/src/mndSubscribe.c:  void   *buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFree(req.qmsg);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFree(req.qmsg);
dnode/mnode/impl/src/mndSubscribe.c:  taosMemoryFree(req.qmsg);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFree(buf);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFree(buf);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFree(pRebInfo);
dnode/mnode/impl/src/mndSubscribe.c:    SMqVgEp* pVgEp = taosMemoryMalloc(sizeof(SMqVgEp));
dnode/mnode/impl/src/mndSubscribe.c:  taosMemoryFree(rebOutput->pSub);
dnode/mnode/impl/src/mndSubscribe.c:    SMqVDeleteReq *pReq = taosMemoryCalloc(1, sizeof(SMqVDeleteReq));
dnode/mnode/impl/src/mndSubscribe.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndSubscribe.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndSubscribe.c:  buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndSubscribe.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndSubscribe.c:  buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndSubscribe.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndSubscribe.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndScheduler.c:    SMqVgEp* pVgEp = taosMemoryMalloc(sizeof(SMqVgEp));
dnode/mnode/impl/src/mndConsumer.c:      topicEp.schema.pSchema = taosMemoryCalloc(topicEp.schema.nCols, sizeof(SSchema));
dnode/mnode/impl/src/mndConsumer.c:    taosMemoryFree(pItem);
dnode/mnode/impl/src/mndConsumer.c:  taosArrayDestroyP(subscribe.topicNames, (FDelete)taosMemoryFree);
dnode/mnode/impl/src/mndConsumer.c:  buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndConsumer.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndConsumer.c:  buf = taosMemoryMalloc(len);
dnode/mnode/impl/src/mndConsumer.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndConsumer.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndConsumer.c:      taosMemoryFree(p);
dnode/mnode/impl/src/mndConsumer.c:      taosMemoryFree(pNewTopic);
dnode/mnode/impl/src/mndCompactDetail.c:  buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndCompactDetail.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndCompactDetail.c:  buf = taosMemoryMalloc(tlen + 1);
dnode/mnode/impl/src/mndCompactDetail.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndCompactDetail.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndFunc.c:    pFunc->pComment = taosMemoryCalloc(1, pFunc->commentSize);
dnode/mnode/impl/src/mndFunc.c:  pFunc->pCode = taosMemoryCalloc(1, pFunc->codeSize);
dnode/mnode/impl/src/mndFunc.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndFunc.c:  taosMemoryFreeClear(pFunc->pCode);
dnode/mnode/impl/src/mndFunc.c:  taosMemoryFreeClear(pFunc->pComment);
dnode/mnode/impl/src/mndFunc.c:    taosMemoryFree(pOld->pComment);
dnode/mnode/impl/src/mndFunc.c:    pOld->pComment = taosMemoryMalloc(pOld->commentSize);
dnode/mnode/impl/src/mndFunc.c:    taosMemoryFree(pOld->pCode);
dnode/mnode/impl/src/mndFunc.c:    pOld->pCode = taosMemoryMalloc(pOld->codeSize);
dnode/mnode/impl/src/mndFunc.c:    func.pComment = taosMemoryMalloc(func.commentSize);
dnode/mnode/impl/src/mndFunc.c:  func.pCode = taosMemoryMalloc(func.codeSize);
dnode/mnode/impl/src/mndFunc.c:  taosMemoryFree(func.pCode);
dnode/mnode/impl/src/mndFunc.c:  taosMemoryFree(func.pComment);
dnode/mnode/impl/src/mndFunc.c:      funcInfo.pCode = taosMemoryCalloc(1, funcInfo.codeSize);
dnode/mnode/impl/src/mndFunc.c:        funcInfo.pComment = taosMemoryCalloc(1, funcInfo.commentSize);
dnode/mnode/impl/src/mndFunc.c:      char *b2 = taosMemoryCalloc(1, pShow->pMeta->pSchemas[cols].bytes);
dnode/mnode/impl/src/mndFunc.c:      taosMemoryFree(b2);
dnode/mnode/impl/src/mndFunc.c:    char   *b4 = taosMemoryMalloc(varCodeLen);
dnode/mnode/impl/src/mndFunc.c:    taosMemoryFree(b4);
dnode/mnode/impl/src/mndTrans.c:      action.pRaw = taosMemoryMalloc(dataLen);
dnode/mnode/impl/src/mndTrans.c:      action.pCont = taosMemoryMalloc(action.contLen);
dnode/mnode/impl/src/mndTrans.c:  taosMemoryFreeClear(action.pCont);
dnode/mnode/impl/src/mndTrans.c:    pTrans->param = taosMemoryMalloc(pTrans->paramLen);
dnode/mnode/impl/src/mndTrans.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndTrans.c:    taosMemoryFree(pTrans->rpcRsp);
dnode/mnode/impl/src/mndTrans.c:    taosMemoryFree(pTrans->param);
dnode/mnode/impl/src/mndTrans.c:  STrans *pTrans = taosMemoryCalloc(1, sizeof(STrans));
dnode/mnode/impl/src/mndTrans.c:      taosMemoryFreeClear(pAction->pRaw);
dnode/mnode/impl/src/mndTrans.c:      taosMemoryFreeClear(pAction->pCont);
dnode/mnode/impl/src/mndTrans.c:    taosMemoryFreeClear(pTrans);
dnode/mnode/impl/src/mndDb.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndDb.c:  taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndDb.c:  taosMemoryFree(pVgroups);
dnode/mnode/impl/src/mndDb.c:    pRsp = taosMemoryMalloc(rspLen);
dnode/mnode/impl/src/mndDb.c:      rsp.useDbRsp = taosMemoryCalloc(1, sizeof(SUseDbRsp));
dnode/mnode/impl/src/mndDb.c:      rsp.useDbRsp = taosMemoryCalloc(1, sizeof(SUseDbRsp));
dnode/mnode/impl/src/mndDb.c:      rsp.cfgRsp = taosMemoryCalloc(1, sizeof(SDbCfgRsp));
dnode/mnode/impl/src/mndDb.c:      rsp.pTsmaRsp = taosMemoryCalloc(1, sizeof(STableTSMAInfoRsp));
dnode/mnode/impl/src/mndDb.c:      rsp.useDbRsp = taosMemoryCalloc(1, sizeof(SUseDbRsp));
dnode/mnode/impl/src/mndDb.c:  void   *pRsp = taosMemoryMalloc(rspLen);
dnode/mnode/impl/src/mndDb.c:  char       *p1 = taosMemoryCalloc(1, 100);
dnode/mnode/impl/src/mndDb.c:  char   *buf = taosMemoryMalloc(bytes);
dnode/mnode/impl/src/mndDb.c:      taosMemoryFree(rentensionVstr);
dnode/mnode/impl/src/mndDb.c:  taosMemoryFree(buf);
dnode/mnode/impl/src/mndCompact.c:  buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndCompact.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndCompact.c:  buf = taosMemoryMalloc(tlen + 1);
dnode/mnode/impl/src/mndCompact.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndCompact.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndCompact.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndCompact.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndIndex.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndIndex.c:  SMsgHead *pHead = taosMemoryCalloc(1, len);
dnode/mnode/impl/src/mndIndex.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndIndex.c:    taosMemoryFree(pRow);
dnode/mnode/impl/src/mndIndex.c:    taosMemoryFree(newStb.pTags);
dnode/mnode/impl/src/mndIndex.c:    taosMemoryFree(newStb.pColumns);
dnode/mnode/impl/src/mndIndex.c:    taosMemoryFree(newStb.pCmpr);
dnode/mnode/impl/src/mndIndex.c:  taosMemoryFree(newObj.pTags);
dnode/mnode/impl/src/mndIndex.c:  taosMemoryFree(newObj.pColumns);
dnode/mnode/impl/src/mndIndex.c:  taosMemoryFree(newObj.pCmpr);
dnode/mnode/impl/src/mndTelem.c:    taosMemoryFree(pCont);
dnode/mnode/impl/src/mndArbGroup.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndDump.c:  taosMemoryFree(pCont);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndVgroup.c:  taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:  pVgroups = taosMemoryCalloc(pDb->cfg.numOfVgroups, sizeof(SVgObj));
dnode/mnode/impl/src/mndVgroup.c:  if (code != 0) taosMemoryFree(pVgroups);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:  SMsgHead *pHead = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pHead);
dnode/mnode/impl/src/mndVgroup.c:  SMsgHead *pHead = taosMemoryMalloc(totallen);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:  taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pHead);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndVgroup.c:  void *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndVgroup.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndQnode.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndQnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndQnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndQnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndQnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndQnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndQnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndCluster.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndMnode.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndMnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndMnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndMnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndMnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndMnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndMnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndMnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndMnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamTrans.c:  buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndStreamTrans.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndStreamTrans.c:    taosMemoryFree(p);
dnode/mnode/impl/src/mndAcct.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndSma.c:    pSma->expr = taosMemoryCalloc(pSma->exprLen, 1);
dnode/mnode/impl/src/mndSma.c:    pSma->tagsFilter = taosMemoryCalloc(pSma->tagsFilterLen, 1);
dnode/mnode/impl/src/mndSma.c:    pSma->sql = taosMemoryCalloc(pSma->sqlLen, 1);
dnode/mnode/impl/src/mndSma.c:    pSma->ast = taosMemoryCalloc(pSma->astLen, 1);
dnode/mnode/impl/src/mndSma.c:      taosMemoryFreeClear(pSma->expr);
dnode/mnode/impl/src/mndSma.c:      taosMemoryFreeClear(pSma->tagsFilter);
dnode/mnode/impl/src/mndSma.c:      taosMemoryFreeClear(pSma->sql);
dnode/mnode/impl/src/mndSma.c:      taosMemoryFreeClear(pSma->ast);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndSma.c:  taosMemoryFreeClear(pSma->tagsFilter);
dnode/mnode/impl/src/mndSma.c:  taosMemoryFreeClear(pSma->expr);
dnode/mnode/impl/src/mndSma.c:  taosMemoryFreeClear(pSma->sql);
dnode/mnode/impl/src/mndSma.c:  taosMemoryFreeClear(pSma->ast);
dnode/mnode/impl/src/mndSma.c:  SMsgHead *pHead = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pHead);
dnode/mnode/impl/src/mndSma.c:  SMsgHead *pHead = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pHead);
dnode/mnode/impl/src/mndSma.c:  pSma->schemaTag.pSchema = taosMemoryCalloc(1, sizeof(SSchema));
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pSmaReq);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pSmaReq);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pSmaReq);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pSmaObj->schemaRow.pSchema);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFreeClear(pSmaObj->schemaTag.pSchema);
dnode/mnode/impl/src/mndSma.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndSma.c:    info.expr = taosMemoryMalloc(pSma->exprLen + 1);
dnode/mnode/impl/src/mndSma.c:      taosMemoryFree(info.expr);
dnode/mnode/impl/src/mndSma.c:    pShow->pIter = taosMemoryCalloc(1, sizeof(SSmaAndTagIter));
dnode/mnode/impl/src/mndSma.c:    taosMemoryFree(pShow->pIter);
dnode/mnode/impl/src/mndSma.c:  taosMemoryFree(p);
dnode/mnode/impl/src/mndSma.c:  createStreamRedoAction.pCont = taosMemoryCalloc(1, createStreamRedoAction.contLen);
dnode/mnode/impl/src/mndSma.c:  createStreamUndoAction.pCont = taosMemoryCalloc(1, createStreamUndoAction.contLen);
dnode/mnode/impl/src/mndSma.c:  dropStbUndoAction.pCont = taosMemoryCalloc(1, dropStbUndoAction.contLen);
dnode/mnode/impl/src/mndSma.c:  dropStreamRedoAction.pCont = taosMemoryCalloc(1, dropStreamRedoAction.contLen);
dnode/mnode/impl/src/mndSma.c:  dropStbRedoAction.pCont = taosMemoryCalloc(1, dropStbRedoAction.contLen);
dnode/mnode/impl/src/mndSma.c:    pShow->pIter = taosMemoryCalloc(1, sizeof(SSmaAndTagIter));
dnode/mnode/impl/src/mndSma.c:    taosMemoryFree(pShow->pIter);
dnode/mnode/impl/src/mndSma.c:  taosMemoryFree(p);
dnode/mnode/impl/src/mndSma.c:    STableTSMAInfo *pTsma = taosMemoryCalloc(1, sizeof(STableTSMAInfo));
dnode/mnode/impl/src/mndSma.c:    STableTSMAInfo *pTsma = taosMemoryCalloc(1, sizeof(STableTSMAInfo));
dnode/mnode/impl/src/mndSma.c:  STableTSMAInfo *pInfo = taosMemoryCalloc(1, sizeof(STableTSMAInfo));
dnode/mnode/impl/src/mndSma.c:  pInfo->ast = taosMemoryCalloc(1, 1);
dnode/mnode/impl/src/mndSma.c:    pInfo = taosMemoryCalloc(1, sizeof(STableTSMAInfo));
dnode/mnode/impl/src/mndSma.c:  pRsp = taosMemoryMalloc(rspLen);
dnode/mnode/impl/src/mndDef.c:        SStreamTask *pTask = taosMemoryCalloc(1, sizeof(SStreamTask));
dnode/mnode/impl/src/mndDef.c:          taosMemoryFree(pTask);
dnode/mnode/impl/src/mndDef.c:  taosMemoryFree(pStream->sql);
dnode/mnode/impl/src/mndDef.c:  taosMemoryFree(pStream->ast);
dnode/mnode/impl/src/mndDef.c:  taosMemoryFree(pStream->physicalPlan);
dnode/mnode/impl/src/mndDef.c:    taosMemoryFree(pStream->outputSchema.pSchema);
dnode/mnode/impl/src/mndDef.c:    taosMemoryFree(pStream->tagSchema.pSchema);
dnode/mnode/impl/src/mndDef.c:  SMqVgEp *pVgEpNew = taosMemoryMalloc(sizeof(SMqVgEp));
dnode/mnode/impl/src/mndDef.c:    //    taosMemoryFreeClear(pVgEp->qmsg);
dnode/mnode/impl/src/mndDef.c:    taosMemoryFree(pVgEp);
dnode/mnode/impl/src/mndDef.c:  SMqConsumerObj *pConsumer = taosMemoryCalloc(1, sizeof(SMqConsumerObj));
dnode/mnode/impl/src/mndDef.c:  taosArrayDestroyP(pConsumer->currentTopics, (FDelete)taosMemoryFree);
dnode/mnode/impl/src/mndDef.c:  taosArrayDestroyP(pConsumer->rebNewTopics, (FDelete)taosMemoryFree);
dnode/mnode/impl/src/mndDef.c:  taosArrayDestroyP(pConsumer->rebRemovedTopics, (FDelete)taosMemoryFree);
dnode/mnode/impl/src/mndDef.c:  taosArrayDestroyP(pConsumer->assignedTopics, (FDelete)taosMemoryFree);
dnode/mnode/impl/src/mndDef.c:  taosMemoryFree(pConsumer);
dnode/mnode/impl/src/mndDef.c:  SMqSubscribeObj *pSubObj = taosMemoryCalloc(1, sizeof(SMqSubscribeObj));
dnode/mnode/impl/src/mndDef.c:  SMqSubscribeObj *pSubNew = taosMemoryMalloc(sizeof(SMqSubscribeObj));
dnode/mnode/impl/src/mndDef.c:  taosMemoryFreeClear(pSub->qmsg);
dnode/mnode/impl/src/mndDef.c://   SMqSubActionLogEntry *pEntryNew = taosMemoryMalloc(sizeof(SMqSubActionLogEntry));
dnode/mnode/impl/src/mndDef.c://   SMqSubActionLogObj *pLogNew = taosMemoryMalloc(sizeof(SMqSubActionLogObj));
dnode/mnode/impl/src/mndStream.c:  buf = taosMemoryMalloc(tlen + 1);
dnode/mnode/impl/src/mndStream.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndStream.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndStream.c:  pWrapper->pSchema = taosMemoryCalloc(pWrapper->nCols, sizeof(SSchema));
dnode/mnode/impl/src/mndStream.c:    SSchema *pFullSchema = taosMemoryCalloc(pObj->outputSchema.nCols, sizeof(SSchema));
dnode/mnode/impl/src/mndStream.c:    taosMemoryFree(pObj->outputSchema.pSchema);
dnode/mnode/impl/src/mndStream.c:    pObj->tagSchema.pSchema = taosMemoryCalloc(pCreate->numOfTags, sizeof(SSchema));
dnode/mnode/impl/src/mndStream.c:  void *buf = taosMemoryCalloc(1, tlen);
dnode/mnode/impl/src/mndStream.c:    taosMemoryFree(buf);
dnode/mnode/impl/src/mndStream.c:    sql = taosMemoryMalloc(sqlLen + 1);
dnode/mnode/impl/src/mndStream.c:    taosMemoryFreeClear(sql);
dnode/mnode/impl/src/mndStream.c:  void *buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndStream.c:    taosMemoryFree(buf);
dnode/mnode/impl/src/mndStream.c:    taosMemoryFree(buf);
dnode/mnode/impl/src/mndStream.c:    taosMemoryFree(buf);
dnode/mnode/impl/src/mndSnode.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndSnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndSnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndSnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndSnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndSnode.c:  void   *pReq = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndSnode.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(pOld);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(fqdn);
dnode/mnode/impl/src/mndUser.c:  //   taosMemoryFree(taosArrayGetP(pUserNames, i));
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(*ppList);
dnode/mnode/impl/src/mndUser.c:      val = taosMemoryCalloc(1, sizeof(SIpWhiteList) + sz * sizeof(SIpV4Range));
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(clone);
dnode/mnode/impl/src/mndUser.c:      SIpWhiteList *pNewList = taosMemoryCalloc(1, sizeof(SIpWhiteList) + sizeof(SIpV4Range));
dnode/mnode/impl/src/mndUser.c:        SIpWhiteList *pNewList = taosMemoryCalloc(1, sz);
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(pList);
dnode/mnode/impl/src/mndUser.c:          taosMemoryFree(pList);
dnode/mnode/impl/src/mndUser.c:          SIpWhiteList *pNewList = taosMemoryCalloc(1, sz);
dnode/mnode/impl/src/mndUser.c:          taosMemoryFree(pList);
dnode/mnode/impl/src/mndUser.c:    char *keyDup = taosMemoryCalloc(1, klen + 1);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(keyDup);
dnode/mnode/impl/src/mndUser.c:  pUpdate->pUserIpWhite = taosMemoryCalloc(1, num * sizeof(SUpdateUserIpWhite));
dnode/mnode/impl/src/mndUser.c:      pUser->pIpRanges = taosMemoryCalloc(1, list->num * sizeof(SIpV4Range));
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(list);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(fqdn);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(taosArrayGetP(pUserNames, i));
dnode/mnode/impl/src/mndUser.c:  *buf = taosMemoryCalloc(1, pList->num * 36);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(*buf);
dnode/mnode/impl/src/mndUser.c:  SIpWhiteList *p = taosMemoryCalloc(1, sizeof(SIpWhiteList) + num * sizeof(SIpV4Range));
dnode/mnode/impl/src/mndUser.c:  SIpWhiteList *pWhiteList = taosMemoryCalloc(1, sizeof(SIpWhiteList) + sizeof(SIpV4Range) * 1);
dnode/mnode/impl/src/mndUser.c:  taosMemoryFree(userObj.pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:  taosMemoryFree(userObj.pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:  char   *buf = taosMemoryCalloc(1, tlen);
dnode/mnode/impl/src/mndUser.c:  taosMemoryFree(buf);
dnode/mnode/impl/src/mndUser.c:      char *key = taosMemoryCalloc(keyLen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:      char *value = taosMemoryCalloc(valuelen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(key);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(value);
dnode/mnode/impl/src/mndUser.c:      char *key = taosMemoryCalloc(keyLen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:      char *value = taosMemoryCalloc(valuelen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(key);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(value);
dnode/mnode/impl/src/mndUser.c:        char *key = taosMemoryCalloc(keyLen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        char *value = taosMemoryCalloc(valuelen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(key);
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(value);
dnode/mnode/impl/src/mndUser.c:        char *key = taosMemoryCalloc(keyLen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        char *value = taosMemoryCalloc(valuelen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(key);
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(value);
dnode/mnode/impl/src/mndUser.c:        char *key = taosMemoryCalloc(keyLen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        char *value = taosMemoryCalloc(valuelen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(key);
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(value);
dnode/mnode/impl/src/mndUser.c:        char *key = taosMemoryCalloc(keyLen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        char *value = taosMemoryCalloc(valuelen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(key);
dnode/mnode/impl/src/mndUser.c:        taosMemoryFree(value);
dnode/mnode/impl/src/mndUser.c:      char *key = taosMemoryCalloc(keyLen, sizeof(char));
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(key);
dnode/mnode/impl/src/mndUser.c:    char *buf = taosMemoryMalloc(len);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(buf);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFreeClear(pUser->pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndUser.c:  taosMemoryFreeClear(pUser->pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:  pOld->pIpWhiteList = taosMemoryRealloc(pOld->pIpWhiteList, sz);
dnode/mnode/impl/src/mndUser.c:    SIpWhiteList *p = taosMemoryCalloc(1, sizeof(SIpWhiteList) + numOfRanges * sizeof(SIpV4Range));
dnode/mnode/impl/src/mndUser.c:    taosMemoryFree(userObj.pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:  taosMemoryFree(userObj.pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:  taosMemoryFree(userObj.pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFreeClear(newUser.pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:    SIpWhiteList *pNew = taosMemoryCalloc(1, sizeof(SIpWhiteList) + sizeof(SIpV4Range) * num);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(pNew);
dnode/mnode/impl/src/mndUser.c:    taosMemoryFreeClear(newUser.pIpWhiteList);
dnode/mnode/impl/src/mndUser.c:    SIpWhiteList *pNew = taosMemoryCalloc(1, sizeof(SIpWhiteList) + sizeof(SIpV4Range) * num);
dnode/mnode/impl/src/mndUser.c:      char *varstr = taosMemoryCalloc(1, VARSTR_HEADER_SIZE + tlen);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(varstr);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(buf);
dnode/mnode/impl/src/mndUser.c:      char   *sql = taosMemoryMalloc(bufSz + 1);
dnode/mnode/impl/src/mndUser.c:      char   *obj = taosMemoryMalloc(TSDB_PRIVILEDGE_CONDITION_LEN + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(obj);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(sql);
dnode/mnode/impl/src/mndUser.c:      char *condition = taosMemoryMalloc(TSDB_PRIVILEDGE_CONDITION_LEN + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(condition);
dnode/mnode/impl/src/mndUser.c:      char *condition = taosMemoryMalloc(TSDB_PRIVILEDGE_CONDITION_LEN + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(condition);
dnode/mnode/impl/src/mndUser.c:      char *condition = taosMemoryMalloc(TSDB_PRIVILEDGE_CONDITION_LEN + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(condition);
dnode/mnode/impl/src/mndUser.c:      char *condition = taosMemoryMalloc(TSDB_PRIVILEDGE_CONDITION_LEN + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(condition);
dnode/mnode/impl/src/mndUser.c:      char *condition = taosMemoryMalloc(TSDB_PRIVILEDGE_CONDITION_LEN + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndUser.c:      taosMemoryFree(condition);
dnode/mnode/impl/src/mndUser.c:  void   *pRsp = taosMemoryMalloc(rspLen);
dnode/mnode/impl/src/mndSync.c:  if (pRow) taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndSync.c:  SSyncFSM *pFsm = taosMemoryCalloc(1, sizeof(SSyncFSM));
dnode/mnode/impl/src/mndPrivilege.c:  pWhiteListRsp->pWhiteLists = taosMemoryMalloc(pWhiteListRsp->numWhiteLists * sizeof(SIpV4Range));
dnode/mnode/impl/src/mndPrivilege.c://    pWhiteListRsp->pWhiteLists = taosMemoryMalloc(pWhiteListRsp->numWhiteLists * sizeof(SIpV4Range));
dnode/mnode/impl/src/mndPrivilege.c://   pWhiteListRsp->pWhiteLists = taosMemoryMalloc(pWhiteListRsp->numWhiteLists * sizeof(SIpV4Range));
dnode/mnode/impl/src/mndMain.c:  SMnode *pMnode = taosMemoryCalloc(1, sizeof(SMnode));
dnode/mnode/impl/src/mndMain.c:    taosMemoryFree(pMnode);
dnode/mnode/impl/src/mndMain.c:    taosMemoryFreeClear(pMnode->path);
dnode/mnode/impl/src/mndMain.c:    taosMemoryFreeClear(pMnode);
dnode/mnode/impl/src/mndDnode.c:    taosMemoryFreeClear(machineId);
dnode/mnode/impl/src/mndDnode.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndDnode.c:    taosMemoryFree(pCont);
dnode/mnode/impl/src/mndDnode.c:        char** labels = taosMemoryMalloc(sizeof(char*) * tagSize);
dnode/mnode/impl/src/mndDnode.c:        char** sample_labels = taosMemoryMalloc(sizeof(char*) * tagSize);
dnode/mnode/impl/src/mndDnode.c:          *(labels + j) = taosMemoryMalloc(MONITOR_TAG_NAME_LEN);
dnode/mnode/impl/src/mndDnode.c:          *(sample_labels + j) = taosMemoryMalloc(MONITOR_TAG_VALUE_LEN);
dnode/mnode/impl/src/mndDnode.c:          char* metricName = taosMemoryMalloc(metricNameLen);
dnode/mnode/impl/src/mndDnode.c:          taosMemoryFreeClear(metricName);
dnode/mnode/impl/src/mndDnode.c:          taosMemoryFreeClear(*(labels + j));
dnode/mnode/impl/src/mndDnode.c:          taosMemoryFreeClear(*(sample_labels + j));
dnode/mnode/impl/src/mndDnode.c:        taosMemoryFreeClear(sample_labels);
dnode/mnode/impl/src/mndDnode.c:        taosMemoryFreeClear(labels);
dnode/mnode/impl/src/mndDnode.c:    char *b = taosMemoryCalloc(VARSTR_HEADER_SIZE + strlen(offlineReason[pDnode->offlineReason]) + 1, 1);
dnode/mnode/impl/src/mndDnode.c:    taosMemoryFreeClear(b);
dnode/mnode/impl/src/mndStreamUtil.c:  SStreamTaskIter* pIter = taosMemoryCalloc(1, sizeof(SStreamTaskIter));
dnode/mnode/impl/src/mndStreamUtil.c:  taosMemoryFree(pIter);
dnode/mnode/impl/src/mndStreamUtil.c:  SVResumeStreamTaskReq *pReq = taosMemoryCalloc(1, sizeof(SVResumeStreamTaskReq));
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:  SVPauseStreamTaskReq *pReq = taosMemoryCalloc(1, sizeof(SVPauseStreamTaskReq));
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:  SVDropStreamTaskReq *pReq = taosMemoryCalloc(1, sizeof(SVDropStreamTaskReq));
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:  SVDropStreamTaskReq *pReq = taosMemoryCalloc(1, sizeof(SVDropStreamTaskReq));
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:  void *buf = taosMemoryMalloc(tlen);
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pBuf);
dnode/mnode/impl/src/mndStreamUtil.c:  SVResetStreamTaskReq *pReq = taosMemoryCalloc(1, sizeof(SVResetStreamTaskReq));
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStreamUtil.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndProfile.c:    SQueryHbRspBasic *rspBasic = taosMemoryCalloc(1, sizeof(SQueryHbRspBasic));
dnode/mnode/impl/src/mndProfile.c:        taosMemoryFree(pRsp);
dnode/mnode/impl/src/mndStb.c:  pStb->pColumns = taosMemoryCalloc(pStb->numOfColumns, sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pStb->pTags = taosMemoryCalloc(pStb->numOfTags, sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:    pStb->comment = taosMemoryCalloc(pStb->commentLen + 1, 1);
dnode/mnode/impl/src/mndStb.c:    pStb->pAst1 = taosMemoryCalloc(pStb->ast1Len, 1);
dnode/mnode/impl/src/mndStb.c:    pStb->pAst2 = taosMemoryCalloc(pStb->ast2Len, 1);
dnode/mnode/impl/src/mndStb.c:  pStb->pCmpr = taosMemoryCalloc(pStb->numOfColumns, sizeof(SColCmpr));
dnode/mnode/impl/src/mndStb.c:      taosMemoryFreeClear(pStb->pColumns);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFreeClear(pStb->pTags);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFreeClear(pStb->comment);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pStb->pCmpr);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(pStb->pColumns);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(pStb->pTags);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(pStb->comment);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(pStb->pAst1);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(pStb->pAst2);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(pStb->pCmpr);
dnode/mnode/impl/src/mndStb.c:    void *pColumns = taosMemoryMalloc(pNew->numOfColumns * sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pOld->pColumns);
dnode/mnode/impl/src/mndStb.c:    void *pTags = taosMemoryMalloc(pNew->numOfTags * sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pOld->pTags);
dnode/mnode/impl/src/mndStb.c:    void *comment = taosMemoryMalloc(pNew->commentLen + 1);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pOld->comment);
dnode/mnode/impl/src/mndStb.c:    void *pAst1 = taosMemoryMalloc(pNew->ast1Len + 1);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pOld->pAst1);
dnode/mnode/impl/src/mndStb.c:    void *pAst2 = taosMemoryMalloc(pNew->ast2Len + 1);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pOld->pAst2);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFree(pOld->pCmpr);
dnode/mnode/impl/src/mndStb.c:    pOld->pCmpr = taosMemoryCalloc(pNew->numOfColumns, sizeof(SColCmpr));
dnode/mnode/impl/src/mndStb.c:  req.colCmpr.pColCmpr = taosMemoryCalloc(pCmpr->nCols, sizeof(SColCmpr));
dnode/mnode/impl/src/mndStb.c:  SMsgHead *pHead = taosMemoryCalloc(1, contLen);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFreeClear(pHead);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(req.rsmaParam.qmsg[0]);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(req.rsmaParam.qmsg[1]);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(req.colCmpr.pColCmpr);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(req.rsmaParam.qmsg[0]);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(req.rsmaParam.qmsg[1]);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(req.colCmpr.pColCmpr);
dnode/mnode/impl/src/mndStb.c:  pHead = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStb.c:    pDst->comment = taosMemoryCalloc(pDst->commentLen + 1, 1);
dnode/mnode/impl/src/mndStb.c:    pDst->pAst1 = taosMemoryCalloc(pDst->ast1Len, 1);
dnode/mnode/impl/src/mndStb.c:    pDst->pAst2 = taosMemoryCalloc(pDst->ast2Len, 1);
dnode/mnode/impl/src/mndStb.c:  pDst->pColumns = taosMemoryCalloc(1, pDst->numOfColumns * sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pDst->pTags = taosMemoryCalloc(1, pDst->numOfTags * sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pDst->pCmpr = taosMemoryCalloc(1, pDst->numOfColumns * sizeof(SCmprObj));
dnode/mnode/impl/src/mndStb.c:  pDst->pColumns = taosMemoryCalloc(1, pDst->numOfColumns * sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pDst->pTags = taosMemoryCalloc(1, pDst->numOfTags * sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pDst->pCmpr = taosMemoryCalloc(1, pDst->numOfColumns * sizeof(SColCmpr));
dnode/mnode/impl/src/mndStb.c:      taosMemoryFreeClear(pDst.pTags);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFreeClear(pDst.pColumns);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFreeClear(pDst.pCmpr);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFreeClear(pDst.pTags);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFreeClear(pDst.pColumns);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFreeClear(pDst.pCmpr);
dnode/mnode/impl/src/mndStb.c:  pNew->pTags = taosMemoryCalloc(pNew->numOfTags, sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pNew->pColumns = taosMemoryCalloc(pNew->numOfColumns, sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pNew->pCmpr = taosMemoryCalloc(pNew->numOfColumns, sizeof(SColCmpr));
dnode/mnode/impl/src/mndStb.c:    pNew->comment = taosMemoryCalloc(1, commentLen + 1);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStb.c:  pRsp->pSchemas = taosMemoryCalloc(totalCols, sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pRsp->pSchemaExt = taosMemoryCalloc(pStb->numOfColumns, sizeof(SSchemaExt));
dnode/mnode/impl/src/mndStb.c:  pRsp->pSchemas = taosMemoryCalloc(totalCols, sizeof(SSchema));
dnode/mnode/impl/src/mndStb.c:  pRsp->pSchemaExt = taosMemoryCalloc(pStb->numOfColumns, sizeof(SSchemaExt));
dnode/mnode/impl/src/mndStb.c:  alterRsp.pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
dnode/mnode/impl/src/mndStb.c:  void *cont = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndStb.c:  stbRsp.pMeta = taosMemoryCalloc(1, sizeof(STableMetaRsp));
dnode/mnode/impl/src/mndStb.c:  void *cont = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(stbObj.pTags);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(stbObj.pColumns);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFreeClear(stbObj.pCmpr);
dnode/mnode/impl/src/mndStb.c:    taosMemoryFreeClear(stbObj.comment);
dnode/mnode/impl/src/mndStb.c:      taosMemoryFree(pReq);
dnode/mnode/impl/src/mndStb.c:  void *pRsp = taosMemoryMalloc(rspLen);
dnode/mnode/impl/src/mndStb.c:    taosArrayDestroyP(p->pResTbNames, taosMemoryFree);
dnode/mnode/impl/src/mndStb.c:  taosMemoryFree(p);
dnode/mnode/impl/src/mndStb.c:  SMndDropTbsWithTsmaCtx *pCtx = taosMemoryCalloc(1, sizeof(SMndDropTbsWithTsmaCtx));
dnode/mnode/impl/src/mndStb.c:  pHead = taosMemoryMalloc(contLen);
dnode/mnode/impl/src/mndPerfSchema.c:  SSchema *schema = taosMemoryCalloc(colNum, sizeof(SSchema));
dnode/mnode/impl/src/mndPerfSchema.c:  pRsp->pSchemas = taosMemoryCalloc(meta->numOfColumns, sizeof(SSchema));
dnode/mnode/impl/src/mndPerfSchema.c:  pRsp->pSchemas = taosMemoryCalloc(pMeta->numOfColumns, sizeof(SSchema));
dnode/mnode/impl/src/mndPerfSchema.c:    taosMemoryFreeClear(meta->pSchemas);
dnode/mnode/impl/src/mndTopic.c:    swBuf = taosMemoryMalloc(schemaLen);
dnode/mnode/impl/src/mndTopic.c:  if (swBuf) taosMemoryFree(swBuf);
dnode/mnode/impl/src/mndTopic.c:  pTopic->sql = taosMemoryCalloc(pTopic->sqlLen, sizeof(char));
dnode/mnode/impl/src/mndTopic.c:    pTopic->ast = taosMemoryCalloc(pTopic->astLen, sizeof(char));
dnode/mnode/impl/src/mndTopic.c:    pTopic->physicalPlan = taosMemoryCalloc(len, sizeof(char));
dnode/mnode/impl/src/mndTopic.c:    buf = taosMemoryMalloc(len);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFreeClear(buf);
dnode/mnode/impl/src/mndTopic.c:    taosMemoryFreeClear(pRow);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFreeClear(pTopic->sql);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFreeClear(pTopic->ast);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFreeClear(pTopic->physicalPlan);
dnode/mnode/impl/src/mndTopic.c:  if (pTopic->schema.nCols) taosMemoryFreeClear(pTopic->schema.pSchema);
dnode/mnode/impl/src/mndTopic.c:    buf = taosMemoryCalloc(1, sizeof(SMsgHead) + len);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFree(buf);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFreeClear(topicObj.physicalPlan);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFreeClear(topicObj.sql);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFreeClear(topicObj.ast);
dnode/mnode/impl/src/mndTopic.c:    taosMemoryFreeClear(topicObj.schema.pSchema);
dnode/mnode/impl/src/mndTopic.c:    buf = taosMemoryCalloc(1, sizeof(SMsgHead) + TSDB_TOPIC_FNAME_LEN);
dnode/mnode/impl/src/mndTopic.c:      taosMemoryFree(buf);
dnode/mnode/impl/src/mndTopic.c:  taosMemoryFree(string);
dnode/mnode/impl/src/mndTopic.c:    char *sql = taosMemoryMalloc(strlen(pTopic->sql) + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndTopic.c:    taosMemoryFree(sql);
dnode/mnode/impl/src/mndTopic.c:    char *schemaJson = taosMemoryMalloc(TSDB_SHOW_SCHEMA_JSON_LEN + VARSTR_HEADER_SIZE);
dnode/mnode/impl/src/mndTopic.c:    taosMemoryFree(schemaJson);
dnode/vnode/test/tsdbSmaTest.cpp:  sut.pBSmaCols = (col_id_t *)taosMemoryMalloc(sut.nBSmaCols * sizeof(col_id_t));
dnode/vnode/test/tsdbSmaTest.cpp:  void   *buf = taosMemoryMalloc(1024);
dnode/vnode/test/tsdbSmaTest.cpp:    dut.pBSmaCols = (col_id_t *)taosMemoryMalloc(dut.nBSmaCols * sizeof(col_id_t));
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(buf);
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(dut.pBSmaCols);
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(sut.pBSmaCols);
dnode/vnode/test/tsdbSmaTest.cpp:  void *buf = taosMemoryCalloc(1, bufLen);
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(pSW);
dnode/vnode/test/tsdbSmaTest.cpp:  tSma.expr = (char *)taosMemoryCalloc(1, tSma.exprLen + 1);
dnode/vnode/test/tsdbSmaTest.cpp:  tSma.tagsFilter = (char *)taosMemoryCalloc(tSma.tagsFilterLen + 1, 1);
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(qSmaCfg);
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(qSmaCfg);
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(pSW);
dnode/vnode/test/tsdbSmaTest.cpp:  tSma.expr = (char *)taosMemoryCalloc(1, tSma.exprLen + 1);
dnode/vnode/test/tsdbSmaTest.cpp:  tSma.tagsFilter = (char *)taosMemoryCalloc(1, tSma.tagsFilterLen + 1);
dnode/vnode/test/tsdbSmaTest.cpp:  STsdb    *pTsdb = (STsdb *)taosMemoryCalloc(1, sizeof(STsdb));
dnode/vnode/test/tsdbSmaTest.cpp:  SSubmitReq *pMsg = (SSubmitReq *)taosMemoryCalloc(1, msgLen);
dnode/vnode/test/tsdbSmaTest.cpp:    SSDataBlock *pDataBlock = (SSDataBlock *)taosMemoryCalloc(1, sizeof(SSDataBlock));
dnode/vnode/test/tsdbSmaTest.cpp:      SColumnInfoData *pColInfoData = (SColumnInfoData *)taosMemoryCalloc(1, sizeof(SColumnInfoData));
dnode/vnode/test/tsdbSmaTest.cpp:      pColInfoData->pData = (char *)taosMemoryCalloc(1, tSmaNumOfRows * pColInfoData->info.bytes);
dnode/vnode/test/tsdbSmaTest.cpp:  taosMemoryFreeClear(pMsg);
dnode/vnode/test/tsdbSmaTest.cpp:      taosMemoryFreeClear(pColInfoData);
dnode/vnode/test/tsdbSmaTest.cpp:    taosMemoryFreeClear(pDataBlock->pBlockAgg);
dnode/vnode/test/tsdbSmaTest.cpp:    taosMemoryFreeClear(pDataBlock);
dnode/vnode/src/sma/smaTimeRange.c:  pReq = taosMemoryCalloc(1, sizeof(SSubmitReq2));
dnode/vnode/src/sma/smaTimeRange.c:    taosMemoryFree(pReq);
dnode/vnode/src/sma/smaEnv.c:  pEnv = (SSmaEnv *)taosMemoryCalloc(1, sizeof(SSmaEnv));
dnode/vnode/src/sma/smaEnv.c:    taosMemoryFreeClear(pSmaEnv);
dnode/vnode/src/sma/smaEnv.c:    *pSmaStat = (SSmaStat *)taosMemoryCalloc(1, sizeof(SSmaStat) + sizeof(TdThread) * tsNumOfVnodeRsmaThreads);
dnode/vnode/src/sma/smaEnv.c:    taosMemoryFreeClear(pStat->pTSma);
dnode/vnode/src/sma/smaEnv.c:    taosMemoryFreeClear(pStat->pTSchema);
dnode/vnode/src/sma/smaEnv.c:    taosMemoryFreeClear(pStat);
dnode/vnode/src/sma/smaEnv.c:    taosMemoryFreeClear(pSmaStat);
dnode/vnode/src/sma/smaRollup.c:    taosMemoryFreeClear(pInfo->pTSchema);
dnode/vnode/src/sma/smaRollup.c:    taosMemoryFree(pInfo);
dnode/vnode/src/sma/smaRollup.c:  *pStore = taosMemoryCalloc(1, sizeof(STbUidStore));
dnode/vnode/src/sma/smaRollup.c:        taosMemoryFree(s);
dnode/vnode/src/sma/smaRollup.c:      taosMemoryFree(s);
dnode/vnode/src/sma/smaRollup.c:    SStreamTask *pStreamTask = taosMemoryCalloc(1, sizeof(*pStreamTask));
dnode/vnode/src/sma/smaRollup.c:    pStreamTask->exec.qmsg = taosMemoryMalloc(strlen(RSMA_EXEC_TASK_FLAG) + 1);
dnode/vnode/src/sma/smaRollup.c:  pRSmaInfo = (SRSmaInfo *)taosMemoryCalloc(1, sizeof(SRSmaInfo));
dnode/vnode/src/sma/smaRollup.c:    taosMemoryFree(pStore);
dnode/vnode/src/sma/smaRollup.c:        taosMemoryFree(pReq);
dnode/vnode/src/sma/smaRollup.c:        taosMemoryFree(pReq);
dnode/vnode/src/sma/smaOpen.c:  SSma *pSma = taosMemoryCalloc(1, sizeof(SSma));
dnode/vnode/src/sma/smaOpen.c:    taosMemoryFreeClear(pSma);
dnode/vnode/src/sma/smaSnapshot.c:  pReader = (SRSmaSnapReader*)taosMemoryCalloc(1, sizeof(*pReader));
dnode/vnode/src/sma/smaSnapshot.c:  taosMemoryFreeClear(*ppReader);
dnode/vnode/src/sma/smaSnapshot.c:  pWriter = (SRSmaSnapWriter*)taosMemoryCalloc(1, sizeof(*pWriter));
dnode/vnode/src/sma/smaSnapshot.c:  if (pWriter) taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqRead.c:      void* buf = taosMemoryMalloc(tlen);
dnode/vnode/src/tq/tqRead.c:          taosMemoryFreeClear(pCreateReq->comment);
dnode/vnode/src/tq/tqRead.c:      taosMemoryFree(buf);
dnode/vnode/src/tq/tqRead.c:      void* buf = taosMemoryMalloc(tlen);
dnode/vnode/src/tq/tqRead.c:      taosMemoryFree(buf);
dnode/vnode/src/tq/tqRead.c:  STqReader* pReader = taosMemoryCalloc(1, sizeof(STqReader));
dnode/vnode/src/tq/tqRead.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqRead.c:  taosMemoryFree(pReader);
dnode/vnode/src/tq/tqRead.c:      void* data = taosMemoryMalloc(len);
dnode/vnode/src/tq/tqRead.c:  pDst->pSchema = taosMemoryCalloc(cnt, sizeof(SSchema));
dnode/vnode/src/tq/tqRead.c:    taosMemoryFreeClear(pTSchema);
dnode/vnode/src/tq/tqRead.c:  char*   assigned = taosMemoryCalloc(1, pSchemaWrapper->nCols);
dnode/vnode/src/tq/tqRead.c:        SSchemaWrapper* pSW = taosMemoryCalloc(1, sizeof(SSchemaWrapper));
dnode/vnode/src/tq/tqRead.c:        SSchemaWrapper* pSW = taosMemoryCalloc(1, sizeof(SSchemaWrapper));
dnode/vnode/src/tq/tqRead.c:    taosMemoryFreeClear(pTSchema);
dnode/vnode/src/tq/tqRead.c:  taosMemoryFree(assigned);
dnode/vnode/src/tq/tqRead.c:  taosMemoryFree(assigned);
dnode/vnode/src/tq/tqUtil.c:        void*   tBuf = taosMemoryCalloc(1, tLen);
dnode/vnode/src/tq/tqUtil.c:      taosMemoryFree(pDelBlock);
dnode/vnode/src/tq/tqPush.c:    pHandle->msg = taosMemoryCalloc(1, sizeof(SRpcMsg));
dnode/vnode/src/tq/tqPush.c:    taosMemoryFree(pHandle->msg);
dnode/vnode/src/tq/tqStreamTaskSnap.c:  pReader = (SStreamTaskReader*)taosMemoryCalloc(1, sizeof(SStreamTaskReader));
dnode/vnode/src/tq/tqStreamTaskSnap.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqStreamTaskSnap.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqStreamTaskSnap.c:  taosMemoryFree(pReader);
dnode/vnode/src/tq/tqStreamTaskSnap.c:      pVal = taosMemoryCalloc(1, tLen);
dnode/vnode/src/tq/tqStreamTaskSnap.c:  *ppData = taosMemoryMalloc(sizeof(SSnapDataHdr) + vLen);
dnode/vnode/src/tq/tqStreamTaskSnap.c:  taosMemoryFree(pVal);
dnode/vnode/src/tq/tqStreamTaskSnap.c:  pWriter = (SStreamTaskWriter*)taosMemoryCalloc(1, sizeof(*pWriter));
dnode/vnode/src/tq/tqStreamTaskSnap.c:    taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqStreamTaskSnap.c:  taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqOffset.c:  char*   fname = taosMemoryCalloc(1, len + 40);
dnode/vnode/src/tq/tqOffset.c:    void*   pMemBuf = taosMemoryCalloc(1, size);
dnode/vnode/src/tq/tqOffset.c:      taosMemoryFree(pMemBuf);
dnode/vnode/src/tq/tqOffset.c:      taosMemoryFree(pMemBuf);
dnode/vnode/src/tq/tqOffset.c:    taosMemoryFree(pMemBuf);
dnode/vnode/src/tq/tqOffset.c:  STqOffsetStore* pStore = taosMemoryCalloc(1, sizeof(STqOffsetStore));
dnode/vnode/src/tq/tqOffset.c:    taosMemoryFree(pStore);
dnode/vnode/src/tq/tqOffset.c:    taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffset.c:    taosMemoryFree(pStore);
dnode/vnode/src/tq/tqOffset.c:  taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffset.c:  taosMemoryFree(pStore);
dnode/vnode/src/tq/tqOffset.c:    taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffset.c:  taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffset.c:    void*   buf = taosMemoryCalloc(1, totLen);
dnode/vnode/src/tq/tqOffset.c:      taosMemoryFree(buf);
dnode/vnode/src/tq/tqOffset.c:    taosMemoryFree(buf);
dnode/vnode/src/tq/tqStreamTask.c:  taosMemoryFree(pParam);
dnode/vnode/src/tq/tqStreamTask.c:  SBuildScanWalMsgParam* pParam = taosMemoryMalloc(sizeof(SBuildScanWalMsgParam));
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:  pReader = (STqCheckInfoReader*)taosMemoryCalloc(1, sizeof(STqCheckInfoReader));
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:  taosMemoryFree(*ppReader);
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:  *ppData = taosMemoryMalloc(sizeof(SSnapDataHdr) + vLen);
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:  pWriter = (STqCheckInfoWriter*)taosMemoryCalloc(1, sizeof(*pWriter));
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:    taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqCheckInfoSnapshot.c:  taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqHandleSnapshot.c:  pReader = (STqSnapReader*)taosMemoryCalloc(1, sizeof(STqSnapReader));
dnode/vnode/src/tq/tqHandleSnapshot.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqHandleSnapshot.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqHandleSnapshot.c:  taosMemoryFree(*ppReader);
dnode/vnode/src/tq/tqHandleSnapshot.c:  *ppData = taosMemoryMalloc(sizeof(SSnapDataHdr) + vLen);
dnode/vnode/src/tq/tqHandleSnapshot.c:  pWriter = (STqSnapWriter*)taosMemoryCalloc(1, sizeof(*pWriter));
dnode/vnode/src/tq/tqHandleSnapshot.c:    taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqHandleSnapshot.c:  taosMemoryFree(pWriter);
dnode/vnode/src/tq/tq.c:    taosMemoryFreeClear(pData->execHandle.execCol.qmsg);
dnode/vnode/src/tq/tq.c:    taosMemoryFreeClear(pData->execHandle.execTb.qmsg);
dnode/vnode/src/tq/tq.c:    taosMemoryFree(pData->msg);
dnode/vnode/src/tq/tq.c:  STQ* pTq = taosMemoryCalloc(1, sizeof(STQ));
dnode/vnode/src/tq/tq.c:      taosMemoryFree(pHandle->msg);
dnode/vnode/src/tq/tq.c:  taosMemoryFree(pTq->path);
dnode/vnode/src/tq/tq.c:  taosMemoryFree(pTq);
dnode/vnode/src/tq/tq.c:        taosMemoryFree(pHandle->msg);
dnode/vnode/src/tq/tq.c:static void freePtr(void* ptr) { taosMemoryFree(*(void**)ptr); }
dnode/vnode/src/tq/tq.c:  char*               pRspBuf = taosMemoryCalloc(1, sizeof(SMsgHead) + sizeof(SStreamProgressRsp));
dnode/vnode/src/tq/tq.c:    taosMemoryFree(pRspBuf);
dnode/vnode/src/tq/tqMeta.c:  buf = taosMemoryCalloc(1, vlen);
dnode/vnode/src/tq/tqMeta.c:  taosMemoryFree(buf);
dnode/vnode/src/tq/tqMeta.c:  char*   maindb = taosMemoryCalloc(1, len);
dnode/vnode/src/tq/tqMeta.c:    taosMemoryFree(maindb);
dnode/vnode/src/tq/tqMeta.c:    char* tpath = taosMemoryCalloc(1, len);
dnode/vnode/src/tq/tqMeta.c:    taosMemoryFree(pTq->path);
dnode/vnode/src/tq/tqMeta.c:  char*   tpath = taosMemoryCalloc(1, len);
dnode/vnode/src/tq/tqMeta.c:  taosMemoryFree(pTq->path);
dnode/vnode/src/tq/tqMeta.c:  taosMemoryFree(maindb);
dnode/vnode/src/tq/tqMeta.c:  taosMemoryFree(offset);
dnode/vnode/src/tq/tqMeta.c:  taosMemoryFree(offsetNew);
dnode/vnode/src/tq/tqStreamStateSnap.c:  pReader = (SStreamStateReader*)taosMemoryCalloc(1, sizeof(SStreamStateReader));
dnode/vnode/src/tq/tqStreamStateSnap.c:    taosMemoryFree(pReader);
dnode/vnode/src/tq/tqStreamStateSnap.c:  taosMemoryFree(pReader);
dnode/vnode/src/tq/tqStreamStateSnap.c:  *ppData = taosMemoryMalloc(sizeof(SSnapDataHdr) + len);
dnode/vnode/src/tq/tqStreamStateSnap.c:  taosMemoryFree(rowData);
dnode/vnode/src/tq/tqStreamStateSnap.c:  pWriter = (SStreamStateWriter*)taosMemoryCalloc(1, sizeof(*pWriter));
dnode/vnode/src/tq/tqStreamStateSnap.c:  taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqStreamStateSnap.c:  taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqSink.c:      name = taosMemoryCalloc(1, TSDB_TABLE_NAME_LEN);
dnode/vnode/src/tq/tqSink.c:      originName = taosMemoryCalloc(1, TSDB_TABLE_NAME_LEN + VARSTR_HEADER_SIZE);
dnode/vnode/src/tq/tqSink.c:    taosMemoryFreeClear(name);
dnode/vnode/src/tq/tqSink.c:      pCreateTableReq->name = taosMemoryCalloc(1, TSDB_TABLE_NAME_LEN);
dnode/vnode/src/tq/tqSink.c:  taosMemoryFree(pNew->pCreateTbReq);
dnode/vnode/src/tq/tqSink.c:  SVCreateTbReq* pCreateTbReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
dnode/vnode/src/tq/tqSink.c:    taosMemoryFreeClear(pCreateTbReq);
dnode/vnode/src/tq/tqSink.c:    pTableSinkInfo = taosMemoryCalloc(1, sizeof(STableSinkInfo) + nameLen + 1);
dnode/vnode/src/tq/tqSink.c:        taosMemoryFree(pTableSinkInfo);
dnode/vnode/src/tq/tqSink.c:        taosMemoryFree(pTableSinkInfo);
dnode/vnode/src/tq/tqSink.c:    taosMemoryFreeClear(pTableSinkInfo);  // too many items, failed to cache it
dnode/vnode/src/tq/tqSink.c:    taosMemoryFreeClear(pTableSinkInfo);
dnode/vnode/src/tq/tqOffsetSnapshot.c:  pReader = taosMemoryCalloc(1, sizeof(STqOffsetReader));
dnode/vnode/src/tq/tqOffsetSnapshot.c:  taosMemoryFree(*ppReader);
dnode/vnode/src/tq/tqOffsetSnapshot.c:    taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:    taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:  taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:  SSnapDataHdr* buf = taosMemoryCalloc(1, sz + sizeof(SSnapDataHdr));
dnode/vnode/src/tq/tqOffsetSnapshot.c:    taosMemoryFree(buf);
dnode/vnode/src/tq/tqOffsetSnapshot.c:  pWriter = (STqOffsetWriter*)taosMemoryCalloc(1, sizeof(STqOffsetWriter));
dnode/vnode/src/tq/tqOffsetSnapshot.c:      taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:      taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:      taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:  taosMemoryFree(fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:  taosMemoryFree(pWriter->fname);
dnode/vnode/src/tq/tqOffsetSnapshot.c:  taosMemoryFree(pWriter);
dnode/vnode/src/tq/tqScan.c:  void*   buf = taosMemoryCalloc(1, dataStrLen);
dnode/vnode/src/tq/tqScan.c:        void*    createReq = taosMemoryCalloc(1, len);
dnode/vnode/src/tq/tqScan.c:          taosMemoryFree(createReq);
dnode/vnode/src/tq/tqScan.c:        void*    createReq = taosMemoryCalloc(1, len);
dnode/vnode/src/tq/tqScan.c:          taosMemoryFree(createReq);
dnode/vnode/src/meta/metaTtl.c:  taosMemoryFree(pTtlMgr->logPrefix);
dnode/vnode/src/meta/metaTtl.c:  taosMemoryFree(pTtlMgr);
dnode/vnode/src/meta/metaSnapshot.c:  pReader = (SMetaSnapReader*)taosMemoryCalloc(1, sizeof(*pReader));
dnode/vnode/src/meta/metaSnapshot.c:    taosMemoryFree(pReader);
dnode/vnode/src/meta/metaSnapshot.c:    taosMemoryFree(pReader);
dnode/vnode/src/meta/metaSnapshot.c:  taosMemoryFree(*ppReader);
dnode/vnode/src/meta/metaSnapshot.c:    *ppData = taosMemoryMalloc(sizeof(SSnapDataHdr) + nData);
dnode/vnode/src/meta/metaSnapshot.c:  pWriter = (SMetaSnapWriter*)taosMemoryCalloc(1, sizeof(*pWriter));
dnode/vnode/src/meta/metaSnapshot.c:  taosMemoryFree(pWriter);
dnode/vnode/src/meta/metaSnapshot.c:  taosMemoryFree(pData->tableName);
dnode/vnode/src/meta/metaSnapshot.c:  SSnapContext* ctx = taosMemoryCalloc(1, sizeof(SSnapContext));
dnode/vnode/src/meta/metaSnapshot.c:  taosMemoryFree(ctx);
dnode/vnode/src/meta/metaSnapshot.c:  *pBuf = taosMemoryMalloc(*contLen);
dnode/vnode/src/meta/metaSnapshot.c:    taosMemoryFreeClear(*pBuf);
dnode/vnode/src/meta/metaSnapshot.c:  *pBuf = taosMemoryMalloc(*contLen);
dnode/vnode/src/meta/metaSnapshot.c:    taosMemoryFreeClear(*pBuf);
dnode/vnode/src/meta/metaSma.c:  pVal = taosMemoryMalloc(vLen);
dnode/vnode/src/meta/metaSma.c:  taosMemoryFree(pVal);
dnode/vnode/src/meta/metaSma.c:  taosMemoryFree(pVal);
dnode/vnode/src/meta/metaQuery.c:  // taosMemoryFreeClear(pReader->me.colCmpr.pColCmpr);
dnode/vnode/src/meta/metaQuery.c:  pTbCur = (SMTbCursor *)taosMemoryCalloc(1, sizeof(*pTbCur));
dnode/vnode/src/meta/metaQuery.c:    taosMemoryFree(pTbCur);
dnode/vnode/src/meta/metaQuery.c:  pCtbCur = (SMCtbCursor *)taosMemoryCalloc(1, sizeof(*pCtbCur));
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pCtbCur);
dnode/vnode/src/meta/metaQuery.c:  pStbCur = (SMStbCursor *)taosMemoryCalloc(1, sizeof(*pStbCur));
dnode/vnode/src/meta/metaQuery.c:    taosMemoryFree(pStbCur);
dnode/vnode/src/meta/metaQuery.c:    taosMemoryFree(pStbCur);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pSW->pSchema);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pSW);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pSchemaWrapper->pSchema);
dnode/vnode/src/meta/metaQuery.c:  pSmaCur = (SMSmaCursor *)taosMemoryCalloc(1, sizeof(*pSmaCur));
dnode/vnode/src/meta/metaQuery.c:    taosMemoryFree(pSmaCur);
dnode/vnode/src/meta/metaQuery.c:    taosMemoryFree(pSmaCur);
dnode/vnode/src/meta/metaQuery.c:  pSW = taosMemoryCalloc(1, sizeof(*pSW));
dnode/vnode/src/meta/metaQuery.c:  pSW->tSma = taosMemoryCalloc(pSW->number, sizeof(STSma));
dnode/vnode/src/meta/metaQuery.c:        if (!(pTSma->expr = taosMemoryCalloc(1, pTSma->exprLen))) {
dnode/vnode/src/meta/metaQuery.c:        if (!(pTSma->tagsFilter = taosMemoryCalloc(1, pTSma->tagsFilterLen))) {
dnode/vnode/src/meta/metaQuery.c:  pTSma = (STSma *)taosMemoryMalloc(sizeof(STSma));
dnode/vnode/src/meta/metaQuery.c:    char *buf = taosMemoryCalloc(val->nData + 1, 1);
dnode/vnode/src/meta/metaQuery.c:    taosMemoryFree(buf);
dnode/vnode/src/meta/metaQuery.c:      char *buf = taosMemoryCalloc(pTagVal->nData + 1, 1);
dnode/vnode/src/meta/metaQuery.c:      taosMemoryFree(buf);
dnode/vnode/src/meta/metaQuery.c:  pCursor = (SIdxCursor *)taosMemoryCalloc(1, sizeof(SIdxCursor));
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pCursor);
dnode/vnode/src/meta/metaQuery.c:  pCursor = (SIdxCursor *)taosMemoryCalloc(1, sizeof(SIdxCursor));
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(buf);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pKey);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pCursor);
dnode/vnode/src/meta/metaQuery.c:  pCursor = (SIdxCursor *)taosMemoryCalloc(1, sizeof(SIdxCursor));
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(buf);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pKey);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pCursor);
dnode/vnode/src/meta/metaQuery.c:  pCursor = (SIdxCursor *)taosMemoryCalloc(1, sizeof(SIdxCursor));
dnode/vnode/src/meta/metaQuery.c:        buf = taosMemoryCalloc(1, maxSize);
dnode/vnode/src/meta/metaQuery.c:  if (oStbEntry.pBuf) taosMemoryFree(oStbEntry.pBuf);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(buf);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pKey);
dnode/vnode/src/meta/metaQuery.c:  taosMemoryFree(pCursor);
dnode/vnode/src/meta/metaQuery.c:      p->pTagVal = taosMemoryMalloc(len);
dnode/vnode/src/meta/metaQuery.c:      info.pTagVal = taosMemoryMalloc(pCur->vLen);
dnode/vnode/src/meta/metaQuery.c:        pTagInfo->pTagVal = taosMemoryMalloc(pCur->vLen);
dnode/vnode/src/meta/metaOpen.c:  if ((pMeta = taosMemoryCalloc(1, sizeof(*pMeta) + strlen(path) + 1)) == NULL) {
dnode/vnode/src/meta/metaOpen.c:    taosMemoryFreeClear(*ppMeta);
dnode/vnode/src/meta/metaTable.c:    SColCmpr *p = taosMemoryCalloc(1, sizeof(SColCmpr) * (nCols + 1));
dnode/vnode/src/meta/metaTable.c:  pMetaRsp->pSchemas = taosMemoryMalloc(pSchema->nCols * sizeof(SSchema));
dnode/vnode/src/meta/metaTable.c:  pMetaRsp->pSchemaExt = taosMemoryMalloc(pSchema->nCols * sizeof(SSchemaExt));
dnode/vnode/src/meta/metaTable.c:        char   *val = taosMemoryCalloc(1, pTagVal->nData + VARSTR_HEADER_SIZE);
dnode/vnode/src/meta/metaTable.c:        taosMemoryFree(val);
dnode/vnode/src/meta/metaTable.c:        char   *val = taosMemoryCalloc(1, pTagVal->nData + VARSTR_HEADER_SIZE);
dnode/vnode/src/meta/metaTable.c:        taosMemoryFree(val);
dnode/vnode/src/meta/metaTable.c:  oStbEntry.pBuf = taosMemoryMalloc(nData);
dnode/vnode/src/meta/metaTable.c:  if (oStbEntry.pBuf) taosMemoryFree(oStbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:  if (oStbEntry.pBuf) taosMemoryFree(oStbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:  if (oStbEntry.pBuf) taosMemoryFree(oStbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:  if (oStbEntry.pBuf) taosMemoryFree(oStbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:  if (oStbEntry.pBuf) taosMemoryFree(oStbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:        char *buf = taosMemoryCalloc(pTagVal->nData + 1, 1);
dnode/vnode/src/meta/metaTable.c:        taosMemoryFree(buf);
dnode/vnode/src/meta/metaTable.c:    *pMetaRsp = taosMemoryCalloc(1, sizeof(STableMetaRsp));
dnode/vnode/src/meta/metaTable.c:  entry.pBuf = taosMemoryMalloc(nData);
dnode/vnode/src/meta/metaTable.c:      pNewSchema = taosMemoryMalloc(sizeof(SSchema) * pSchema->nCols);
dnode/vnode/src/meta/metaTable.c:  if (entry.pBuf) taosMemoryFree(entry.pBuf);
dnode/vnode/src/meta/metaTable.c:  if (pNewSchema) taosMemoryFree(pNewSchema);
dnode/vnode/src/meta/metaTable.c:  if (freeColCmpr) taosMemoryFree(entry.colCmpr.pColCmpr);
dnode/vnode/src/meta/metaTable.c:  if (entry.pBuf) taosMemoryFree(entry.pBuf);
dnode/vnode/src/meta/metaTable.c:  ctbEntry.pBuf = taosMemoryMalloc(nData);
dnode/vnode/src/meta/metaTable.c:    ctbEntry.ctbEntry.pTags = taosMemoryMalloc(pAlterTbReq->nTagVal);
dnode/vnode/src/meta/metaTable.c:  taosMemoryFree((void *)ctbEntry.ctbEntry.pTags);
dnode/vnode/src/meta/metaTable.c:  if (ctbEntry.pBuf) taosMemoryFree(ctbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:  if (ctbEntry.pBuf) taosMemoryFree(ctbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:  entry.pBuf = taosMemoryMalloc(nData);
dnode/vnode/src/meta/metaTable.c:  if (entry.pBuf) taosMemoryFree(entry.pBuf);
dnode/vnode/src/meta/metaTable.c:  // if (ctbEntry.pBuf) taosMemoryFree(ctbEntry.pBuf);
dnode/vnode/src/meta/metaTable.c:  pVal = taosMemoryMalloc(vLen);
dnode/vnode/src/meta/metaTable.c:  taosMemoryFree(pVal);
dnode/vnode/src/meta/metaTable.c:  taosMemoryFree(pVal);
dnode/vnode/src/meta/metaTable.c:  *ppTagIdxKey = (STagIdxKey *)taosMemoryMalloc(*nTagIdxKey);
dnode/vnode/src/meta/metaTable.c:  if (pTagIdxKey) taosMemoryFree(pTagIdxKey);
dnode/vnode/src/meta/metaTable.c:  pVal = taosMemoryMalloc(vLen);
dnode/vnode/src/meta/metaTable.c:  taosMemoryFree(pVal);
dnode/vnode/src/meta/metaCache.c:        taosMemoryFree(pEntry);
dnode/vnode/src/meta/metaCache.c:    taosMemoryFree(pMeta->pCache->sEntryCache.aBucket);
dnode/vnode/src/meta/metaCache.c:        taosMemoryFree(pEntry);
dnode/vnode/src/meta/metaCache.c:    taosMemoryFree(pMeta->pCache->sStbStatsCache.aBucket);
dnode/vnode/src/meta/metaCache.c:  taosMemoryFreeClear(*p);
dnode/vnode/src/meta/metaCache.c:  pCache = (SMetaCache*)taosMemoryMalloc(sizeof(SMetaCache));
dnode/vnode/src/meta/metaCache.c:      (SMetaCacheEntry**)taosMemoryCalloc(pCache->sEntryCache.nBucket, sizeof(SMetaCacheEntry*));
dnode/vnode/src/meta/metaCache.c:      (SMetaStbStatsEntry**)taosMemoryCalloc(pCache->sStbStatsCache.nBucket, sizeof(SMetaStbStatsEntry*));
dnode/vnode/src/meta/metaCache.c:  taosMemoryFree(pCache);
dnode/vnode/src/meta/metaCache.c:    taosMemoryFree(pMeta->pCache);
dnode/vnode/src/meta/metaCache.c:  SMetaCacheEntry** aBucket = (SMetaCacheEntry**)taosMemoryCalloc(nBucket, sizeof(SMetaCacheEntry*));
dnode/vnode/src/meta/metaCache.c:  taosMemoryFree(pCache->sEntryCache.aBucket);
dnode/vnode/src/meta/metaCache.c:    SMetaCacheEntry* pEntryNew = (SMetaCacheEntry*)taosMemoryMalloc(sizeof(*pEntryNew));
dnode/vnode/src/meta/metaCache.c:    taosMemoryFree(pEntry);
dnode/vnode/src/meta/metaCache.c:  SMetaStbStatsEntry** aBucket = (SMetaStbStatsEntry**)taosMemoryCalloc(nBucket, sizeof(SMetaStbStatsEntry*));
dnode/vnode/src/meta/metaCache.c:  taosMemoryFree(pCache->sStbStatsCache.aBucket);
dnode/vnode/src/meta/metaCache.c:    SMetaStbStatsEntry* pEntryNew = (SMetaStbStatsEntry*)taosMemoryMalloc(sizeof(*pEntryNew));
dnode/vnode/src/meta/metaCache.c:    taosMemoryFree(pEntry);
dnode/vnode/src/meta/metaCache.c:        taosMemoryFree(tmp);
dnode/vnode/src/meta/metaCache.c:  taosMemoryFree(value);
dnode/vnode/src/meta/metaCache.c:  STagFilterResEntry* p = taosMemoryMalloc(sizeof(STagFilterResEntry));
dnode/vnode/src/meta/metaCache.c:    taosMemoryFree(pPayload);
dnode/vnode/src/meta/metaCache.c:    taosMemoryFree(pPayload);
dnode/vnode/src/meta/metaCache.c:        taosMemoryFree(tmp);
dnode/vnode/src/tqCommon/tqCommon.c:  SStreamTask* pTask = taosMemoryCalloc(1, size);
dnode/vnode/src/tqCommon/tqCommon.c:    taosMemoryFree(pTask);
dnode/vnode/src/tsdb/tsdbFile2.c:  fobj[0] = taosMemoryMalloc(sizeof(*fobj[0]));
dnode/vnode/src/tsdb/tsdbFile2.c:    taosMemoryFree(fobj);
dnode/vnode/src/tsdb/tsdbFile2.c:    taosMemoryFree(fobj);
dnode/vnode/src/tsdb/tsdbFile2.c:    taosMemoryFree(fobj);
dnode/vnode/src/tsdb/tsdbFSet2.c:  if (!(lvl[0] = taosMemoryMalloc(sizeof(SSttLvl)))) return TSDB_CODE_OUT_OF_MEMORY;
dnode/vnode/src/tsdb/tsdbFSet2.c:    taosMemoryFree(lvl[0]);
dnode/vnode/src/tsdb/tsdbFSet2.c:  taosMemoryFree(lvl[0]);
dnode/vnode/src/tsdb/tsdbFSet2.c:  fset[0] = taosMemoryCalloc(1, sizeof(STFileSet));
dnode/vnode/src/tsdb/tsdbFSet2.c:  fsr[0] = taosMemoryCalloc(1, sizeof(*fsr[0]));
dnode/vnode/src/tsdb/tsdbFSet2.c:    taosMemoryFree(fsr[0]);
dnode/vnode/src/tsdb/tsdbFSet2.c:  taosMemoryFree(fsr[0]);
dnode/vnode/src/tsdb/tsdbFSet2.c:    taosMemoryFree(ppArr[0]);
dnode/vnode/src/tsdb/tsdbFSet2.c:    taosMemoryFreeClear(*fset);
dnode/vnode/src/tsdb/tsdbCommit2.c:      taosMemoryFree(info);
dnode/vnode/src/tsdb/tsdbCommit2.c:    taosMemoryFreeClear(pTsdb->commitInfo);
dnode/vnode/src/tsdb/tsdbCommit2.c:  pTsdb->commitInfo = taosMemoryCalloc(1, sizeof(*pTsdb->commitInfo));
dnode/vnode/src/tsdb/tsdbCommit2.c:  if ((tinfo = taosMemoryMalloc(sizeof(*tinfo))) == NULL) {
dnode/vnode/src/tsdb/tsdbIter.c:  iter[0] = taosMemoryCalloc(1, sizeof(*iter[0]));
dnode/vnode/src/tsdb/tsdbIter.c:    taosMemoryFree(iter[0]);
dnode/vnode/src/tsdb/tsdbIter.c:  taosMemoryFree(iter[0]);
dnode/vnode/src/tsdb/tsdbIter.c:  merger[0] = taosMemoryCalloc(1, sizeof(*merger[0]));
dnode/vnode/src/tsdb/tsdbIter.c:    taosMemoryFree(merger[0]);
dnode/vnode/src/tsdb/tsdbSnapInfo.c:  STsdbFSetPartition* pSP = taosMemoryCalloc(1, sizeof(STsdbFSetPartition));
dnode/vnode/src/tsdb/tsdbSnapInfo.c:  taosMemoryFree(ppSP[0]);
dnode/vnode/src/tsdb/tsdbSnapInfo.c:  STsdbFSetPartList* pList = taosMemoryCalloc(1, sizeof(STsdbFSetPartList));
dnode/vnode/src/tsdb/tsdbSnapInfo.c:  taosMemoryFree(ppList[0]);
dnode/vnode/src/tsdb/tsdbSnapInfo.c:  TFileSetRangeArray* pDiff = taosMemoryCalloc(1, sizeof(TFileSetRangeArray));
dnode/vnode/src/tsdb/tsdbSnapInfo.c:    STFileSetRange* r = taosMemoryCalloc(1, sizeof(STFileSetRange));
dnode/vnode/src/tsdb/tsdbSnapInfo.c:    taosMemoryFree(pList);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:  reader[0] = taosMemoryCalloc(1, sizeof(*reader[0]));
dnode/vnode/src/tsdb/tsdbSttFileRW.c:    taosMemoryFree(reader[0]);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:      void   *data = taosMemoryMalloc(reader->footer->statisBlkPtr->size);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:        taosMemoryFree(data);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:      void   *data = taosMemoryMalloc(reader->footer->tombBlkPtr->size);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:        taosMemoryFree(data);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:      void   *data = taosMemoryMalloc(reader->footer->sttBlkPtr->size);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:        taosMemoryFree(data);
dnode/vnode/src/tsdb/tsdbSttFileRW.c:  writer[0] = taosMemoryCalloc(1, sizeof(*writer[0]));
dnode/vnode/src/tsdb/tsdbSttFileRW.c:  taosMemoryFree(writer[0]);
dnode/vnode/src/tsdb/tsdbFile.c:  pSet->pHeadF = (SHeadFile *)taosMemoryCalloc(1, sizeof(SHeadFile));
dnode/vnode/src/tsdb/tsdbFile.c:  pSet->pDataF = (SDataFile *)taosMemoryCalloc(1, sizeof(SDataFile));
dnode/vnode/src/tsdb/tsdbFile.c:  pSet->pSmaF = (SSmaFile *)taosMemoryCalloc(1, sizeof(SSmaFile));
dnode/vnode/src/tsdb/tsdbFile.c:    pSet->aSttF[iStt] = (SSttFile *)taosMemoryCalloc(1, sizeof(SSttFile));
dnode/vnode/src/tsdb/tsdbRead2.c:  pSupInfo->colId = taosMemoryMalloc(numOfCols * (sizeof(int16_t) * 2 + POINTER_BYTES));
dnode/vnode/src/tsdb/tsdbRead2.c:    taosMemoryFree(pSupInfo->colId);
dnode/vnode/src/tsdb/tsdbRead2.c:      pSupInfo->buildBuf[i] = taosMemoryMalloc(pCols[i].bytes);
dnode/vnode/src/tsdb/tsdbRead2.c:    pIter->pSttBlockReader = taosMemoryCalloc(1, sizeof(struct SSttBlockReader));
dnode/vnode/src/tsdb/tsdbRead2.c:    taosMemoryFree(pResBlock);
dnode/vnode/src/tsdb/tsdbRead2.c:        p->info.pks[0].pData = taosMemoryCalloc(1, pSup->pk.bytes);
dnode/vnode/src/tsdb/tsdbRead2.c:        p->info.pks[1].pData = taosMemoryCalloc(1, pSup->pk.bytes);
dnode/vnode/src/tsdb/tsdbRead2.c:          taosMemoryFreeClear(p->info.pks[0].pData);
dnode/vnode/src/tsdb/tsdbRead2.c:  STsdbReader* pReader = (STsdbReader*)taosMemoryCalloc(1, sizeof(*pReader));
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFree(pTSRow);
dnode/vnode/src/tsdb/tsdbRead2.c:    taosMemoryFree(pTSRow);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFree(pTSRow);
dnode/vnode/src/tsdb/tsdbRead2.c:    taosMemoryFree(pTSRow);
dnode/vnode/src/tsdb/tsdbRead2.c:    taosMemoryFree(pTSRow);
dnode/vnode/src/tsdb/tsdbRead2.c:        taosMemoryFree(row.pTSRow);
dnode/vnode/src/tsdb/tsdbRead2.c:    char* p1 = taosMemoryRealloc(pReader->status.uidList.tableUidList, sizeof(uint64_t) * num);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFreeClear(*p);
dnode/vnode/src/tsdb/tsdbRead2.c:      taosMemoryFreeClear(pSupInfo->buildBuf[i]);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFree(pSupInfo->colId);
dnode/vnode/src/tsdb/tsdbRead2.c:    taosMemoryFree(pSttBlockReader);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFreeClear(pReader->status.uidList.tableUidList);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFree(pReader->idStr);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFree(pReader->info.pSchema);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFreeClear(pReader);
dnode/vnode/src/tsdb/tsdbRead2.c:    pResBlock->pBlockAgg = taosMemoryCalloc(num, POINTER_BYTES);
dnode/vnode/src/tsdb/tsdbRead2.c:  STsdbReadSnap* pSnap = (STsdbReadSnap*)taosMemoryCalloc(1, sizeof(STsdbReadSnap));
dnode/vnode/src/tsdb/tsdbRead2.c:    pSnap->pNode = taosMemoryMalloc(sizeof(*pSnap->pNode));
dnode/vnode/src/tsdb/tsdbRead2.c:    pSnap->pINode = taosMemoryMalloc(sizeof(*pSnap->pINode));
dnode/vnode/src/tsdb/tsdbRead2.c:      if (pSnap->pNode) taosMemoryFree(pSnap->pNode);
dnode/vnode/src/tsdb/tsdbRead2.c:      if (pSnap->pINode) taosMemoryFree(pSnap->pINode);
dnode/vnode/src/tsdb/tsdbRead2.c:      taosMemoryFree(pSnap);
dnode/vnode/src/tsdb/tsdbRead2.c:    if (pSnap->pNode) taosMemoryFree(pSnap->pNode);
dnode/vnode/src/tsdb/tsdbRead2.c:    if (pSnap->pINode) taosMemoryFree(pSnap->pINode);
dnode/vnode/src/tsdb/tsdbRead2.c:    taosMemoryFree(pSnap);
dnode/vnode/src/tsdb/tsdbRead2.c:  taosMemoryFreeClear(pReader->idStr);
dnode/vnode/src/tsdb/tsdbMerge.c:  taosMemoryFree(arg);
dnode/vnode/src/tsdb/tsdbMemTable.c:  pMemTable = (SMemTable *)taosMemoryCalloc(1, sizeof(*pMemTable));
dnode/vnode/src/tsdb/tsdbMemTable.c:  pMemTable->aBucket = (STbData **)taosMemoryCalloc(pMemTable->nBucket, sizeof(STbData *));
dnode/vnode/src/tsdb/tsdbMemTable.c:    taosMemoryFree(pMemTable);
dnode/vnode/src/tsdb/tsdbMemTable.c:    taosMemoryFree(pMemTable->aBucket);
dnode/vnode/src/tsdb/tsdbMemTable.c:    taosMemoryFree(pMemTable);
dnode/vnode/src/tsdb/tsdbMemTable.c:  (*ppIter) = (STbDataIter *)taosMemoryCalloc(1, sizeof(STbDataIter));
dnode/vnode/src/tsdb/tsdbMemTable.c:    taosMemoryFree(pIter);
dnode/vnode/src/tsdb/tsdbMemTable.c:  STbData **aBucket = (STbData **)taosMemoryCalloc(nBucket, sizeof(STbData *));
dnode/vnode/src/tsdb/tsdbMemTable.c:  taosMemoryFree(pMemTable->aBucket);
dnode/vnode/src/tsdb/tsdbRetention.c:static void tsdbRetentionCancel(void *arg) { taosMemoryFree(arg); }
dnode/vnode/src/tsdb/tsdbRetention.c:  taosMemoryFree(arg);
dnode/vnode/src/tsdb/tsdbRetention.c:      SRtnArg *arg = taosMemoryMalloc(sizeof(*arg));
dnode/vnode/src/tsdb/tsdbRetention.c:        taosMemoryFree(arg);
dnode/vnode/src/tsdb/tsdbFS2.c:  fs[0] = taosMemoryCalloc(1, sizeof(*fs[0]));
dnode/vnode/src/tsdb/tsdbFS2.c:  taosMemoryFree(fs[0]);
dnode/vnode/src/tsdb/tsdbFS2.c:  taosMemoryFree(data);
dnode/vnode/src/tsdb/tsdbFS2.c:  data = taosMemoryMalloc(size + 1);
dnode/vnode/src/tsdb/tsdbFS2.c:  if (data) taosMemoryFree(data);
dnode/vnode/src/tsdb/tsdbFS2.c:  STFileHashEntry *entry = taosMemoryMalloc(sizeof(*entry));
dnode/vnode/src/tsdb/tsdbFS2.c:  hash->buckets = taosMemoryCalloc(hash->numBucket, sizeof(STFileHashEntry *));
dnode/vnode/src/tsdb/tsdbFS2.c:      taosMemoryFree(entry);
dnode/vnode/src/tsdb/tsdbFS2.c:  taosMemoryFree(hash->buckets);
dnode/vnode/src/tsdb/tsdbFS2.c:        SMergeArg *arg = taosMemoryMalloc(sizeof(*arg));
dnode/vnode/src/tsdb/tsdbFS2.c:        code = vnodeAsync(&fset->channel, EVA_PRIORITY_HIGH, tsdbMerge, taosMemoryFree, arg, NULL);
dnode/vnode/src/tsdb/tsdbFS2.c:  fsetArr[0] = taosMemoryMalloc(sizeof(TFileSetArray));
dnode/vnode/src/tsdb/tsdbFS2.c:    taosMemoryFree(fsetArr[0]);
dnode/vnode/src/tsdb/tsdbFS2.c:    taosMemoryFree(fsetArr[0]);
dnode/vnode/src/tsdb/tsdbFS2.c:  fsetArr[0] = taosMemoryCalloc(1, sizeof(*fsetArr[0]));
dnode/vnode/src/tsdb/tsdbFS2.c:    taosMemoryFreeClear(fsetArr[0]);
dnode/vnode/src/tsdb/tsdbFS2.c:  fsetArr[0] = taosMemoryMalloc(sizeof(TFileSetArray));
dnode/vnode/src/tsdb/tsdbFS2.c:    taosMemoryFree(fsetArr[0]);
dnode/vnode/src/tsdb/tsdbFS2.c:  fsrArr[0] = taosMemoryCalloc(1, sizeof(*fsrArr[0]));
dnode/vnode/src/tsdb/tsdbFSetRAW.c:  writer[0] = taosMemoryCalloc(1, sizeof(SFSetRAWWriter));
dnode/vnode/src/tsdb/tsdbFSetRAW.c:  taosMemoryFree(writer[0]);
dnode/vnode/src/tsdb/tsdbSnapshot.c:  *data = taosMemoryMalloc(sizeof(SSnapDataHdr) + size);
dnode/vnode/src/tsdb/tsdbSnapshot.c:  data[0] = taosMemoryMalloc(size + sizeof(SSnapDataHdr));
dnode/vnode/src/tsdb/tsdbSnapshot.c:  reader[0] = (STsdbSnapReader*)taosMemoryCalloc(1, sizeof(*reader[0]));
dnode/vnode/src/tsdb/tsdbSnapshot.c:    taosMemoryFree(reader[0]);
dnode/vnode/src/tsdb/tsdbSnapshot.c:  taosMemoryFree(reader[0]);
dnode/vnode/src/tsdb/tsdbSnapshot.c:  writer[0] = taosMemoryCalloc(1, sizeof(*writer[0]));
dnode/vnode/src/tsdb/tsdbSnapshot.c:  taosMemoryFree(writer[0]);
dnode/vnode/src/tsdb/tsdbDataFileRAW.c:  reader[0] = taosMemoryCalloc(1, sizeof(SDataFileRAWReader));
dnode/vnode/src/tsdb/tsdbDataFileRAW.c:  taosMemoryFree(reader[0]);
dnode/vnode/src/tsdb/tsdbDataFileRAW.c:  SDataFileRAWWriter *writer = taosMemoryCalloc(1, sizeof(SDataFileRAWWriter));
dnode/vnode/src/tsdb/tsdbDataFileRAW.c:    taosMemoryFree(writer);
dnode/vnode/src/tsdb/tsdbDataFileRAW.c:  taosMemoryFree(writer[0]);
dnode/vnode/src/tsdb/tsdbMergeTree.c:  SSttBlockLoadInfo *pLoadInfo = taosMemoryCalloc(1, sizeof(SSttBlockLoadInfo));
dnode/vnode/src/tsdb/tsdbMergeTree.c:    taosMemoryFree(p->pData);
dnode/vnode/src/tsdb/tsdbMergeTree.c:  taosMemoryFree(pLoadInfo);
dnode/vnode/src/tsdb/tsdbMergeTree.c:  taosMemoryFree(pIter);
dnode/vnode/src/tsdb/tsdbMergeTree.c:    char *pBuf = taosMemoryMalloc(pVal->nData);
dnode/vnode/src/tsdb/tsdbFSetRW.c:  writer[0] = taosMemoryCalloc(1, sizeof(*writer[0]));
dnode/vnode/src/tsdb/tsdbFSetRW.c:  taosMemoryFree(writer[0]);
dnode/vnode/src/tsdb/tsdbOpen.c:  pTsdb = (STsdb *)taosMemoryCalloc(1, sizeof(*pTsdb) + slen);
dnode/vnode/src/tsdb/tsdbOpen.c:  taosMemoryFree(pTsdb);
dnode/vnode/src/tsdb/tsdbOpen.c:    taosMemoryFreeClear(*pTsdb);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:        // taosMemoryFree(pFD);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:        // taosMemoryFree(pFD);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:      // taosMemoryFree(pFD);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:        // taosMemoryFree(pFD);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:  pFD->pBuf = taosMemoryCalloc(1, szPage);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:    // taosMemoryFree(pFD);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:      // taosMemoryFree(pFD->pBuf);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:      // taosMemoryFree(pFD);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:  pFD = (STsdbFD *)taosMemoryCalloc(1, sizeof(*pFD) + strlen(path) + 1);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:    taosMemoryFree(pFD->pBuf);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:    taosMemoryFree(pFD);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:  char *buf = taosMemoryCalloc(1, size);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:        taosMemoryFree(buf);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:        taosMemoryFree(buf);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:        taosMemoryFree(buf);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:        taosMemoryFree(buf);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:      taosMemoryFree(pBlock);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:    taosMemoryFree(pBlock);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:  pReader = (SDataFReader *)taosMemoryCalloc(1, sizeof(*pReader));
dnode/vnode/src/tsdb/tsdbReaderWriter.c:      taosMemoryFree(pReader);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:  taosMemoryFree(*ppReader);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:  pDelFReader = (SDelFReader *)taosMemoryCalloc(1, sizeof(*pDelFReader));
dnode/vnode/src/tsdb/tsdbReaderWriter.c:    taosMemoryFree(pDelFReader);
dnode/vnode/src/tsdb/tsdbReaderWriter.c:    taosMemoryFree(pReader);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  char*          buf = taosMemoryCalloc(1, pCol->info.bytes);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  taosMemoryFree(buf);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  SCacheRowsReader* p = taosMemoryCalloc(1, sizeof(SCacheRowsReader));
dnode/vnode/src/tsdb/tsdbCacheRead.c:      p->rowKey.pks[0].pData = taosMemoryCalloc(1, pPkCol->bytes);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  p->transferBuf = taosMemoryCalloc(p->pSchema->numOfCols, POINTER_BYTES);
dnode/vnode/src/tsdb/tsdbCacheRead.c:      p->transferBuf[i] = taosMemoryMalloc(p->pSchema->columns[i].bytes);
dnode/vnode/src/tsdb/tsdbCacheRead.c:      taosMemoryFreeClear(p->transferBuf[i]);
dnode/vnode/src/tsdb/tsdbCacheRead.c:    taosMemoryFree(p->transferBuf);
dnode/vnode/src/tsdb/tsdbCacheRead.c:    taosMemoryFree(p->pSchema);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  taosMemoryFree(p->pCurrSchema);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  taosMemoryFree((void*)p->idstr);
dnode/vnode/src/tsdb/tsdbCacheRead.c:    taosMemoryFree(p->uidList);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  taosMemoryFree(pReader);
dnode/vnode/src/tsdb/tsdbCacheRead.c:    taosMemoryFree(pCol->colVal.value.pData);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  void** pRes = taosMemoryCalloc(pr->numOfCols, POINTER_BYTES);
dnode/vnode/src/tsdb/tsdbCacheRead.c:    pRes[j] = taosMemoryCalloc(1, sizeof(SFirstLastRes) + bytes + pkBufLen + VARSTR_HEADER_SIZE);
dnode/vnode/src/tsdb/tsdbCacheRead.c:        p.colVal.value.pData = taosMemoryCalloc(pCol->bytes, sizeof(char));
dnode/vnode/src/tsdb/tsdbCacheRead.c:      taosMemoryFree(pRes[j]);
dnode/vnode/src/tsdb/tsdbCacheRead.c:  taosMemoryFree(pRes);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(pTsdb->rCache.pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:  SLastCol *pLastCol = taosMemoryCalloc(1, sizeof(SLastCol));
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pLastCol);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pLastCol);
dnode/vnode/src/tsdb/tsdbCache.c:  *value = taosMemoryMalloc(*size);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(rocks_value);
dnode/vnode/src/tsdb/tsdbCache.c:      pValue->pData = taosMemoryMalloc(pValue->nData);
dnode/vnode/src/tsdb/tsdbCache.c:      taosMemoryFree(pValue->pData);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(pLastCol->colVal.value.pData);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(value);
dnode/vnode/src/tsdb/tsdbCache.c:  SLastCol *pTmpLastCol = taosMemoryCalloc(1, sizeof(SLastCol));
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(value);
dnode/vnode/src/tsdb/tsdbCache.c:  char       **keys_list = taosMemoryCalloc(2, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t      *keys_list_sizes = taosMemoryCalloc(2, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:  char *keys = taosMemoryCalloc(2, sizeof(SLastKey));
dnode/vnode/src/tsdb/tsdbCache.c:  char  **values_list = taosMemoryCalloc(2, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t *values_list_sizes = taosMemoryCalloc(2, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:  char  **errs = taosMemoryCalloc(2, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(errs);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pLastCol);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pLastCol);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list[0]);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:      pOld->pData = taosMemoryCalloc(1, pNew->nData);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFreeClear(pFree);
dnode/vnode/src/tsdb/tsdbCache.c:    char  **keys_list = taosMemoryCalloc(num_keys, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:    size_t *keys_list_sizes = taosMemoryCalloc(num_keys, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:    char  **values_list = taosMemoryCalloc(num_keys, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:    size_t *values_list_sizes = taosMemoryCalloc(num_keys, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:    char  **errs = taosMemoryCalloc(num_keys, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(errs);
dnode/vnode/src/tsdb/tsdbCache.c:        taosMemoryFreeClear(PToFree);
dnode/vnode/src/tsdb/tsdbCache.c:        SLastCol *pTmpLastCol = taosMemoryCalloc(1, sizeof(SLastCol));
dnode/vnode/src/tsdb/tsdbCache.c:        taosMemoryFree(value);
dnode/vnode/src/tsdb/tsdbCache.c:      taosMemoryFreeClear(PToFree);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(keys_list);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(keys_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(values_list);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(values_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFreeClear(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFreeClear(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:  char  **keys_list = taosMemoryMalloc(num_keys * sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t *keys_list_sizes = taosMemoryMalloc(num_keys * sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:  char   *key_list = taosMemoryMalloc(num_keys * ROCKS_KEY_LEN);
dnode/vnode/src/tsdb/tsdbCache.c:  char  **values_list = taosMemoryCalloc(num_keys, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t *values_list_sizes = taosMemoryCalloc(num_keys, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:  char  **errs = taosMemoryMalloc(num_keys * sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(key_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(errs);
dnode/vnode/src/tsdb/tsdbCache.c:        taosMemoryFree(value);
dnode/vnode/src/tsdb/tsdbCache.c:      taosMemoryFree(pLastCol);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:      taosMemoryFree(value);
dnode/vnode/src/tsdb/tsdbCache.c:      SLastCol *pTmpLastCol = taosMemoryCalloc(1, sizeof(SLastCol));
dnode/vnode/src/tsdb/tsdbCache.c:  int16_t *slotIds = taosMemoryMalloc(num_keys * sizeof(int16_t));
dnode/vnode/src/tsdb/tsdbCache.c:  int16_t *lastColIds = taosMemoryMalloc(num_keys * sizeof(int16_t));
dnode/vnode/src/tsdb/tsdbCache.c:  int16_t *lastSlotIds = taosMemoryMalloc(num_keys * sizeof(int16_t));
dnode/vnode/src/tsdb/tsdbCache.c:  int16_t *lastrowColIds = taosMemoryMalloc(num_keys * sizeof(int16_t));
dnode/vnode/src/tsdb/tsdbCache.c:  int16_t *lastrowSlotIds = taosMemoryMalloc(num_keys * sizeof(int16_t));
dnode/vnode/src/tsdb/tsdbCache.c:    SLastCol *pTmpLastCol = taosMemoryCalloc(1, sizeof(SLastCol));
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(value);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(lastColIds);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(lastSlotIds);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(lastrowColIds);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(lastrowSlotIds);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(slotIds);
dnode/vnode/src/tsdb/tsdbCache.c:  char  **keys_list = taosMemoryMalloc(num_keys * sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t *keys_list_sizes = taosMemoryMalloc(num_keys * sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:  char   *key_list = taosMemoryMalloc(num_keys * ROCKS_KEY_LEN);
dnode/vnode/src/tsdb/tsdbCache.c:  char  **values_list = taosMemoryCalloc(num_keys, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t *values_list_sizes = taosMemoryCalloc(num_keys, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:  char  **errs = taosMemoryMalloc(num_keys * sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:      SLastCol *pTmpLastCol = taosMemoryCalloc(1, sizeof(SLastCol));
dnode/vnode/src/tsdb/tsdbCache.c:      taosMemoryFreeClear(PToFree);
dnode/vnode/src/tsdb/tsdbCache.c:      taosMemoryFree(values_list[i]);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(errs);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(key_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:  char       **keys_list = taosMemoryCalloc(num_keys * 2, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t      *keys_list_sizes = taosMemoryCalloc(num_keys * 2, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:    char *keys = taosMemoryCalloc(2, sizeof(SLastKey));
dnode/vnode/src/tsdb/tsdbCache.c:  char  **values_list = taosMemoryCalloc(num_keys * 2, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  size_t *values_list_sizes = taosMemoryCalloc(num_keys * 2, sizeof(size_t));
dnode/vnode/src/tsdb/tsdbCache.c:  char  **errs = taosMemoryCalloc(num_keys * 2, sizeof(char *));
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(errs);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pLastCol);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pLastCol);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(keys_list[i]);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(keys_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(values_list_sizes);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:      taosMemoryFree(pLastCol->colVal.value.pData);
dnode/vnode/src/tsdb/tsdbCache.c:          lastCol.colVal.value.pData = taosMemoryMalloc(colVal.value.nData);
dnode/vnode/src/tsdb/tsdbCache.c:                taosMemoryFree(pLastCol->colVal.value.pData);
dnode/vnode/src/tsdb/tsdbCache.c:              lastCol.colVal.value.pData = taosMemoryMalloc(colVal.value.nData);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:          lastCol.colVal.value.pData = taosMemoryMalloc(colVal.value.nData);
dnode/vnode/src/tsdb/tsdbCache.c:                taosMemoryFree(pLastCol->colVal.value.pData);
dnode/vnode/src/tsdb/tsdbCache.c:              lastCol.colVal.value.pData = taosMemoryMalloc(colVal.value.nData);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFreeClear(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFreeClear(*p);
dnode/vnode/src/tsdb/tsdbCache.c:    pInfo = taosMemoryCalloc(1, sizeof(STableLoadInfo));
dnode/vnode/src/tsdb/tsdbCache.c:    pReader->uidList = taosMemoryMalloc(numOfTables * sizeof(uint64_t));
dnode/vnode/src/tsdb/tsdbCache.c:        taosMemoryFree(state->pTSRow);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(state->pTSRow);
dnode/vnode/src/tsdb/tsdbCache.c:    taosMemoryFree(state->pTSRow);
dnode/vnode/src/tsdb/tsdbCache.c:  *ppDst = taosMemoryMalloc(len);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFreeClear(pReader->pCurrSchema);
dnode/vnode/src/tsdb/tsdbCache.c:            pCol->colVal.value.pData = taosMemoryMalloc(pCol->colVal.value.nData);
dnode/vnode/src/tsdb/tsdbCache.c:          taosMemoryFree(pLastCol->colVal.value.pData);
dnode/vnode/src/tsdb/tsdbCache.c:            lastCol.colVal.value.pData = taosMemoryMalloc(lastCol.colVal.value.nData);
dnode/vnode/src/tsdb/tsdbCache.c:  // taosMemoryFreeClear(pTSchema);
dnode/vnode/src/tsdb/tsdbCache.c:          pCol->colVal.value.pData = taosMemoryMalloc(pCol->colVal.value.nData);
dnode/vnode/src/tsdb/tsdbCache.c:  uint8_t *pBlock = taosMemoryCalloc(1, tsS3BlockSize * pFD->szPage);
dnode/vnode/src/tsdb/tsdbCache.c:    // taosMemoryFree(pBlock);
dnode/vnode/src/tsdb/tsdbCache.c:  taosMemoryFree(pBlock);
dnode/vnode/src/tsdb/tsdbCache.c:    uint8_t            *pPg = taosMemoryMalloc(charge);
dnode/vnode/src/tsdb/tsdbUtil.c:    taosMemoryFree(pBlockData->aColData);
dnode/vnode/src/tsdb/tsdbUtil.c:    SColData *aColData = taosMemoryRealloc(pBlockData->aColData, sizeof(SBlockData) * nColData);
dnode/vnode/src/tsdb/tsdbUtil.c:  taosMemoryFreeClear(pBlockData->aColData);
dnode/vnode/src/tsdb/tsdbUtil.c:  SColData *newColData = taosMemoryRealloc(pBlockData->aColData, sizeof(SColData) * (pBlockData->nColData + 1));
dnode/vnode/src/tsdb/tsdbDataFileRW.c:  reader[0] = taosMemoryCalloc(1, sizeof(**reader));
dnode/vnode/src/tsdb/tsdbDataFileRW.c:  taosMemoryFree(reader[0]);
dnode/vnode/src/tsdb/tsdbDataFileRW.c:      void *data = taosMemoryMalloc(reader->headFooter->brinBlkPtr->size);
dnode/vnode/src/tsdb/tsdbDataFileRW.c:        taosMemoryFree(data);
dnode/vnode/src/tsdb/tsdbDataFileRW.c:      void *data = taosMemoryMalloc(reader->tombFooter->tombBlkPtr->size);
dnode/vnode/src/tsdb/tsdbDataFileRW.c:        taosMemoryFree(data);
dnode/vnode/src/tsdb/tsdbDataFileRW.c:  writer[0] = taosMemoryCalloc(1, sizeof(*writer[0]));
dnode/vnode/src/tsdb/tsdbDataFileRW.c:  taosMemoryFree(writer[0]);
dnode/vnode/src/tsdb/tsdbSnapshotRAW.c:  reader[0] = taosMemoryCalloc(1, sizeof(STsdbSnapRAWReader));
dnode/vnode/src/tsdb/tsdbSnapshotRAW.c:    taosMemoryFree(reader[0]);
dnode/vnode/src/tsdb/tsdbSnapshotRAW.c:  taosMemoryFree(reader[0]);
dnode/vnode/src/tsdb/tsdbSnapshotRAW.c:  void* pBuf = taosMemoryCalloc(1, sizeof(SSnapDataHdr) + sizeof(STsdbDataRAWBlockHeader) + dataLength);
dnode/vnode/src/tsdb/tsdbSnapshotRAW.c:    taosMemoryFree(pBuf);
dnode/vnode/src/tsdb/tsdbSnapshotRAW.c:  writer[0] = taosMemoryCalloc(1, sizeof(*writer[0]));
dnode/vnode/src/tsdb/tsdbSnapshotRAW.c:  taosMemoryFree(writer[0]);
dnode/vnode/src/tsdb/tsdbFS.c:    pFS->pDelFile = (SDelFile *)taosMemoryCalloc(1, sizeof(SDelFile));
dnode/vnode/src/tsdb/tsdbFS.c:  uint8_t *pData = taosMemoryMalloc(size);
dnode/vnode/src/tsdb/tsdbFS.c:  if (pData) taosMemoryFree(pData);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pFS->pDelFile);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pHeadF);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pDataF);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pSmaF);
dnode/vnode/src/tsdb/tsdbFS.c:      taosMemoryFree(pSet->aSttF[iStt]);
dnode/vnode/src/tsdb/tsdbFS.c:  pData = taosMemoryMalloc(size);
dnode/vnode/src/tsdb/tsdbFS.c:  if (pData) taosMemoryFree(pData);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pHeadF);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pDataF);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pSmaF);
dnode/vnode/src/tsdb/tsdbFS.c:      taosMemoryFree(pSet->aSttF[iStt]);
dnode/vnode/src/tsdb/tsdbFS.c:  pSetTo->pHeadF = (SHeadFile *)taosMemoryMalloc(sizeof(SHeadFile));
dnode/vnode/src/tsdb/tsdbFS.c:  pSetTo->pDataF = (SDataFile *)taosMemoryMalloc(sizeof(SDataFile));
dnode/vnode/src/tsdb/tsdbFS.c:  pSetTo->pSmaF = (SSmaFile *)taosMemoryMalloc(sizeof(SSmaFile));
dnode/vnode/src/tsdb/tsdbFS.c:    pSetTo->aSttF[iStt] = (SSttFile *)taosMemoryMalloc(sizeof(SSttFile));
dnode/vnode/src/tsdb/tsdbFS.c:    pSetOld->pHeadF = (SHeadFile *)taosMemoryMalloc(sizeof(SHeadFile));
dnode/vnode/src/tsdb/tsdbFS.c:      taosMemoryFree(pHeadF);
dnode/vnode/src/tsdb/tsdbFS.c:    pSetOld->pDataF = (SDataFile *)taosMemoryMalloc(sizeof(SDataFile));
dnode/vnode/src/tsdb/tsdbFS.c:      taosMemoryFree(pDataF);
dnode/vnode/src/tsdb/tsdbFS.c:    pSetOld->pSmaF = (SSmaFile *)taosMemoryMalloc(sizeof(SSmaFile));
dnode/vnode/src/tsdb/tsdbFS.c:      taosMemoryFree(pSmaF);
dnode/vnode/src/tsdb/tsdbFS.c:      pSetOld->aSttF[pSetOld->nSttF] = (SSttFile *)taosMemoryMalloc(sizeof(SSttFile));
dnode/vnode/src/tsdb/tsdbFS.c:          taosMemoryFree(pSttFile);
dnode/vnode/src/tsdb/tsdbFS.c:      pSetOld->aSttF[0] = (SSttFile *)taosMemoryMalloc(sizeof(SSttFile));
dnode/vnode/src/tsdb/tsdbFS.c:            taosMemoryFree(pSttFile);
dnode/vnode/src/tsdb/tsdbFS.c:          pSetOld->aSttF[iStt] = (SSttFile *)taosMemoryMalloc(sizeof(SSttFile));
dnode/vnode/src/tsdb/tsdbFS.c:        taosMemoryFree(pSttFile);
dnode/vnode/src/tsdb/tsdbFS.c:      pSetOld->aSttF[iStt] = (SSttFile *)taosMemoryMalloc(sizeof(SSttFile));
dnode/vnode/src/tsdb/tsdbFS.c:      pTsdb->fs.pDelFile = (SDelFile *)taosMemoryMalloc(sizeof(SDelFile));
dnode/vnode/src/tsdb/tsdbFS.c:          taosMemoryFree(pDelFile);
dnode/vnode/src/tsdb/tsdbFS.c:        taosMemoryFree(pTsdb->fs.pDelFile);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pTsdb->fs.pDelFile);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pHeadF);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pDataF);
dnode/vnode/src/tsdb/tsdbFS.c:    taosMemoryFree(pSet->pSmaF);
dnode/vnode/src/tsdb/tsdbFS.c:      taosMemoryFree(pSet->aSttF[iStt]);
dnode/vnode/src/tsdb/tsdbReadUtil.c:    char* p = taosMemoryCalloc(pBuf->numPerBucket, sizeof(STableBlockScanInfo));
dnode/vnode/src/tsdb/tsdbReadUtil.c:    char* p = taosMemoryCalloc(remainder, sizeof(STableBlockScanInfo));
dnode/vnode/src/tsdb/tsdbReadUtil.c:    taosMemoryFree(*p);
dnode/vnode/src/tsdb/tsdbReadUtil.c:    char* p = taosMemoryCalloc(pBuf->numPerBucket, sizeof(STableBlockScanInfo));
dnode/vnode/src/tsdb/tsdbReadUtil.c:    char* p = taosMemoryCalloc(remainder, sizeof(STableBlockScanInfo));
dnode/vnode/src/tsdb/tsdbReadUtil.c:    taosMemoryFree(*p);
dnode/vnode/src/tsdb/tsdbReadUtil.c:      pKey->pks[0].pData = taosMemoryCalloc(1, len);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFreeClear(pKey->pks[0].pData);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  pUidList->tableUidList = taosMemoryMalloc(numOfTables * sizeof(uint64_t));
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFreeClear(pSup->numOfBlocksPerTable);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFreeClear(pSup->indexPerTable);
dnode/vnode/src/tsdb/tsdbReadUtil.c:    taosMemoryFreeClear(pBlockInfo);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFreeClear(pSup->pDataBlockInfo);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  pSup->numOfBlocksPerTable = taosMemoryCalloc(1, sizeof(int32_t) * numOfTables);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  pSup->indexPerTable = taosMemoryCalloc(1, sizeof(int32_t) * numOfTables);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  pSup->pDataBlockInfo = taosMemoryCalloc(1, POINTER_BYTES * numOfTables);
dnode/vnode/src/tsdb/tsdbReadUtil.c:      char* p = taosMemoryCalloc(1, pFirstKey->pks[0].nData + VARSTR_HEADER_SIZE);
dnode/vnode/src/tsdb/tsdbReadUtil.c:      p = taosMemoryCalloc(1, keyLen + VARSTR_HEADER_SIZE);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFreeClear(p->firstPk.pData);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFreeClear(p->lastPk.pData);
dnode/vnode/src/tsdb/tsdbReadUtil.c:    char* buf = taosMemoryMalloc(sizeof(SBlockOrderWrapper) * num);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFree(pTree);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  STbStatisBlock* pStatisBlock = taosMemoryCalloc(1, sizeof(STbStatisBlock));
dnode/vnode/src/tsdb/tsdbReadUtil.c:    taosMemoryFreeClear(pStatisBlock);
dnode/vnode/src/tsdb/tsdbReadUtil.c:      taosMemoryFreeClear(pStatisBlock);
dnode/vnode/src/tsdb/tsdbReadUtil.c:  taosMemoryFreeClear(pStatisBlock);
dnode/vnode/src/tsdb/tsdbReadUtil.c:      SLDataIter* pIter = taosMemoryCalloc(1, sizeof(SLDataIter));
dnode/vnode/src/vnd/vnodeQuery.c:  metaRsp.pSchemas = (SSchema *)taosMemoryMalloc(sizeof(SSchema) * (metaRsp.numOfColumns + metaRsp.numOfTags));
dnode/vnode/src/vnd/vnodeQuery.c:  metaRsp.pSchemaExt = (SSchemaExt *)taosMemoryCalloc(metaRsp.numOfColumns, sizeof(SSchemaExt));
dnode/vnode/src/vnd/vnodeQuery.c:    pRsp = taosMemoryCalloc(1, rspLen);
dnode/vnode/src/vnd/vnodeQuery.c:  taosMemoryFree(metaRsp.pSchemas);
dnode/vnode/src/vnd/vnodeQuery.c:  taosMemoryFree(metaRsp.pSchemaExt);
dnode/vnode/src/vnd/vnodeQuery.c:    cfgRsp.pTags = taosMemoryMalloc(cfgRsp.tagsLen);
dnode/vnode/src/vnd/vnodeQuery.c:  cfgRsp.pSchemas = (SSchema *)taosMemoryMalloc(sizeof(SSchema) * (cfgRsp.numOfColumns + cfgRsp.numOfTags));
dnode/vnode/src/vnd/vnodeQuery.c:  cfgRsp.pSchemaExt = (SSchemaExt *)taosMemoryMalloc(cfgRsp.numOfColumns * sizeof(SSchemaExt));
dnode/vnode/src/vnd/vnodeQuery.c:    pRsp = taosMemoryCalloc(1, rspLen);
dnode/vnode/src/vnd/vnodeQuery.c:      buf = taosMemoryCalloc(1, rspLen);
dnode/vnode/src/vnd/vnodeQuery.c:    taosMemoryFree(buf);
dnode/vnode/src/vnd/vnodeHash.c:  SVHashEntry** newBuckets = (SVHashEntry**)taosMemoryCalloc(newNumBuckets, sizeof(SVHashEntry*));
dnode/vnode/src/vnd/vnodeHash.c:  taosMemoryFree(ht->buckets);
dnode/vnode/src/vnd/vnodeHash.c:  (*ht) = (SVHashTable*)taosMemoryMalloc(sizeof(SVHashTable));
dnode/vnode/src/vnd/vnodeHash.c:  (*ht)->buckets = (SVHashEntry**)taosMemoryCalloc((*ht)->numBuckets, sizeof(SVHashEntry*));
dnode/vnode/src/vnd/vnodeHash.c:    taosMemoryFree(*ht);
dnode/vnode/src/vnd/vnodeHash.c:    taosMemoryFree((*ht)->buckets);
dnode/vnode/src/vnd/vnodeHash.c:    taosMemoryFree(*ht);
dnode/vnode/src/vnd/vnodeHash.c:  SVHashEntry* entry = (SVHashEntry*)taosMemoryMalloc(sizeof(SVHashEntry));
dnode/vnode/src/vnd/vnodeHash.c:      taosMemoryFree(tmp);
dnode/vnode/src/vnd/vnodeCommit.c:  taosMemoryFree(data);
dnode/vnode/src/vnd/vnodeCommit.c:  taosMemoryFree(data);
dnode/vnode/src/vnd/vnodeCommit.c:  pData = taosMemoryMalloc(size + 1);
dnode/vnode/src/vnd/vnodeCommit.c:    taosMemoryFree(pData);
dnode/vnode/src/vnd/vnodeCommit.c:  taosMemoryFree(pData);
dnode/vnode/src/vnd/vnodeCommit.c:  taosMemoryFree(pData);
dnode/vnode/src/vnd/vnodeCommit.c:  taosMemoryFree(arg);
dnode/vnode/src/vnd/vnodeCommit.c:static void vnodeCommitCancel(void *arg) { taosMemoryFree(arg); }
dnode/vnode/src/vnd/vnodeCommit.c:  SCommitInfo *pInfo = (SCommitInfo *)taosMemoryCalloc(1, sizeof(*pInfo));
dnode/vnode/src/vnd/vnodeCommit.c:    taosMemoryFree(pInfo);
dnode/vnode/src/vnd/vnodeSnapshot.c:  pReader = (SVSnapReader *)taosMemoryCalloc(1, sizeof(*pReader));
dnode/vnode/src/vnd/vnodeSnapshot.c:  taosMemoryFree(pReader);
dnode/vnode/src/vnd/vnodeSnapshot.c:    *ppData = taosMemoryMalloc(sizeof(SSnapDataHdr) + size + 1);
dnode/vnode/src/vnd/vnodeSnapshot.c:      taosMemoryFree(*ppData);
dnode/vnode/src/vnd/vnodeSnapshot.c:  pWriter = (SVSnapWriter *)taosMemoryCalloc(1, sizeof(*pWriter));
dnode/vnode/src/vnd/vnodeSnapshot.c:  if (pWriter) taosMemoryFreeClear(pWriter);
dnode/vnode/src/vnd/vnodeSnapshot.c:    taosMemoryFree(pWriter);
dnode/vnode/src/vnd/vnodeSvr.c:      char *str = taosMemoryCalloc(1, TSDB_TABLE_FNAME_LEN);
dnode/vnode/src/vnd/vnodeSvr.c:      // taosMemoryFreeClear(*key);
dnode/vnode/src/vnd/vnodeSvr.c:  taosArrayDestroyP(tbNames, taosMemoryFree);
dnode/vnode/src/vnd/vnodeSvr.c:    taosMemoryFree(vMetaRsp.pSchemas);
dnode/vnode/src/vnd/vnodeSvr.c:    taosMemoryFree(vMetaRsp.pSchemaExt);
dnode/vnode/src/vnd/vnodeSvr.c:      char *str = taosMemoryCalloc(1, TSDB_TABLE_FNAME_LEN);
dnode/vnode/src/vnd/vnodeSvr.c:      taosMemoryFreeClear(*key);
dnode/vnode/src/vnd/vnodeSvr.c:  taosMemoryFreeClear(pSchema);
dnode/vnode/src/vnd/vnodeSvr.c:  taosMemoryFreeClear(pCxt->pTbSchema);
dnode/vnode/src/vnd/vnodeSvr.c:    pCxt->pTbData = taosMemoryCalloc(1, sizeof(SSubmitTbData));
dnode/vnode/src/vnd/vnodeSvr.c:  taosMemoryFreeClear(pCxt->pTbSchema);
dnode/vnode/src/vnd/vnodeSvr.c:  taosMemoryFreeClear(pCxt->pTbData);
dnode/vnode/src/vnd/vnodeSvr.c:  pCxt->pTbData->pCreateTbReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
dnode/vnode/src/vnd/vnodeSvr.c:      taosMemoryFreeClear(cxt.pTbData);
dnode/vnode/src/vnd/vnodeSvr.c:    pMsg = taosMemoryMalloc(msglen);
dnode/vnode/src/vnd/vnodeSvr.c:  taosMemoryFree(pAllocMsg);
dnode/vnode/src/vnd/vnodeOpen.c:  pVnode = taosMemoryCalloc(1, sizeof(*pVnode) + strlen(path) + 1);
dnode/vnode/src/vnd/vnodeOpen.c:  taosMemoryFree(pVnode);
dnode/vnode/src/vnd/vnodeOpen.c:    taosMemoryFree(pVnode);
dnode/vnode/src/vnd/vnodeBufPool.c:  pPool = taosMemoryMalloc(sizeof(SVBufPool) + size);
dnode/vnode/src/vnd/vnodeBufPool.c:    pPool->lock = taosMemoryMalloc(sizeof(TdThreadSpinlock));
dnode/vnode/src/vnd/vnodeBufPool.c:      taosMemoryFree(pPool);
dnode/vnode/src/vnd/vnodeBufPool.c:      taosMemoryFree((void *)pPool->lock);
dnode/vnode/src/vnd/vnodeBufPool.c:      taosMemoryFree(pPool);
dnode/vnode/src/vnd/vnodeBufPool.c:    taosMemoryFree((void *)pPool->lock);
dnode/vnode/src/vnd/vnodeBufPool.c:  taosMemoryFree(pPool);
dnode/vnode/src/vnd/vnodeBufPool.c:    taosMemoryFree(pNode);
dnode/vnode/src/vnd/vnodeBufPool.c:    pNode = taosMemoryMalloc(sizeof(*pNode) + size);
dnode/vnode/src/vnd/vnodeBufPool.c:    pNode = taosMemoryMalloc(sizeof(*pNode) + size);
dnode/vnode/src/vnd/vnodeBufPool.c:  //   taosMemoryFree(pNode);
dnode/vnode/src/vnd/vnodeSync.c:  SRpcMsg **pMsgArr = taosMemoryCalloc(numOfMsgs, sizeof(SRpcMsg *));
dnode/vnode/src/vnd/vnodeSync.c:  bool     *pIsWeakArr = taosMemoryCalloc(numOfMsgs, sizeof(bool));
dnode/vnode/src/vnd/vnodeSync.c:  taosMemoryFree(pMsgArr);
dnode/vnode/src/vnd/vnodeSync.c:  taosMemoryFree(pIsWeakArr);
dnode/vnode/src/vnd/vnodeSync.c:  SSyncFSM *pFsm = taosMemoryCalloc(1, sizeof(SSyncFSM));
dnode/vnode/src/vnd/vnodeAsync.c:      taosMemoryFree(task->channel);
dnode/vnode/src/vnd/vnodeAsync.c:    taosMemoryFree(task);
dnode/vnode/src/vnd/vnodeAsync.c:  (*async) = (SVAsync *)taosMemoryCalloc(1, sizeof(SVAsync) + strlen(label) + 1);
dnode/vnode/src/vnd/vnodeAsync.c:    taosMemoryFree(*async);
dnode/vnode/src/vnd/vnodeAsync.c:    taosMemoryFree(*async);
dnode/vnode/src/vnd/vnodeAsync.c:    taosMemoryFree(channel);
dnode/vnode/src/vnd/vnodeAsync.c:  taosMemoryFree(*async);
dnode/vnode/src/vnd/vnodeAsync.c:  SVATask *task = (SVATask *)taosMemoryCalloc(1, sizeof(SVATask));
dnode/vnode/src/vnd/vnodeAsync.c:      taosMemoryFree(task);
dnode/vnode/src/vnd/vnodeAsync.c:    taosMemoryFree(task);
dnode/vnode/src/vnd/vnodeAsync.c:      taosMemoryFree(task);
dnode/vnode/src/vnd/vnodeAsync.c:  SVAChannel *channel = (SVAChannel *)taosMemoryMalloc(sizeof(SVAChannel));
dnode/vnode/src/vnd/vnodeAsync.c:    taosMemoryFree(channel);
dnode/vnode/src/vnd/vnodeAsync.c:      taosMemoryFree(channel);
dnode/vnode/src/vnd/vnodeAsync.c:          taosMemoryFree(task);
dnode/vnode/src/vnd/vnodeAsync.c:        taosMemoryFree(channel);
dnode/qnode/src/qnode.c:  SQnode *pQnode = taosMemoryCalloc(1, sizeof(SQnode));
dnode/qnode/src/qnode.c:    taosMemoryFreeClear(pQnode);
dnode/qnode/src/qnode.c:  taosMemoryFree(pQnode);
dnode/mgmt/node_mgmt/src/dmMgmt.c:    taosMemoryFreeClear(machineId);
dnode/mgmt/node_mgmt/src/dmMgmt.c:    taosMemoryFreeClear(pWrapper->path);
dnode/mgmt/test/sut/src/client.cpp:    taosMemoryFree(this->pRsp);
dnode/mgmt/test/sut/src/client.cpp:  this->pRsp = (SRpcMsg*)taosMemoryCalloc(1, sizeof(SRpcMsg));
dnode/mgmt/mgmt_mnode/src/mmInt.c:  taosMemoryFree(pMgmt);
dnode/mgmt/mgmt_mnode/src/mmInt.c:  SMnodeMgmt *pMgmt = taosMemoryCalloc(1, sizeof(SMnodeMgmt));
dnode/mgmt/mgmt_mnode/src/mmFile.c:  pData = taosMemoryMalloc(size + 1);
dnode/mgmt/mgmt_mnode/src/mmFile.c:  if (pData != NULL) taosMemoryFree(pData);
dnode/mgmt/mgmt_mnode/src/mmFile.c:  if (buffer != NULL) taosMemoryFree(buffer);
dnode/mgmt/exe/dmMain.c:  global.envCmd = taosMemoryMalloc((argc - 1) * sizeof(char *));
dnode/mgmt/exe/dmMain.c:  if (global.envCmd != NULL) taosMemoryFreeClear(global.envCmd);
dnode/mgmt/exe/dmMain.c:    int32_t code = taosMemoryDbgInit();
dnode/mgmt/mgmt_qnode/src/qmInt.c:  taosMemoryFree(pMgmt);
dnode/mgmt/mgmt_qnode/src/qmInt.c:  SQnodeMgmt *pMgmt = taosMemoryCalloc(1, sizeof(SQnodeMgmt));
dnode/mgmt/node_util/src/dmEps.c:      char* tmp = taosMemoryMalloc(scopeLen + 1);
dnode/mgmt/node_util/src/dmEps.c:      char** array = taosMemoryMalloc(sizeof(char*) * (count + 1));
dnode/mgmt/node_util/src/dmEps.c:          taosMemoryFree(tmp);
dnode/mgmt/node_util/src/dmEps.c:          taosMemoryFree(array);
dnode/mgmt/node_util/src/dmEps.c:      taosMemoryFree(tmp);
dnode/mgmt/node_util/src/dmEps.c:      taosMemoryFree(array);
dnode/mgmt/node_util/src/dmEps.c:  content = taosMemoryMalloc(size + 1);
dnode/mgmt/node_util/src/dmEps.c:  if (content != NULL) taosMemoryFree(content);
dnode/mgmt/node_util/src/dmEps.c:  if (buffer != NULL) taosMemoryFree(buffer);
dnode/mgmt/node_util/src/dmEps.c:  content = taosMemoryMalloc(size + 1);
dnode/mgmt/node_util/src/dmEps.c:  if (content != NULL) taosMemoryFree(content);
dnode/mgmt/node_util/src/dmFile.c:  content = taosMemoryMalloc(size + 1);
dnode/mgmt/node_util/src/dmFile.c:  if (content != NULL) taosMemoryFree(content);
dnode/mgmt/node_util/src/dmFile.c:  if (buffer != NULL) taosMemoryFree(buffer);
dnode/mgmt/node_util/src/dmFile.c:  result = taosMemoryMalloc(len);
dnode/mgmt/node_util/src/dmFile.c:  if(result != NULL) taosMemoryFree(result);
dnode/mgmt/node_util/src/dmFile.c:  content = taosMemoryMalloc(size);
dnode/mgmt/node_util/src/dmFile.c:  result = taosMemoryMalloc(len);
dnode/mgmt/node_util/src/dmFile.c:  if(result != NULL) taosMemoryFree(result);
dnode/mgmt/node_util/src/dmFile.c:  if(content != NULL) taosMemoryFree(content);
dnode/mgmt/node_util/src/dmFile.c:  taosMemoryFree(encryptCode);
dnode/mgmt/node_util/src/dmFile.c:  taosMemoryFree(machineId);
dnode/mgmt/node_util/src/dmFile.c:  content = taosMemoryMalloc(size + 1);
dnode/mgmt/node_util/src/dmFile.c:  taosMemoryFreeClear(machineId);
dnode/mgmt/node_util/src/dmFile.c:  taosMemoryFreeClear(content);
dnode/mgmt/node_util/src/dmFile.c:  taosMemoryFreeClear(encryptKey);
dnode/mgmt/node_util/src/dmFile.c:  if (content != NULL) taosMemoryFree(content);
dnode/mgmt/node_util/src/dmFile.c:  if (encryptKey != NULL) taosMemoryFree(encryptKey);
dnode/mgmt/node_util/src/dmFile.c:  if (machineId != NULL) taosMemoryFree(machineId);
dnode/mgmt/mgmt_dnode/src/dmHandle.c:  SSDataBlock *        pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
dnode/mgmt/mgmt_dnode/src/dmWorker.c:        taosMemoryTrim(0);
dnode/mgmt/mgmt_dnode/src/dmWorker.c:    taosMemoryFree(pMsg);
dnode/mgmt/mgmt_dnode/src/dmInt.c:  SDnodeMgmt *pMgmt = taosMemoryCalloc(1, sizeof(SDnodeMgmt));
dnode/mgmt/mgmt_dnode/src/dmInt.c:  taosMemoryFree(pMgmt);
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(ppVnodes);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  taosMemoryFree(pVnode->path);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  taosMemoryFree(pVnode);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  SVnodeObj *pVnode = taosMemoryCalloc(1, sizeof(SVnodeObj));
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(pVnode);
dnode/mgmt/mgmt_vnode/src/vmInt.c:      taosMemoryFree(pVnode->path);
dnode/mgmt/mgmt_vnode/src/vmInt.c:      taosMemoryFree(pVnode);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  SVnodeThread *threads = taosMemoryCalloc(threadNum, sizeof(SVnodeThread));
dnode/mgmt/mgmt_vnode/src/vmInt.c:    threads[t].pCfgs = taosMemoryCalloc(vnodesPerThread, sizeof(SWrapperCfg));
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(pThread->pCfgs);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  taosMemoryFree(threads);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  taosMemoryFree(pCfgs);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  SVnodeThread *threads = taosMemoryCalloc(threadNum, sizeof(SVnodeThread));
dnode/mgmt/mgmt_vnode/src/vmInt.c:    threads[t].ppVnodes = taosMemoryCalloc(vnodesPerThread, sizeof(SVnode *));
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(pThread->ppVnodes);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  taosMemoryFree(threads);
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(ppVnodes);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  taosMemoryFree(pMgmt);
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(ppVnodes);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  SVnodeMgmt *pMgmt = taosMemoryCalloc(1, sizeof(SVnodeMgmt));
dnode/mgmt/mgmt_vnode/src/vmInt.c:  SVnodeThread *threads = taosMemoryCalloc(threadNum, sizeof(SVnodeThread));
dnode/mgmt/mgmt_vnode/src/vmInt.c:    threads[t].ppVnodes = taosMemoryCalloc(vnodesPerThread, sizeof(SVnode *));
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(pThread->ppVnodes);
dnode/mgmt/mgmt_vnode/src/vmInt.c:  taosMemoryFree(threads);
dnode/mgmt/mgmt_vnode/src/vmInt.c:    taosMemoryFree(ppVnodes);
dnode/mgmt/mgmt_vnode/src/vmFile.c:  SVnodeObj **pVnodes = taosMemoryCalloc(size, sizeof(SVnodeObj *));
dnode/mgmt/mgmt_vnode/src/vmFile.c:    pCfgs = taosMemoryCalloc(vnodesNum, sizeof(SWrapperCfg));
dnode/mgmt/mgmt_vnode/src/vmFile.c:  if (*ppCfgs == NULL) taosMemoryFree(pCfgs);
dnode/mgmt/mgmt_vnode/src/vmFile.c:  pData = taosMemoryMalloc(size + 1);
dnode/mgmt/mgmt_vnode/src/vmFile.c:  if (pData != NULL) taosMemoryFree(pData);
dnode/mgmt/mgmt_vnode/src/vmFile.c:  if (buffer != NULL) taosMemoryFree(buffer);
dnode/mgmt/mgmt_vnode/src/vmFile.c:    taosMemoryFree(ppVnodes);
dnode/mgmt/mgmt_snode/src/smWorker.c:    SMultiWorker *pWriteWorker = taosMemoryMalloc(sizeof(SMultiWorker));
dnode/mgmt/mgmt_snode/src/smWorker.c:    taosMemoryFree(pWorker);
dnode/mgmt/mgmt_snode/src/smInt.c:  taosMemoryFree(pMgmt);
dnode/mgmt/mgmt_snode/src/smInt.c:  SSnodeMgmt *pMgmt = taosMemoryCalloc(1, sizeof(SSnodeMgmt));
libs/index/test/index_executor_tests.cpp:    SSDataBlock *res = (SSDataBlock *)taosMemoryCalloc(1, sizeof(SSDataBlock));
libs/index/test/index_executor_tests.cpp:    vnode->datum.p = (char *)taosMemoryMalloc(varDataTLen(value));
libs/index/test/fstTest.cc:    char* buf = (char*)taosMemoryCalloc(1, sizeof(char) * _size);
libs/index/test/fstTest.cc:    taosMemoryFree(buf);
libs/index/test/fstTest.cc:  // taosMemoryFree(ctx);
libs/index/test/fstTest.cc:    // taosMemoryFree(ctx);
libs/index/test/fstTest.cc:    // taosMemoryFree(ctx);
libs/index/test/fstTest.cc:  SIndex* index = (SIndex*)taosMemoryCalloc(1, sizeof(SIndex));
libs/index/test/fstUT.cc:    char* buf = (char*)taosMemoryCalloc(1, sizeof(char) * _size);
libs/index/test/fstUT.cc:    taosMemoryFreeClear(buf);
libs/index/test/indexTests.cc:    char* buf = (char*)taosMemoryCalloc(1, sizeof(char) * _size);
libs/index/test/indexTests.cc:    taosMemoryFree(buf);
libs/index/test/indexTests.cc:  taosMemoryFree(ctx);
libs/index/test/indexTests.cc:  TFileValue* tv = (TFileValue*)taosMemoryCalloc(1, sizeof(TFileValue));
libs/index/test/indexTests.cc:  tv->colVal = (char*)taosMemoryCalloc(1, vlen);
libs/index/test/indexTests.cc:  taosMemoryFree(tv->colVal);
libs/index/test/indexTests.cc:  taosMemoryFree(tv);
libs/index/src/indexFstFile.c:  taosMemoryFree(value);
libs/index/src/indexFstFile.c:        SDataBlock* blk = taosMemoryCalloc(1, cacheMemSize);
libs/index/src/indexFstFile.c:          taosMemoryFree(blk);
libs/index/src/indexFstFile.c:  IFileCtx* ctx = taosMemoryCalloc(1, sizeof(IFileCtx));
libs/index/src/indexFstFile.c:      ctx->file.wBuf = taosMemoryCalloc(1, ctx->file.wBufCap);
libs/index/src/indexFstFile.c:    ctx->mem.buf = taosMemoryCalloc(1, sizeof(char) * capacity);
libs/index/src/indexFstFile.c:    taosMemoryFree(ctx->mem.buf);
libs/index/src/indexFstFile.c:  taosMemoryFree(ctx);
libs/index/src/indexFstFile.c:    taosMemoryFree(ctx->mem.buf);
libs/index/src/indexFstFile.c:    taosMemoryFreeClear(ctx->file.wBuf);
libs/index/src/indexFstFile.c:  taosMemoryFree(ctx);
libs/index/src/indexFstFile.c:  IdxFstFile* cw = taosMemoryCalloc(1, sizeof(IdxFstFile));
libs/index/src/indexFstFile.c:  taosMemoryFree(cw);
libs/index/src/indexFstFile.c:  uint8_t* buf = taosMemoryCalloc(8, sizeof(uint8_t));
libs/index/src/indexFstFile.c:  taosMemoryFree(buf);
libs/index/src/indexTfile.c:  TFileCache* tcache = taosMemoryCalloc(1, sizeof(TFileCache));
libs/index/src/indexTfile.c:  taosMemoryFree(tcache);
libs/index/src/indexTfile.c:  TFileReader* reader = taosMemoryCalloc(1, sizeof(TFileReader));
libs/index/src/indexTfile.c:  taosMemoryFree(reader);
libs/index/src/indexTfile.c:    taosMemoryFree(p);
libs/index/src/indexTfile.c:  taosMemoryFree(p);
libs/index/src/indexTfile.c:      char* tBuf = taosMemoryCalloc(1, sz + 1);
libs/index/src/indexTfile.c:      taosMemoryFree(tBuf);
libs/index/src/indexTfile.c:  taosMemoryFree(p);
libs/index/src/indexTfile.c:  TFileWriter* tw = taosMemoryCalloc(1, sizeof(TFileWriter));
libs/index/src/indexTfile.c:  char*   buf = taosMemoryCalloc(1, cap);
libs/index/src/indexTfile.c:      char* t = (char*)taosMemoryRealloc(buf, cap);
libs/index/src/indexTfile.c:        taosMemoryFree(buf);
libs/index/src/indexTfile.c:  taosMemoryFree(buf);
libs/index/src/indexTfile.c:  taosMemoryFree(tw);
libs/index/src/indexTfile.c:  taosMemoryFree(tw);
libs/index/src/indexTfile.c:  IndexTFile* tfile = taosMemoryCalloc(1, sizeof(IndexTFile));
libs/index/src/indexTfile.c:  taosMemoryFree(tfile);
libs/index/src/indexTfile.c:  colVal = taosMemoryCalloc(1, sz + 1);
libs/index/src/indexTfile.c:  TFileFstIter* iter = taosMemoryCalloc(1, sizeof(TFileFstIter));
libs/index/src/indexTfile.c:  Iterate* iter = taosMemoryCalloc(1, sizeof(Iterate));
libs/index/src/indexTfile.c:    taosMemoryFree(iter);
libs/index/src/indexTfile.c:  taosMemoryFree(tIter);
libs/index/src/indexTfile.c:  taosMemoryFree(iter);
libs/index/src/indexTfile.c:  TFileValue* tf = taosMemoryCalloc(1, sizeof(TFileValue));
libs/index/src/indexTfile.c:  taosMemoryFree(tf->colVal);
libs/index/src/indexTfile.c:  taosMemoryFree(tf);
libs/index/src/indexTfile.c:  char* buf = taosMemoryCalloc(1, fstSize);
libs/index/src/indexTfile.c:  taosMemoryFree(buf);
libs/index/src/indexTfile.c:    char*  buf = taosMemoryCalloc(1, len);
libs/index/src/indexTfile.c:  taosMemoryFree(p);
libs/index/src/indexFilter.c:  taosMemoryFree(param->condValue);
libs/index/src/indexFilter.c:  char *tv = taosMemoryCalloc(1, valLen + 1);
libs/index/src/indexFilter.c:  char *tv = taosMemoryCalloc(1, valLen + 1);
libs/index/src/indexFilter.c:  SIFParam *paramList = taosMemoryCalloc(nParam, sizeof(SIFParam));
libs/index/src/indexFilter.c:  taosMemoryFree(paramList);
libs/index/src/indexFilter.c:  SIFParam *tParams = taosMemoryCalloc(nodeList->length, sizeof(SIFParam));
libs/index/src/indexFilter.c:  taosMemoryFree(tParams);
libs/index/src/indexFilter.c:  taosMemoryFree(params);
libs/index/src/indexFilter.c:  taosMemoryFree(params);
libs/index/src/indexFstNode.c:  FstBuilderNode* bn = taosMemoryMalloc(sizeof(FstBuilderNode));
libs/index/src/indexFstNode.c:  taosMemoryFree(node);
libs/index/src/indexFstNode.c:  FstBuilderNode* node = taosMemoryMalloc(sizeof(FstBuilderNode));
libs/index/src/indexUtil.c:  MergeIndex *mi = taosMemoryCalloc(sz, sizeof(MergeIndex));
libs/index/src/indexUtil.c:  taosMemoryFreeClear(mi);
libs/index/src/indexUtil.c:  MergeIndex *mi = taosMemoryCalloc(sz, sizeof(MergeIndex));
libs/index/src/indexUtil.c:  taosMemoryFreeClear(mi);
libs/index/src/indexUtil.c:  SIdxTRslt *tr = taosMemoryCalloc(1, sizeof(SIdxTRslt));
libs/index/src/indexUtil.c:  taosMemoryFree(tr);
libs/index/src/indexFstUtil.c:  FstString* str = (FstString*)taosMemoryMalloc(sizeof(FstString));
libs/index/src/indexFstUtil.c:  str->data = taosMemoryMalloc(len * sizeof(uint8_t));
libs/index/src/indexFstUtil.c:  uint8_t* buf = taosMemoryMalloc(sizeof(uint8_t) * tlen);
libs/index/src/indexFstUtil.c:  FstString* str = taosMemoryMalloc(sizeof(FstString));
libs/index/src/indexFstUtil.c:    taosMemoryFree(str->data);
libs/index/src/indexFstUtil.c:    taosMemoryFree(str);
libs/index/src/indexFstRegex.c:  FstRegex *regex = taosMemoryCalloc(1, sizeof(FstRegex));
libs/index/src/indexFstRegex.c:  taosMemoryFree(regex->orig);
libs/index/src/indexFstRegex.c:  taosMemoryFree(regex);
libs/index/src/indexFstSparse.c:  FstSparseSet *ss = taosMemoryCalloc(1, sizeof(FstSparseSet));
libs/index/src/indexFstSparse.c:  ss->dense = (int32_t *)taosMemoryMalloc(sz * sizeof(int32_t));
libs/index/src/indexFstSparse.c:  ss->sparse = (int32_t *)taosMemoryMalloc(sz * sizeof(int32_t));
libs/index/src/indexFstSparse.c:  taosMemoryFree(ss->dense);
libs/index/src/indexFstSparse.c:  taosMemoryFree(ss->sparse);
libs/index/src/indexFstSparse.c:  taosMemoryFree(ss);
libs/index/src/indexFst.c:  FstUnFinishedNodes* nodes = taosMemoryMalloc(sizeof(FstUnFinishedNodes));
libs/index/src/indexFst.c:  taosMemoryFree(b->last);
libs/index/src/indexFst.c:  taosMemoryFree(nodes);
libs/index/src/indexFst.c:  FstBuilderNode* node = taosMemoryMalloc(sizeof(FstBuilderNode));
libs/index/src/indexFst.c:  // taosMemoryFree(un->last); // TODO add func FstLastTransitionFree()
libs/index/src/indexFst.c:  // FstLastTransition *trn = taosMemoryMalloc(sizeof(FstLastTransition));
libs/index/src/indexFst.c:    FstBuilderNode* n = taosMemoryMalloc(sizeof(FstBuilderNode));
libs/index/src/indexFst.c:    // FstLastTransition *trn = taosMemoryMalloc(sizeof(FstLastTransition));
libs/index/src/indexFst.c:    uint8_t* index = (uint8_t*)taosMemoryMalloc(sizeof(uint8_t) * 256);
libs/index/src/indexFst.c:    taosMemoryFree(index);
libs/index/src/indexFst.c:  FstNode* n = (FstNode*)taosMemoryMalloc(sizeof(FstNode));
libs/index/src/indexFst.c:  taosMemoryFree(node);
libs/index/src/indexFst.c:  FstTransitions* t = taosMemoryMalloc(sizeof(FstTransitions));
libs/index/src/indexFst.c:  FstBuilder* b = taosMemoryMalloc(sizeof(FstBuilder));
libs/index/src/indexFst.c:  taosMemoryFree(b);
libs/index/src/indexFst.c:  FstLastTransition* trn = taosMemoryMalloc(sizeof(FstLastTransition));
libs/index/src/indexFst.c:void fstLastTransitionDestroy(FstLastTransition* trn) { taosMemoryFree(trn); }
libs/index/src/indexFst.c:  Fst* fst = (Fst*)taosMemoryCalloc(1, sizeof(Fst));
libs/index/src/indexFst.c:  fst->meta = (FstMeta*)taosMemoryMalloc(sizeof(FstMeta));
libs/index/src/indexFst.c:  FstSlice* s = taosMemoryCalloc(1, sizeof(FstSlice));
libs/index/src/indexFst.c:  taosMemoryFree(fst->meta);
libs/index/src/indexFst.c:  taosMemoryFree(fst);
libs/index/src/indexFst.c:    taosMemoryFree(fst->meta);
libs/index/src/indexFst.c:    taosMemoryFree(fst->data);
libs/index/src/indexFst.c:  taosMemoryFree(fst);
libs/index/src/indexFst.c:  FstBoundWithData* b = taosMemoryCalloc(1, sizeof(FstBoundWithData));
libs/index/src/indexFst.c:void fstBoundDestroy(FstBoundWithData* bound) { taosMemoryFree(bound); }
libs/index/src/indexFst.c:  FStmSt* sws = taosMemoryCalloc(1, sizeof(FStmSt));
libs/index/src/indexFst.c:  taosMemoryFree(sws);
libs/index/src/indexFst.c:      taosMemoryFree(trans);
libs/index/src/indexFst.c:    uint8_t* buf = (uint8_t*)taosMemoryMalloc(isz * sizeof(uint8_t));
libs/index/src/indexFst.c:      taosMemoryFreeClear(buf);
libs/index/src/indexFst.c:      taosMemoryFreeClear(buf);
libs/index/src/indexFst.c:    taosMemoryFreeClear(buf);
libs/index/src/indexFst.c:  FStmStRslt* result = taosMemoryCalloc(1, sizeof(FStmStRslt));
libs/index/src/indexFst.c:  taosMemoryFree(result);
libs/index/src/indexFst.c:  FStmBuilder* b = taosMemoryCalloc(1, sizeof(FStmBuilder));
libs/index/src/indexFst.c:  taosMemoryFreeClear(b->min);
libs/index/src/indexFst.c:  taosMemoryFreeClear(b->max);
libs/index/src/indexFst.c:  taosMemoryFree(b);
libs/index/src/indexFstRegister.c:  FstRegistry* registry = taosMemoryMalloc(sizeof(FstRegistry));
libs/index/src/indexFstRegister.c:    taosMemoryFree(registry);
libs/index/src/indexFstRegister.c:  taosMemoryFree(registry);
libs/index/src/indexFstRegister.c:  FstRegistryEntry* entry = taosMemoryMalloc(sizeof(FstRegistryEntry));
libs/index/src/indexFstRegister.c:void fstRegistryEntryDestroy(FstRegistryEntry* entry) { taosMemoryFree(entry); }
libs/index/src/indexComm.c:  char*   buf = (char*)taosMemoryCalloc(1, sz);
libs/index/src/indexComm.c:  char*   buf = (char*)taosMemoryCalloc(1, sz);
libs/index/src/indexComm.c:  char*   buf = (char*)taosMemoryCalloc(1, sz);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, bufSize + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/indexComm.c:      *dst = taosMemoryCalloc(1, tlen + 1);
libs/index/src/index.c:  taosMemoryFreeClear(indexQhandle);
libs/index/src/index.c:  SIndex* idx = taosMemoryCalloc(1, sizeof(SIndex));
libs/index/src/index.c:  taosMemoryFree(idx->path);
libs/index/src/index.c:  taosMemoryFree(idx);
libs/index/src/index.c:  SIndexOpts* opts = taosMemoryCalloc(1, sizeof(SIndexOpts));
libs/index/src/index.c:void indexOptsDestroy(SIndexOpts* opts) { return taosMemoryFree(opts); }
libs/index/src/index.c:  SIndexMultiTermQuery* mtq = (SIndexMultiTermQuery*)taosMemoryMalloc(sizeof(SIndexMultiTermQuery));
libs/index/src/index.c:  taosMemoryFree(pQuery);
libs/index/src/index.c:  SIndexTerm* tm = (SIndexTerm*)taosMemoryCalloc(1, (sizeof(SIndexTerm)));
libs/index/src/index.c:  tm->colName = (char*)taosMemoryCalloc(1, nColName + 1);
libs/index/src/index.c:  taosMemoryFree(p->colName);
libs/index/src/index.c:  taosMemoryFree(p->colVal);
libs/index/src/index.c:  taosMemoryFree(p);
libs/index/src/index.c:  taosMemoryFree(value->colVal);
libs/index/src/index.c:    taosMemoryFree(tw);
libs/index/src/indexCache.c:  CacheTerm* pCt = taosMemoryCalloc(1, sizeof(CacheTerm));
libs/index/src/indexCache.c:  taosMemoryFree(pCt);
libs/index/src/indexCache.c:  CacheTerm* pCt = taosMemoryCalloc(1, sizeof(CacheTerm));
libs/index/src/indexCache.c:  taosMemoryFree(pCt);
libs/index/src/indexCache.c:  CacheTerm* pCt = taosMemoryCalloc(1, sizeof(CacheTerm));
libs/index/src/indexCache.c:  taosMemoryFree(pCt);
libs/index/src/indexCache.c:  taosMemoryFree(exBuf);
libs/index/src/indexCache.c:  CacheTerm* pCt = taosMemoryCalloc(1, sizeof(CacheTerm));
libs/index/src/indexCache.c:        char* p = taosMemoryCalloc(1, strlen(c->colVal) + 1);
libs/index/src/indexCache.c:        taosMemoryFree(p);
libs/index/src/indexCache.c:  taosMemoryFree(pCt);
libs/index/src/indexCache.c:  taosMemoryFree(exBuf);
libs/index/src/indexCache.c:  IndexCache* cache = taosMemoryCalloc(1, sizeof(IndexCache));
libs/index/src/indexCache.c:      taosMemoryFree(ct->colVal);
libs/index/src/indexCache.c:      taosMemoryFree(ct);
libs/index/src/indexCache.c:  taosMemoryFree(pCache->colName);
libs/index/src/indexCache.c:  taosMemoryFree(pCache);
libs/index/src/indexCache.c:  Iterate* iter = taosMemoryCalloc(1, sizeof(Iterate));
libs/index/src/indexCache.c:  taosMemoryFree(iter);
libs/index/src/indexCache.c:    schedMsg.thandle = taosMemoryMalloc(1);
libs/index/src/indexCache.c:  CacheTerm* ct = taosMemoryCalloc(1, sizeof(CacheTerm));
libs/index/src/indexCache.c:    ct->colVal = (char*)taosMemoryCalloc(1, sizeof(char) * (term->nColVal + 1));
libs/index/src/indexCache.c:    taosMemoryFree(tbl);
libs/index/src/indexCache.c:  taosMemoryFree(ct->colVal);
libs/index/src/indexCache.c:  taosMemoryFree(ct);
libs/index/src/indexCache.c:  MemTable* tbl = taosMemoryCalloc(1, sizeof(MemTable));
libs/index/src/indexCache.c:  taosMemoryFree(msg->thandle);
libs/index/src/indexFstAutomation.c:  StartWithStateValue* sv = taosMemoryCalloc(1, sizeof(StartWithStateValue));
libs/index/src/indexFstAutomation.c:    sv->ptr = (char*)taosMemoryCalloc(1, len + 1);
libs/index/src/indexFstAutomation.c:    taosMemoryFree(sv->ptr);
libs/index/src/indexFstAutomation.c:  taosMemoryFree(sv);
libs/index/src/indexFstAutomation.c:  StartWithStateValue* nsv = taosMemoryCalloc(1, sizeof(StartWithStateValue));
libs/index/src/indexFstAutomation.c:    nsv->ptr = (char*)taosMemoryCalloc(1, len + 1);
libs/index/src/indexFstAutomation.c:  FAutoCtx* ctx = taosMemoryCalloc(1, sizeof(FAutoCtx));
libs/index/src/indexFstAutomation.c:  taosMemoryFree(ctx->data);
libs/index/src/indexFstAutomation.c:  taosMemoryFree(ctx);
libs/index/src/indexFstDfa.c:  FstDfaBuilder *builder = taosMemoryCalloc(1, sizeof(FstDfaBuilder));
libs/index/src/indexFstDfa.c:  taosMemoryFree(builder);
libs/index/src/indexFstDfa.c:  FstDfa *dfa = taosMemoryCalloc(1, sizeof(FstDfa));
libs/tdb/test/tdbPageRecycleTest.cpp:  SPoolMem *pPool = (SPoolMem *)taosMemoryMalloc(sizeof(*pPool));
libs/tdb/test/tdbPageRecycleTest.cpp:    taosMemoryFree(pMem);
libs/tdb/test/tdbPageRecycleTest.cpp:  taosMemoryFree(pPool);
libs/tdb/test/tdbPageRecycleTest.cpp:  pMem = (SPoolMem *)taosMemoryMalloc(sizeof(*pMem) + size);
libs/tdb/test/tdbPageRecycleTest.cpp:  taosMemoryFree(pMem);
libs/tdb/test/tdbTest.cpp:  SPoolMem *pPool = (SPoolMem *)taosMemoryMalloc(sizeof(*pPool));
libs/tdb/test/tdbTest.cpp:    taosMemoryFree(pMem);
libs/tdb/test/tdbTest.cpp:  taosMemoryFree(pPool);
libs/tdb/test/tdbTest.cpp:  pMem = (SPoolMem *)taosMemoryMalloc(sizeof(*pMem) + size);
libs/tdb/test/tdbTest.cpp:  taosMemoryFree(pMem);
libs/tdb/test/tdbTest.cpp:  void       *data = taosMemoryMalloc(dataSize);
libs/tdb/test/tdbExOVFLTest.cpp:  SPoolMem *pPool = (SPoolMem *)taosMemoryMalloc(sizeof(*pPool));
libs/tdb/test/tdbExOVFLTest.cpp:    taosMemoryFree(pMem);
libs/tdb/test/tdbExOVFLTest.cpp:  taosMemoryFree(pPool);
libs/tdb/test/tdbExOVFLTest.cpp:  pMem = (SPoolMem *)taosMemoryMalloc(sizeof(*pMem) + size);
libs/tdb/test/tdbExOVFLTest.cpp:  taosMemoryFree(pMem);
libs/tdb/test/tdbPageDefragmentTest.cpp:  SPoolMem *pPool = (SPoolMem *)taosMemoryMalloc(sizeof(*pPool));
libs/tdb/test/tdbPageDefragmentTest.cpp:    taosMemoryFree(pMem);
libs/tdb/test/tdbPageDefragmentTest.cpp:  taosMemoryFree(pPool);
libs/tdb/test/tdbPageDefragmentTest.cpp:  pMem = (SPoolMem *)taosMemoryMalloc(sizeof(*pMem) + size);
libs/tdb/test/tdbPageDefragmentTest.cpp:  taosMemoryFree(pMem);
libs/tdb/src/db/tdbPager.c:    buf = taosMemoryMalloc(pageSize);
libs/tdb/src/db/tdbPager.c:  if(encryptAlgorithm == DND_CA_SM4) taosMemoryFreeClear(buf);
libs/tdb/src/inc/tdbOs.h:#define tdbOsMalloc  taosMemoryMalloc
libs/tdb/src/inc/tdbOs.h:#define tdbOsCalloc  taosMemoryCalloc
libs/tdb/src/inc/tdbOs.h:#define tdbOsRealloc taosMemoryRealloc
libs/tdb/src/inc/tdbOs.h:#define tdbOsFree    taosMemoryFree
libs/geometry/test/geomRelationFuncTest.cpp:  SScalarParam *pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomRelationFuncTest.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomIoFuncTest.cpp:  SScalarParam *pInputMakePoint = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/geometry/test/geomFuncTestUtil.cpp:  sclParam->columnData = (SColumnInfoData *)taosMemoryCalloc(1, sizeof(SColumnInfoData));
libs/geometry/test/geomFuncTestUtil.cpp:    taosMemoryFree((sclParam + i)->columnData);
libs/geometry/test/geomFuncTestUtil.cpp:  taosMemoryFree(sclParam);
libs/geometry/test/geomFuncTestUtil.cpp:  *pSclParam = (SScalarParam *)taosMemoryCalloc(1, sizeof(SScalarParam));
libs/geometry/src/geosWrapper.c:  char *wktPatternWithSpace = taosMemoryCalloc(4, 1024);
libs/geometry/src/geosWrapper.c:  taosMemoryFree(wktPatternWithSpace);
libs/geometry/src/geomFunc.c:// need to call taosMemoryFree(*output) later
libs/geometry/src/geomFunc.c:  *output = taosMemoryCalloc(1, size + VARSTR_HEADER_SIZE);
libs/geometry/src/geomFunc.c:// need to call taosMemoryFree(*output) later
libs/geometry/src/geomFunc.c:  inputGeom = taosMemoryCalloc(1, varDataLen(input) + 1);
libs/geometry/src/geomFunc.c:  *output = taosMemoryCalloc(1, size + VARSTR_HEADER_SIZE);
libs/geometry/src/geomFunc.c:// need to call taosMemoryFree(*output) later
libs/geometry/src/geomFunc.c:  *output = taosMemoryCalloc(1, size + VARSTR_HEADER_SIZE);
libs/geometry/src/geomFunc.c:    taosMemoryFree(output);
libs/geometry/src/geomFunc.c:    taosMemoryFree(output);
libs/geometry/src/geomFunc.c:    taosMemoryFree(output);
libs/parser/test/mockCatalogService.h:  ~MockTableMeta() { taosMemoryFree(schema); }
libs/parser/test/mockCatalogService.cpp:        (STableMeta*)taosMemoryCalloc(1, sizeof(STableMeta) + sizeof(SSchema) * (numOfColumns + numOfTags));
libs/parser/test/mockCatalogService.cpp:        taosMemoryFree(index.expr);
libs/parser/test/mockCatalogService.cpp:    dst->reset((STableMeta*)taosMemoryCalloc(1, len));
libs/parser/test/mockCatalogService.cpp:          res.pRes = taosMemoryCalloc(1, sizeof(SVgroupInfo));
libs/parser/test/mockCatalogService.cpp:        res.pRes = taosMemoryCalloc(1, sizeof(SDbCfgInfo));
libs/parser/test/mockCatalogService.cpp:        res.pRes = taosMemoryCalloc(1, sizeof(SDbInfo));
libs/parser/test/mockCatalogService.cpp:        res.pRes = taosMemoryCalloc(1, sizeof(SUserAuthRes));
libs/parser/test/mockCatalogService.cpp:        res.pRes = taosMemoryCalloc(1, sizeof(SFuncInfo));
libs/parser/test/mockCatalogService.cpp:        res.pRes = taosMemoryCalloc(1, sizeof(STableCfg));
libs/parser/test/mockCatalogService.cpp:  taosMemoryFree(pRes->pRes);
libs/parser/test/mockCatalogService.cpp:  taosMemoryFree(pData->pSvrVer);
libs/parser/test/parTestUtil.cpp:    taosMemoryFree(pQuery);
libs/parser/test/parTestUtil.cpp:    taosMemoryFreeClear(pStr);
libs/parser/test/parTestUtil.cpp:        unique_ptr<SQuery*, void (*)(SQuery**)> query((SQuery**)taosMemoryCalloc(1, sizeof(SQuery*)), destroyQuery);
libs/parser/test/parTestUtil.cpp:        unique_ptr<SQuery*, void (*)(SQuery**)> query((SQuery**)taosMemoryCalloc(1, sizeof(SQuery*)), destroyQuery);
libs/parser/test/parTestUtil.cpp:      unique_ptr<SQuery*, void (*)(SQuery**)> query((SQuery**)taosMemoryCalloc(1, sizeof(SQuery*)), destroyQuery);
libs/parser/test/parTestUtil.cpp:    unique_ptr<SQuery*, void (*)(SQuery**)> query((SQuery**)taosMemoryCalloc(1, sizeof(SQuery*)), destroyQuery);
libs/parser/test/parTestUtil.cpp:    unique_ptr<SQuery*, void (*)(SQuery**)>         query((SQuery**)taosMemoryCalloc(1, sizeof(SQuery*)), destroyQuery);
libs/parser/test/parTestUtil.cpp:      unique_ptr<SQuery*, void (*)(SQuery**)> query((SQuery**)taosMemoryCalloc(1, sizeof(SQuery*)), destroyQuery);
libs/parser/test/mockCatalog.cpp:  *pCfg = (STableCfg*)taosMemoryCalloc(1, sizeof(STableCfg));
libs/parser/test/parInitialCTest.cpp:    SCmdMsgInfo* pCmdMsg = (SCmdMsgInfo*)taosMemoryMalloc(sizeof(SCmdMsgInfo));
libs/parser/test/parInitialCTest.cpp:    pCmdMsg->pMsg = taosMemoryMalloc(pCmdMsg->msgLen);
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(pCxt->pCmdMsg->pMsg);
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(pCxt->pCmdMsg);
libs/parser/src/parTranslater.c:        if (isHexChar) taosMemoryFree(data);
libs/parser/src/parTranslater.c:      pVal->datum.p = taosMemoryCalloc(1, size + VARSTR_HEADER_SIZE);
libs/parser/src/parTranslater.c:        if (isHexChar) taosMemoryFree(data);
libs/parser/src/parTranslater.c:      if (isHexChar) taosMemoryFree(data);
libs/parser/src/parTranslater.c:      pVal->datum.p = taosMemoryCalloc(1, len + VARSTR_HEADER_SIZE + 1);
libs/parser/src/parTranslater.c:      pVal->datum.p = taosMemoryCalloc(1, targetDt.bytes + 1);
libs/parser/src/parTranslater.c:  char* pStr = taosMemoryCalloc(1, 20);
libs/parser/src/parTranslater.c:  *pVgsInfo = taosMemoryCalloc(1, sizeof(SVgroupsInfo) + sizeof(SVgroupInfo) * vgroupNum);
libs/parser/src/parTranslater.c:  *pVgsInfo = taosMemoryCalloc(1, sizeof(SVgroupsInfo) + sizeof(SVgroupInfo) * ndnode);
libs/parser/src/parTranslater.c:  pRealTable->pVgroupList = taosMemoryCalloc(1, sizeof(SVgroupsInfo) + sizeof(SVgroupInfo));
libs/parser/src/parTranslater.c:        taosArrayDestroyP(pRealTable->tsmaTargetTbVgInfo, taosMemoryFree);
libs/parser/src/parTranslater.c:          SVgroupsInfo* pVgpsInfo = taosMemoryCalloc(1, sizeof(int32_t) + sizeof(SVgroupInfo));
libs/parser/src/parTranslater.c:          taosMemoryFree(pTableMeta);
libs/parser/src/parTranslater.c:        pVal->datum.p = taosMemoryCalloc(1, tbLen + VARSTR_HEADER_SIZE + 1);
libs/parser/src/parTranslater.c:    SVgroupsInfo* vgsInfo = taosMemoryMalloc(sizeof(SVgroupsInfo) + nTbls * sizeof(SVgroupInfo));
libs/parser/src/parTranslater.c:      taosMemoryFree(pInfo->pRealTable->pVgroupList);
libs/parser/src/parTranslater.c:      taosMemoryFree(vgsInfo);
libs/parser/src/parTranslater.c:          char*       pNewTbName = taosMemoryCalloc(1, TSDB_TABLE_FNAME_LEN + TSDB_TABLE_NAME_LEN + 1);
libs/parser/src/parTranslater.c:          vgsInfo = taosMemoryMalloc(sizeof(SVgroupsInfo) + nTbls * sizeof(SVgroupInfo));
libs/parser/src/parTranslater.c:            taosMemoryFree(vgsInfo);
libs/parser/src/parTranslater.c:        taosArrayDestroyP(pTbNames, taosMemoryFree);
libs/parser/src/parTranslater.c:  char*     cmdSql = taosMemoryMalloc(sqlLen);                   \
libs/parser/src/parTranslater.c:  pCxt->pCmdMsg = taosMemoryMalloc(sizeof(SCmdMsgInfo));
libs/parser/src/parTranslater.c:  pCxt->pCmdMsg->pMsg = taosMemoryMalloc(pCxt->pCmdMsg->msgLen);
libs/parser/src/parTranslater.c:  STableMeta* pMeta = taosMemoryCalloc(1, sizeof(STableMeta) + numOfField * sizeof(SSchema));
libs/parser/src/parTranslater.c:  taosMemoryFree(pTableMeta);
libs/parser/src/parTranslater.c:    createReq.pIpRanges = taosMemoryMalloc(createReq.numIpRanges * sizeof(SIpV4Range));
libs/parser/src/parTranslater.c:    alterReq.pIpRanges = taosMemoryMalloc(alterReq.numIpRanges * sizeof(SIpV4Range));
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(pMetaCache);
libs/parser/src/parTranslater.c:  pStmt->pReq = taosMemoryCalloc(1, sizeof(SMCreateSmaReq));
libs/parser/src/parTranslater.c:  taosMemoryFreeClear(pStmt->pReq);
libs/parser/src/parTranslater.c:    taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:    taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:      taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:  taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:    taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:    taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:  taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:      taosMemoryFree(res.schemaRes.pSchema);
libs/parser/src/parTranslater.c:    taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:  taosMemoryFree(pMeta);
libs/parser/src/parTranslater.c:      pStmt->pReq = taosMemoryMalloc(sizeof(createReq));
libs/parser/src/parTranslater.c:  taosMemoryFreeClear(pStmt->pReq);
libs/parser/src/parTranslater.c:      taosMemoryFreeClear(pMetaCache);
libs/parser/src/parTranslater.c:  *buf = taosMemoryCalloc(1, *len);
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(*buf);
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(*buf);
libs/parser/src/parTranslater.c:    taosMemoryFree(pTableMeta);
libs/parser/src/parTranslater.c:    taosMemoryFree(pTableMeta);
libs/parser/src/parTranslater.c:  pStmt->pCfg = taosMemoryCalloc(1, sizeof(SDbCfgInfo));
libs/parser/src/parTranslater.c:  pStmt->pDbCfg = taosMemoryCalloc(1, sizeof(SDbCfgInfo));
libs/parser/src/parTranslater.c:  pVal->literal = taosMemoryMalloc(TSDB_TABLE_FNAME_LEN + 1);
libs/parser/src/parTranslater.c:  taosMemoryFreeClear(pTableMeta);
libs/parser/src/parTranslater.c:    pStmt->pReq = taosMemoryCalloc(1, sizeof(SMCreateSmaReq));
libs/parser/src/parTranslater.c:  taosMemoryFreeClear(pStmt->pReq);
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  *pSchema = taosMemoryCalloc((*numOfCols), sizeof(SSchema));
libs/parser/src/parTranslater.c:  taosMemoryFreeClear(pTableMeta);
libs/parser/src/parTranslater.c:  req.ntb.schemaRow.pSchema = taosMemoryCalloc(req.ntb.schemaRow.nCols, sizeof(SSchema));
libs/parser/src/parTranslater.c:  void* buf = taosMemoryMalloc(tlen);
libs/parser/src/parTranslater.c:  SVgDataBlocks* pVgData = taosMemoryCalloc(1, sizeof(SVgDataBlocks));
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(pVg->pData);
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(pVg);
libs/parser/src/parTranslater.c:      taosMemoryFreeClear(p->pData);
libs/parser/src/parTranslater.c:      taosMemoryFreeClear(p->pData);
libs/parser/src/parTranslater.c:    taosMemoryFree(pTag);
libs/parser/src/parTranslater.c:  taosMemoryFreeClear(pSuperTableMeta);
libs/parser/src/parTranslater.c:  taosMemoryFreeClear(pTableMeta);
libs/parser/src/parTranslater.c:  void* buf = taosMemoryMalloc(tlen);
libs/parser/src/parTranslater.c:  SVgDataBlocks* pVgData = taosMemoryCalloc(1, sizeof(SVgDataBlocks));
libs/parser/src/parTranslater.c:    void* pMsg = taosMemoryMalloc(tlen);
libs/parser/src/parTranslater.c:    SVgDataBlocks* pVgData = taosMemoryCalloc(1, sizeof(SVgDataBlocks));
libs/parser/src/parTranslater.c:      taosMemoryFree(pMsg);
libs/parser/src/parTranslater.c:  taosMemoryFree(pReq->tbName);
libs/parser/src/parTranslater.c:  taosMemoryFree(pReq->colName);
libs/parser/src/parTranslater.c:  taosMemoryFree(pReq->colNewName);
libs/parser/src/parTranslater.c:  taosMemoryFree(pReq->tagName);
libs/parser/src/parTranslater.c:  taosMemoryFree(pReq->newComment);
libs/parser/src/parTranslater.c:      taosMemoryFreeClear(p->pData);
libs/parser/src/parTranslater.c:  taosMemoryFree(pTableMeta);
libs/parser/src/parTranslater.c:  void*   buf = taosMemoryMalloc(len);
libs/parser/src/parTranslater.c:  SVgDataBlocks* pVgData = taosMemoryCalloc(1, sizeof(SVgDataBlocks));
libs/parser/src/parTranslater.c:    taosMemoryFree(buf);
libs/parser/src/parTranslater.c:    taosMemoryFreeClear(pQuery->pResSchema);
libs/parser/src/parAstCreater.c:  taosMemoryFree(hint);
libs/parser/src/parAstCreater.c:    char*       pNewLiteral = taosMemoryCalloc(1, strlen(pVal->literal) + 2);
libs/parser/src/parAstCreater.c:    taosMemoryFree(pVal->literal);
libs/parser/src/parAstCreater.c:  taosMemoryFreeClear(ipCopy);
libs/parser/src/parAstCreater.c:  pCreateUser->pIpRanges = taosMemoryMalloc(pCreateUser->numIpRanges * sizeof(SIpV4Range));
libs/parser/src/parAstCreater.c:      pStmt->pIpRanges = taosMemoryMalloc(pStmt->numIpRanges * sizeof(SIpV4Range));
libs/parser/src/parser.c:    taosMemoryFreeClear(pVal->datum.p);
libs/parser/src/parser.c:      pVal->datum.p = taosMemoryCalloc(1, pVal->node.resType.bytes + VARSTR_HEADER_SIZE + 1);
libs/parser/src/parser.c:      pVal->datum.p = taosMemoryCalloc(1, pVal->node.resType.bytes + VARSTR_HEADER_SIZE + 1);
libs/parser/src/parser.c:      pVal->datum.p = taosMemoryCalloc(1, pVal->node.resType.bytes + VARSTR_HEADER_SIZE + 1);
libs/parser/src/parser.c:  taosMemoryFree(pRes->pCatalogReq);
libs/parser/src/parser.c:  taosMemoryFree(pCxt);
libs/parser/src/parInsertSml.c:  bool* pUseCols = taosMemoryCalloc(pBoundInfo->numOfCols, sizeof(bool));
libs/parser/src/parInsertSml.c:  taosMemoryFree(pUseCols);
libs/parser/src/parInsertSml.c:      void*   p = taosMemoryCalloc(1, kv->length * TSDB_NCHAR_SIZE);
libs/parser/src/parInsertSml.c:          taosMemoryFree(p);
libs/parser/src/parInsertSml.c:        taosMemoryFree(p);
libs/parser/src/parInsertSml.c:      taosMemoryFree(p->pData);
libs/parser/src/parInsertSml.c:      taosMemoryFreeClear(pCol->value.pData);
libs/parser/src/parInsertSml.c:    char* tmp = taosMemoryCalloc(kv->keyLen + 1, 1);
libs/parser/src/parInsertSml.c:      taosMemoryFree(tmp);
libs/parser/src/parInsertSml.c:    char* pUcs4 = taosMemoryCalloc(1, size);
libs/parser/src/parInsertSml.c:        taosMemoryFree(pUcs4);
libs/parser/src/parInsertSml.c:      taosMemoryFree(pUcs4);
libs/parser/src/parInsertSml.c:    pVal->value.pData = taosMemoryMalloc(kv->length);
libs/parser/src/parInsertSml.c:  pCreateTblReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
libs/parser/src/parInsertSml.c:  pCreateTblReq->ctb.stbName = taosMemoryCalloc(1, sTableNameLen + 1);
libs/parser/src/parInsertSml.c:        char*   pUcs4 = taosMemoryCalloc(1, pColSchema->bytes - VARSTR_HEADER_SIZE);
libs/parser/src/parInsertSml.c:        pVal->value.pData = taosMemoryMalloc(kv->length);
libs/parser/src/parInsertSml.c:  taosMemoryFree(pCreateTblReq);
libs/parser/src/parInsertStmt.c:  *pData = taosMemoryCalloc(1, sizeof(SSubmitTbData));
libs/parser/src/parInsertStmt.c:      char* tmp = taosMemoryCalloc(1, colLen + 1);
libs/parser/src/parInsertStmt.c:      taosMemoryFree(tmp);
libs/parser/src/parInsertStmt.c:        void*   p = taosMemoryCalloc(1, colLen * TSDB_NCHAR_SIZE);
libs/parser/src/parInsertStmt.c:            taosMemoryFree(p);
libs/parser/src/parInsertStmt.c:          taosMemoryFree(p);
libs/parser/src/parInsertStmt.c:    pDataBlock->pData->pCreateTbReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
libs/parser/src/parInsertStmt.c:      taosMemoryFreeClear(p->pData);
libs/parser/src/parInsertStmt.c:    dst->buffer = taosMemoryRealloc(dst->buffer, newBuflen);
libs/parser/src/parInsertStmt.c:    dst->length = taosMemoryRealloc(dst->length, sizeof(int32_t) * src->num);
libs/parser/src/parInsertStmt.c:      taosMemoryFreeClear(dst->buffer);
libs/parser/src/parInsertStmt.c:  taosMemoryFree(ncharBind.buffer);
libs/parser/src/parInsertStmt.c:  taosMemoryFree(ncharBind.length);
libs/parser/src/parInsertStmt.c:  taosMemoryFree(ncharBind.buffer);
libs/parser/src/parInsertStmt.c:  taosMemoryFree(ncharBind.length);
libs/parser/src/parInsertStmt.c:  taosMemoryFree(ncharBind.buffer);
libs/parser/src/parInsertStmt.c:  taosMemoryFree(ncharBind.length);
libs/parser/src/parInsertStmt.c:    *fields = taosMemoryCalloc(numOfBound, sizeof(TAOS_FIELD_E));
libs/parser/src/parInsertStmt.c:  *pDst = taosMemoryCalloc(1, sizeof(STableDataCxt));
libs/parser/src/parInsertStmt.c:    void* pNewMeta = taosMemoryMalloc(TABLE_META_SIZE(pCxt->pMeta));
libs/parser/src/parInsertStmt.c:    void* pNewColIdx = taosMemoryMalloc(pCxt->boundColsInfo.numOfBound * sizeof(*pCxt->boundColsInfo.pColIndex));
libs/parser/src/parInsertStmt.c:    SSubmitTbData* pNewTb = (SSubmitTbData*)taosMemoryMalloc(sizeof(SSubmitTbData));
libs/parser/src/parInsertStmt.c:    pBlock->pData->pCreateTbReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
libs/parser/src/parInsertUtil.c:  taosMemoryFreeClear(pBoundInfo->pColIndex);
libs/parser/src/parInsertUtil.c:  pInfo->pColIndex = taosMemoryCalloc(numOfBound, sizeof(int16_t));
libs/parser/src/parInsertUtil.c:void insDestroyBoundColInfo(SBoundColInfo* pInfo) { taosMemoryFreeClear(pInfo->pColIndex); }
libs/parser/src/parInsertUtil.c:  STableDataCxt* pTableCxt = taosMemoryCalloc(1, sizeof(STableDataCxt));
libs/parser/src/parInsertUtil.c:    pTableCxt->pData = taosMemoryCalloc(1, sizeof(SSubmitTbData));
libs/parser/src/parInsertUtil.c:  SSubmitTbData* pTmp = taosMemoryCalloc(1, sizeof(SSubmitTbData));
libs/parser/src/parInsertUtil.c:        taosMemoryFree(pTmp);
libs/parser/src/parInsertUtil.c:        taosMemoryFree(pTmp);
libs/parser/src/parInsertUtil.c:  taosMemoryFree(pSrc);
libs/parser/src/parInsertUtil.c:    taosMemoryFreeClear(pVal->value.pData);
libs/parser/src/parInsertUtil.c:  taosMemoryFreeClear(pTableCxt->pMeta);
libs/parser/src/parInsertUtil.c:    taosMemoryFree(pTableCxt->pData);
libs/parser/src/parInsertUtil.c:  taosMemoryFree(pTableCxt);
libs/parser/src/parInsertUtil.c:  taosMemoryFree(pVgCxt->pData);
libs/parser/src/parInsertUtil.c:  taosMemoryFree(pVgCxt);
libs/parser/src/parInsertUtil.c:    taosMemoryFreeClear(pTableCxt->pData);
libs/parser/src/parInsertUtil.c:  SVgroupDataCxt* pVgCxt = taosMemoryCalloc(1, sizeof(SVgroupDataCxt));
libs/parser/src/parInsertUtil.c:  pVgCxt->pData = taosMemoryCalloc(1, sizeof(SSubmitReq2));
libs/parser/src/parInsertUtil.c:    taosMemoryFree(pTableMeta);
libs/parser/src/parInsertUtil.c:    pBuf = taosMemoryMalloc(len);
libs/parser/src/parInsertUtil.c:    taosMemoryFree(pBuf);
libs/parser/src/parInsertUtil.c:  taosMemoryFree(pVg->pData);
libs/parser/src/parInsertUtil.c:  taosMemoryFree(pVg);
libs/parser/src/parInsertUtil.c:    SVgDataBlocks*  dst = taosMemoryCalloc(1, sizeof(SVgDataBlocks));
libs/parser/src/parUtil.c:  STableMeta* p = taosMemoryMalloc(size + schemaExtSize);
libs/parser/src/parUtil.c:      char*   tmp = taosMemoryCalloc(1, valLen * TSDB_NCHAR_SIZE);
libs/parser/src/parUtil.c:        taosMemoryFree(tmp);
libs/parser/src/parUtil.c:      taosMemoryFreeClear(p->pData);
libs/parser/src/parUtil.c:  *pMeta = taosMemoryCalloc(1, sizeof(STableMeta) + pViewMeta->numOfCols * sizeof(SSchema));
libs/parser/src/parUtil.c:static void destroySmaIndex(void* p) { taosMemoryFree(((STableIndexInfo*)p)->expr); }
libs/parser/src/parUtil.c:  STableCfg* pNew = taosMemoryMalloc(sizeof(*pNew));
libs/parser/src/parUtil.c:    pNew->pComment = taosMemoryCalloc(pNew->commentLen + 1, 1);
libs/parser/src/parUtil.c:    pNew->pTags = taosMemoryCalloc(pNew->tagsLen + 1, 1);
libs/parser/src/parUtil.c:  SSchema* pSchema = taosMemoryMalloc(schemaSize);
libs/parser/src/parUtil.c:    pSchemaExt = taosMemoryMalloc(schemaExtSize);
libs/parser/src/parAstParser.c:  void*   pParser = ParseAlloc((FMalloc)taosMemoryMalloc);
libs/parser/src/parAstParser.c:  ParseFree(pParser, (FFree)taosMemoryFree);
libs/parser/src/parInsertSql.c:  bool* pUseCols = taosMemoryCalloc(pBoundInfo->numOfCols, sizeof(bool));
libs/parser/src/parInsertSql.c:  taosMemoryFree(pUseCols);
libs/parser/src/parInsertSql.c:      taosMemoryFree(data);
libs/parser/src/parInsertSql.c:    *pData = taosMemoryCalloc(1, pToken->n);
libs/parser/src/parInsertSql.c:        val->pData = taosMemoryMalloc(size);
libs/parser/src/parInsertSql.c:      void* p = taosMemoryMalloc(realLen);
libs/parser/src/parInsertSql.c:          taosMemoryFree(p);
libs/parser/src/parInsertSql.c:        taosMemoryFree(p);
libs/parser/src/parInsertSql.c:    taosMemoryFreeClear(pStmt->pCreateTblReq);
libs/parser/src/parInsertSql.c:  pStmt->pCreateTblReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
libs/parser/src/parInsertSql.c:      pValue->datum.p = taosMemoryCalloc(1, pVal->nData + VARSTR_HEADER_SIZE);
libs/parser/src/parInsertSql.c:      taosMemoryFreeClear(p->pData);
libs/parser/src/parInsertSql.c:      pVal->value.pData = taosMemoryMalloc(pToken->n);
libs/parser/src/parInsertSql.c:      char* pUcs4 = taosMemoryMalloc(realLen);
libs/parser/src/parInsertSql.c:        taosMemoryFree(pUcs4);
libs/parser/src/parInsertSql.c:      pVal->value.pData = taosMemoryMalloc(pToken->n);
libs/parser/src/parInsertSql.c:        pVal->value.pData = taosMemoryMalloc(size);
libs/parser/src/parInsertSql.c:      taosMemoryFreeClear(pCol->value.pData);
libs/parser/src/parInsertSql.c:  pStbRowsCxt->pCreateCtbReq = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
libs/parser/src/parInsertSql.c:      taosMemoryFreeClear(p->pData);
libs/parser/src/parInsertSql.c:  taosMemoryFreeClear(pStbRowsCxt->pCreateCtbReq);
libs/parser/src/parInsertSql.c:  taosMemoryFree(pLine);
libs/parser/src/parInsertSql.c:  taosMemoryFreeClear(pStbRowsCxt->pCtbMeta);
libs/parser/src/parInsertSql.c:  taosMemoryFreeClear(pStbRowsCxt->pCreateCtbReq);
libs/parser/src/parInsertSql.c:  SStbRowsDataContext* pStbRowsCxt = taosMemoryCalloc(1, sizeof(SStbRowsDataContext));
libs/parser/src/parInsertSql.c:  taosMemoryFreeClear(pStmt->pTableMeta);
libs/parser/src/parInsertSql.c:  taosMemoryFreeClear(pStmt->pCreateTblReq);
libs/parser/src/parInsertSql.c:  taosMemoryFreeClear(pStmt->pStbRowsCxt);
libs/parser/src/parInsertSql.c:  SBoundColInfo* tags = taosMemoryMalloc(sizeof(pCxt->tags));
libs/parser/src/parInsertSql.c:static void destroySubTableHashElem(void* p) { taosMemoryFree(*(STableMeta**)p); }
libs/parser/src/parInsertSql.c:  taosMemoryFreeClear(*pMeta);
libs/parser/src/parAuthenticator.c:    taosMemoryFree(pTableMeta);
libs/planner/test/planTestUtil.cpp:      unique_ptr<SQuery*, void (*)(SQuery**)> query((SQuery**)taosMemoryCalloc(1, sizeof(SQuery*)), _destroyQuery);
libs/planner/test/planTestUtil.cpp:    taosMemoryFree(pQuery);
libs/planner/test/planTestUtil.cpp:      SCmdMsgInfo* pCmdMsg = (SCmdMsgInfo*)taosMemoryMalloc(sizeof(SCmdMsgInfo));
libs/planner/test/planTestUtil.cpp:      pCmdMsg->pMsg = taosMemoryMalloc(pCmdMsg->msgLen);
libs/planner/test/planTestUtil.cpp:    taosMemoryFreeClear(pStr);
libs/planner/test/planTestUtil.cpp:      taosMemoryFreeClear(pNewStr);
libs/planner/test/planTestUtil.cpp:      taosMemoryFreeClear(pNewStr);
libs/planner/test/planTestUtil.cpp:    taosMemoryFreeClear(pNewStr);
libs/planner/test/planTestUtil.cpp:    taosMemoryFreeClear(pStr);
libs/planner/test/planStmtTest.cpp:    return (TAOS_MULTI_BIND*)taosMemoryCalloc(nParams, sizeof(TAOS_MULTI_BIND));
libs/planner/test/planStmtTest.cpp:      taosMemoryFree(pParam->buffer);
libs/planner/test/planStmtTest.cpp:      taosMemoryFree(pParam->length);
libs/planner/test/planStmtTest.cpp:      taosMemoryFree(pParam->is_null);
libs/planner/test/planStmtTest.cpp:    taosMemoryFree(pParams);
libs/planner/test/planStmtTest.cpp:    pBindParam->buffer = taosMemoryCalloc(1, pBindParam->buffer_length);
libs/planner/test/planStmtTest.cpp:    pBindParam->length = (int32_t*)taosMemoryCalloc(1, sizeof(int32_t));
libs/planner/test/planStmtTest.cpp:    pBindParam->is_null = (char*)taosMemoryCalloc(1, sizeof(char));
libs/planner/src/planScaleOut.c:    pScan->pVgroupList = taosMemoryCalloc(1, sizeof(SVgroupsInfo) + sizeof(SVgroupInfo));
libs/planner/src/planOptimizer.c:  pSmaScan->pVgroupList = taosMemoryCalloc(1, sizeof(SVgroupsInfo) + sizeof(SVgroupInfo));
libs/planner/src/planOptimizer.c:  SFunctParam* pFuncTypeParam = taosMemoryCalloc(1, sizeof(SFunctParam));
libs/planner/src/planOptimizer.c:      taosMemoryFree(pFuncTypeParam);
libs/planner/src/planOptimizer.c:  pFuncTypeParam->pCol = taosMemoryCalloc(1, sizeof(SColumn));
libs/planner/src/planOptimizer.c:    taosMemoryFree(pFuncTypeParam);
libs/planner/src/planOptimizer.c:  taosMemoryFree(pFuncTypeParam);
libs/planner/src/planOptimizer.c:    pTsmaOptCtx->queryInterval = taosMemoryCalloc(1, sizeof(SInterval));
libs/planner/src/planOptimizer.c:  taosMemoryFreeClear(pTsmaOptCtx->queryInterval);
libs/planner/src/planOptimizer.c:      pValue->literal = taosMemoryCalloc(1, TSDB_TABLE_FNAME_LEN + 1);
libs/planner/src/planOptimizer.c:      pValue->datum.p = taosMemoryCalloc(1, TSDB_TABLE_FNAME_LEN + 1 + VARSTR_HEADER_SIZE);
libs/planner/src/planOptimizer.c:          taosMemoryFreeClear(pNewScan->pVgroupList);
libs/planner/src/planOptimizer.c:          pNewScan->pVgroupList = taosMemoryCalloc(1, len);
libs/planner/src/planOptimizer.c:  taosMemoryFree(pStr);
libs/planner/src/planLogicCreater.c:    cxt.pOutputs = taosMemoryCalloc(LIST_LENGTH(pExprs), sizeof(bool));
libs/planner/src/planLogicCreater.c:  taosMemoryFree(cxt.pOutputs);
libs/planner/src/planner.c:  taosMemoryFree(pStr);
libs/planner/src/planner.c:  taosMemoryFree(pStr);
libs/planner/src/planSpliter.c:  taosMemoryFree(pStr);
libs/command/src/explain.c:  taosMemoryFreeClear(resNode);
libs/command/src/explain.c:    taosMemoryFreeClear(row->buf);
libs/command/src/explain.c:  taosMemoryFreeClear(pCtx->tbuf);
libs/command/src/explain.c:  taosMemoryFree(pCtx);
libs/command/src/explain.c:  SExplainCtx *ctx = taosMemoryCalloc(1, sizeof(SExplainCtx));
libs/command/src/explain.c:  char *tbuf = taosMemoryMalloc(TSDB_EXPLAIN_RESULT_ROW_SIZE);
libs/command/src/explain.c:  taosMemoryFree(ctx);
libs/command/src/explain.c:  SExplainResNode *resNode = taosMemoryCalloc(1, sizeof(SExplainResNode));
libs/command/src/explain.c:  row.buf = taosMemoryMalloc(len);
libs/command/src/explain.c:    qError("taosMemoryMalloc %d failed", len);
libs/command/src/explain.c:    taosMemoryFree(row.buf);
libs/command/src/explain.c:            taosMemoryFree(value);
libs/command/src/explain.c:            taosMemoryFree(value);
libs/command/src/explain.c:  SRetrieveTableRsp *rsp = (SRetrieveTableRsp *)taosMemoryCalloc(1, rspSize);
libs/command/src/command.c:  *pRsp = taosMemoryCalloc(1, rspSize);
libs/command/src/command.c:  char*   p1 = taosMemoryCalloc(1, 100);
libs/command/src/command.c:  taosMemoryFree(retentions);
libs/command/src/command.c:      taosMemoryFree(pJson);
libs/command/src/command.c:  char*            buf2 = taosMemoryMalloc(SHOW_CREATE_TB_RESULT_FIELD2_LEN);
libs/command/src/command.c:      taosMemoryFree(buf2);
libs/command/src/command.c:  taosMemoryFree(buf2);
libs/command/src/command.c:  char*            buf2 = taosMemoryMalloc(SHOW_CREATE_VIEW_RESULT_FIELD2_LEN);
libs/command/src/command.c:  taosMemoryFree(buf2);
libs/command/src/command.c:    code = taosMemoryDbgInit();
libs/command/src/command.c:    code = taosMemoryDbgInitRestore();
libs/command/src/command.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
libs/function/test/runUdf.c:    taosMemoryFree(output.columnData);
libs/function/src/builtins.c:  pVal->datum.p = taosMemoryCalloc(1, len + VARSTR_HEADER_SIZE + 1);
libs/function/src/builtins.c:    intervals = taosMemoryCalloc(numOfBins, sizeof(double));
libs/function/src/builtins.c:        taosMemoryFree(intervals);
libs/function/src/builtins.c:          taosMemoryFree(intervals);
libs/function/src/builtins.c:        taosMemoryFree(intervals);
libs/function/src/builtins.c:        taosMemoryFree(intervals);
libs/function/src/builtins.c:          taosMemoryFree(intervals);
libs/function/src/builtins.c:      taosMemoryFree(intervals);
libs/function/src/builtins.c:    intervals = taosMemoryCalloc(numOfBins, sizeof(double));
libs/function/src/builtins.c:      taosMemoryFree(intervals);
libs/function/src/builtins.c:        taosMemoryFree(intervals);
libs/function/src/builtins.c:        taosMemoryFree(intervals);
libs/function/src/builtins.c:  taosMemoryFree(intervals);
libs/function/src/detail/tavgfunction.c:  char*                res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/detail/tavgfunction.c:  taosMemoryFree(res);
libs/function/src/thistogram.c:  SHistogramInfo* pHisto = taosMemoryMalloc(sizeof(SHistogramInfo) + sizeof(SHistBin) * (numOfEntries + 1));
libs/function/src/thistogram.c:  SInsertSupporter* pss = taosMemoryMalloc(sizeof(SInsertSupporter));
libs/function/src/thistogram.c:  SHistBin*    entry = taosMemoryCalloc(1, sizeof(SHistBin));
libs/function/src/thistogram.c:  taosMemoryFree(*pHisto);
libs/function/src/thistogram.c:  double* pVal = taosMemoryMalloc(num * sizeof(double));
libs/function/src/thistogram.c:  double* pVal = taosMemoryMalloc(num * sizeof(double));
libs/function/src/thistogram.c:  SHistBin* pHistoBins = taosMemoryCalloc(1, sizeof(SHistBin) * (pHisto1->numOfEntries + pHisto2->numOfEntries));
libs/function/src/thistogram.c:  taosMemoryFree(pHistoBins);
libs/function/src/tpercentile.c:      (SFilePage *)taosMemoryCalloc(1, pMemBucket->bytes * pMemBucket->pSlots[slotIdx].info.size + sizeof(SFilePage));
libs/function/src/tpercentile.c:    taosMemoryFree(buffer);
libs/function/src/tpercentile.c:      taosMemoryFree(buffer);
libs/function/src/tpercentile.c:  tMemBucket *pBucket = (tMemBucket *)taosMemoryCalloc(1, sizeof(tMemBucket));
libs/function/src/tpercentile.c:    taosMemoryFree(pBucket);
libs/function/src/tpercentile.c:    taosMemoryFree(pBucket);
libs/function/src/tpercentile.c:  pBucket->pSlots = (tMemBucketSlot *)taosMemoryCalloc(pBucket->numOfSlots, sizeof(tMemBucketSlot));
libs/function/src/tpercentile.c:    taosMemoryFree(pBucket);
libs/function/src/tpercentile.c:  taosMemoryFreeClear(pBucket->pSlots);
libs/function/src/tpercentile.c:  taosMemoryFreeClear(pBucket);
libs/function/src/tpercentile.c:        taosMemoryFreeClear(buffer);
libs/function/src/tscript.c:  ScriptCtx *pCtx = (ScriptCtx *)taosMemoryCalloc(1, sizeof(ScriptCtx)); 
libs/function/src/tscript.c:  taosMemoryFree(pCtx);
libs/function/src/tscript.c:  pool = taosMemoryMalloc(sizeof(ScriptEnvPool));  
libs/function/src/tscript.c:    ScriptEnv *env = taosMemoryMalloc(sizeof(ScriptEnv));
libs/function/src/tscript.c:  taosMemoryFree(pool);
libs/function/src/tscript.c:  taosMemoryFree(pEnv);
libs/function/src/builtinsimpl.c:      pIter->pPrevData = taosMemoryMalloc(pIter->pDataCol->info.bytes);
libs/function/src/builtinsimpl.c:      pIter->pPrevPk = taosMemoryMalloc(pIter->pPkCol->info.bytes);
libs/function/src/builtinsimpl.c:      pIter->pPrevData = taosMemoryMalloc(pIter->pDataCol->info.bytes);
libs/function/src/builtinsimpl.c:      pIter->pPrevPk = taosMemoryMalloc(pIter->pPkCol->info.bytes);
libs/function/src/builtinsimpl.c:  char*                res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/builtinsimpl.c:      taosMemoryFree(res);
libs/function/src/builtinsimpl.c:  char*   res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/builtinsimpl.c:    pCtx->subsidiaries.buf = taosMemoryMalloc(pCtx->subsidiaries.rowLen);
libs/function/src/builtinsimpl.c:  char* res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/builtinsimpl.c:  char*                res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/builtinsimpl.c:  char*                res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/builtinsimpl.c:    intervals = taosMemoryCalloc(numOfBins, sizeof(double));
libs/function/src/builtinsimpl.c:        taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:          taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:        taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:        taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:          taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:      taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:    intervals = taosMemoryCalloc(numOfBins, sizeof(double));
libs/function/src/builtinsimpl.c:      taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:        taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:        taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:  taosMemoryFree(intervals);
libs/function/src/builtinsimpl.c:  taosMemoryFree(binTypeStr);
libs/function/src/builtinsimpl.c:    taosMemoryFree(binDesc);
libs/function/src/builtinsimpl.c:    taosMemoryFree(binDesc);
libs/function/src/builtinsimpl.c:  taosMemoryFree(binDesc);
libs/function/src/builtinsimpl.c:  char*                res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/builtinsimpl.c:  char*                res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/builtinsimpl.c:  pInfo->buf = taosMemoryMalloc(pInfo->colBytes);
libs/function/src/builtinsimpl.c:  taosMemoryFreeClear(pInfo->buf);
libs/function/src/builtinsimpl.c:  char*                res = taosMemoryCalloc(resultBytes + VARSTR_HEADER_SIZE, sizeof(char));
libs/function/src/builtinsimpl.c:  taosMemoryFree(res);
libs/function/src/udfd.c:  SUdfCPluginCtx *udfCtx = taosMemoryCalloc(1, sizeof(SUdfCPluginCtx));
libs/function/src/udfd.c:    taosMemoryFree(udfCtx);
libs/function/src/udfd.c:      taosMemoryFree(udfCtx);
libs/function/src/udfd.c:  taosMemoryFree(ctx);
libs/function/src/udfd.c:    char *pythonPath = taosMemoryMalloc(lenPythonPath);
libs/function/src/udfd.c:    taosMemoryFree(pythonPath);
libs/function/src/udfd.c:  SUdfScriptPlugin *plugin = taosMemoryCalloc(1, sizeof(SUdfScriptPlugin));
libs/function/src/udfd.c:        taosMemoryFree(plugin);
libs/function/src/udfd.c:      taosMemoryFree(plugin);
libs/function/src/udfd.c:    taosMemoryFree(plugin);
libs/function/src/udfd.c:    taosMemoryFree(plugin);
libs/function/src/udfd.c:  SUdf *udfNew = taosMemoryCalloc(1, sizeof(SUdf));
libs/function/src/udfd.c:  SUdfcFuncHandle *handle = taosMemoryMalloc(sizeof(SUdfcFuncHandle));
libs/function/src/udfd.c:  void *bufBegin = taosMemoryMalloc(len);
libs/function/src/udfd.c:  taosMemoryFree(uvUdf->input.base);
libs/function/src/udfd.c:      SUdfInterBuf outBuf = {.buf = taosMemoryMalloc(udf->bufSize), .bufLen = udf->bufSize, .numOfResult = 0};
libs/function/src/udfd.c:      SUdfInterBuf outBuf = {.buf = taosMemoryMalloc(udf->bufSize), .bufLen = udf->bufSize, .numOfResult = 0};
libs/function/src/udfd.c:      SUdfInterBuf outBuf = {.buf = taosMemoryMalloc(udf->bufSize), .bufLen = udf->bufSize, .numOfResult = 0};
libs/function/src/udfd.c:      SUdfInterBuf outBuf = {.buf = taosMemoryMalloc(udf->bufSize), .bufLen = udf->bufSize, .numOfResult = 0};
libs/function/src/udfd.c:  void *bufBegin = taosMemoryMalloc(len);
libs/function/src/udfd.c:  taosMemoryFree(uvUdf->input.base);
libs/function/src/udfd.c:    taosMemoryFree(udf);
libs/function/src/udfd.c:  taosMemoryFree(handle);
libs/function/src/udfd.c:  void *bufBegin = taosMemoryMalloc(len);
libs/function/src/udfd.c:  taosMemoryFree(uvUdf->input.base);
libs/function/src/udfd.c:  SUdfdRpcSendRecvInfo *msgInfo = taosMemoryCalloc(1, sizeof(SUdfdRpcSendRecvInfo));
libs/function/src/udfd.c:  taosMemoryFree(msgInfo);
libs/function/src/udfd.c:  taosMemoryFree(work->output.base);
libs/function/src/udfd.c:  taosMemoryFree(work);
libs/function/src/udfd.c:  taosMemoryFree(req);
libs/function/src/udfd.c:    uv_write_t *write_req = taosMemoryMalloc(sizeof(uv_write_t));
libs/function/src/udfd.c:  taosMemoryFree(work);
libs/function/src/udfd.c:    ctx->inputBuf = taosMemoryMalloc(msgHeadSize);
libs/function/src/udfd.c:    void *inputBuf = taosMemoryRealloc(ctx->inputBuf, ctx->inputCap);
libs/function/src/udfd.c:  uv_work_t  *work = taosMemoryMalloc(sizeof(uv_work_t));
libs/function/src/udfd.c:  SUvUdfWork *udfWork = taosMemoryMalloc(sizeof(SUvUdfWork));
libs/function/src/udfd.c:  taosMemoryFree(conn->client);
libs/function/src/udfd.c:  taosMemoryFree(conn->inputBuf);
libs/function/src/udfd.c:  taosMemoryFree(conn);
libs/function/src/udfd.c:  uv_pipe_t *client = (uv_pipe_t *)taosMemoryMalloc(sizeof(uv_pipe_t));
libs/function/src/udfd.c:    SUdfdUvConn *ctx = taosMemoryMalloc(sizeof(SUdfdUvConn));
libs/function/src/udfd.c:  buf->base = taosMemoryMalloc(suggested_size);
libs/function/src/udfd.c:    taosMemoryFree(buf->base);
libs/function/src/udfd.c:  taosMemoryFree(buf->base);
libs/function/src/udfd.c:  uv_loop_t *loop = taosMemoryMalloc(sizeof(uv_loop_t));
libs/function/src/udfd.c:      taosMemoryFree(udf);
libs/function/src/tudf.c:    taosMemoryFree(data->varLenCol.varOffsets);
libs/function/src/tudf.c:    taosMemoryFree(data->varLenCol.payload);
libs/function/src/tudf.c:    taosMemoryFree(data->fixLenCol.nullBitmap);
libs/function/src/tudf.c:    taosMemoryFree(data->fixLenCol.data);
libs/function/src/tudf.c:    taosMemoryFree(block->udfCols[i]);
libs/function/src/tudf.c:  taosMemoryFree(block->udfCols);
libs/function/src/tudf.c:  taosMemoryFree(buf->buf);
libs/function/src/tudf.c:  udfBlock->udfCols = taosMemoryCalloc(taosArrayGetSize(block->pDataBlock), sizeof(SUdfColumn *));
libs/function/src/tudf.c:    udfBlock->udfCols[i] = taosMemoryCalloc(1, sizeof(SUdfColumn));
libs/function/src/tudf.c:      udfCol->colData.varLenCol.varOffsets = taosMemoryMalloc(udfCol->colData.varLenCol.varOffsetsLen);
libs/function/src/tudf.c:      udfCol->colData.varLenCol.payload = taosMemoryMalloc(udfCol->colData.varLenCol.payloadLen);
libs/function/src/tudf.c:      udfCol->colData.fixLenCol.nullBitmap = taosMemoryMalloc(udfCol->colData.fixLenCol.nullBitmapLen);
libs/function/src/tudf.c:      udfCol->colData.fixLenCol.data = taosMemoryMalloc(udfCol->colData.fixLenCol.dataLen);
libs/function/src/tudf.c:    col->nullbitmap = taosMemoryMalloc(data->fixLenCol.nullBitmapLen);
libs/function/src/tudf.c:    col->pData = taosMemoryMalloc(data->fixLenCol.dataLen);
libs/function/src/tudf.c:    col->varmeta.offset = taosMemoryMalloc(data->varLenCol.varOffsetsLen);
libs/function/src/tudf.c:    col->pData = taosMemoryMalloc(data->varLenCol.payloadLen);
libs/function/src/tudf.c:  output->columnData = taosMemoryMalloc(sizeof(SColumnInfoData));
libs/function/src/tudf.c:  taosMemoryFree(pTempBlock);
libs/function/src/tudf.c:  taosMemoryFree(conn->readBuf.buf);
libs/function/src/tudf.c:  taosMemoryFree(conn);
libs/function/src/tudf.c:  taosMemoryFree((uv_pipe_t *)handle);
libs/function/src/tudf.c:      taosMemoryFree(uvTask->rspBuf.base);
libs/function/src/tudf.c:    connBuf->buf = taosMemoryMalloc(msgHeadSize);
libs/function/src/tudf.c:    void *resultBuf = taosMemoryRealloc(connBuf->buf, connBuf->cap);
libs/function/src/tudf.c:  taosMemoryFree(write);
libs/function/src/tudf.c:  taosMemoryFree(connect);
libs/function/src/tudf.c:    void *bufBegin = taosMemoryMalloc(bufLen);
libs/function/src/tudf.c:      uv_pipe_t *pipe = taosMemoryMalloc(sizeof(uv_pipe_t));
libs/function/src/tudf.c:      SClientUvConn *conn = taosMemoryCalloc(1, sizeof(SClientUvConn));
libs/function/src/tudf.c:      uv_connect_t *connReq = taosMemoryMalloc(sizeof(uv_connect_t));
libs/function/src/tudf.c:        uv_write_t *write = taosMemoryMalloc(sizeof(uv_write_t));
libs/function/src/tudf.c:          taosMemoryFree(write);
libs/function/src/tudf.c:  SClientUvTaskNode *uvTask = taosMemoryCalloc(1, sizeof(SClientUvTaskNode));
libs/function/src/tudf.c:  taosMemoryFree(uvTask->reqBuf.base);
libs/function/src/tudf.c:  taosMemoryFree(uvTask);
libs/function/src/tudf.c:  SClientUdfTask *task = taosMemoryCalloc(1, sizeof(SClientUdfTask));
libs/function/src/tudf.c:  task->session = taosMemoryCalloc(1, sizeof(SUdfcUvSession));
libs/function/src/tudf.c:    taosMemoryFree(task->session);
libs/function/src/tudf.c:    taosMemoryFree(task);
libs/function/src/tudf.c:  taosMemoryFree(task);
libs/function/src/tudf.c:  SClientUdfTask *task = taosMemoryCalloc(1, sizeof(SClientUdfTask));
libs/function/src/tudf.c:  taosMemoryFree(task);
libs/function/src/tudf.c:    taosMemoryFree(session);
libs/function/src/tudf.c:  SClientUdfTask *task = taosMemoryCalloc(1, sizeof(SClientUdfTask));
libs/function/src/tudf.c:  taosMemoryFree(session);
libs/function/src/tudf.c:  taosMemoryFree(task);
libs/qcom/test/queryTest.cpp:  taosMemoryFreeClear(p);
libs/qcom/test/queryTest.cpp:  taosMemoryFreeClear(p);
libs/qcom/test/queryTest.cpp:  SParam* p = (SParam*)taosMemoryCalloc(1, sizeof(SParam));
libs/qcom/test/queryTest.cpp:    SParam* p = (SParam*)taosMemoryCalloc(1, sizeof(SParam));
libs/qcom/test/queryTest.cpp:  SParam* p = (SParam*)taosMemoryCalloc(1, sizeof(SParam));
libs/qcom/src/queryUtil.c:  taosMemoryFreeClear(pMsgBody->target.dbFName);
libs/qcom/src/queryUtil.c:  taosMemoryFreeClear(pMsgBody->msgInfo.pData);
libs/qcom/src/queryUtil.c:  taosMemoryFreeClear(pMsgBody);
libs/qcom/src/queryUtil.c:  taosMemoryFreeClear(*(void**)p);
libs/qcom/src/queryUtil.c:      taosMemoryFreeClear(pRes->res);
libs/qcom/src/queryUtil.c:      taosMemoryFreeClear(pRes->res);
libs/qcom/src/queryUtil.c:      taosMemoryFree(data);
libs/qcom/src/queryUtil.c:        char*   tagJsonValue = taosMemoryCalloc(pTagVal->nData, 1);
libs/qcom/src/queryUtil.c:          taosMemoryFree(tagJsonValue);
libs/qcom/src/queryUtil.c:        taosMemoryFree(tagJsonValue);
libs/qcom/src/queryUtil.c:  *pDst = taosMemoryMalloc(metaSize + schemaExtSize);
libs/qcom/src/queryUtil.c:  taosMemoryFreeClear(vgInfo);
libs/qcom/src/queryUtil.c:  *pDst = taosMemoryMalloc(sizeof(*pSrc));
libs/qcom/src/queryUtil.c:      taosMemoryFreeClear(*pDst);
libs/qcom/src/queryUtil.c:  *pDst = taosMemoryCalloc(1, sizeof(SVCreateTbReq));
libs/qcom/src/queryUtil.c:      (*pDst)->ctb.pTag = taosMemoryMalloc(pTag->len);
libs/qcom/src/queryUtil.c:      (*pDst)->ntb.schemaRow.pSchema = taosMemoryMalloc(pSrc->ntb.schemaRow.nCols * sizeof(SSchema));
libs/qcom/src/queryUtil.c:  taosMemoryFree(pInfo);
libs/qcom/src/querymsg.c:  pOut->dbVgroup = taosMemoryCalloc(1, sizeof(SDBVgInfo));
libs/qcom/src/querymsg.c:      taosMemoryFreeClear(pOut->dbVgroup);
libs/qcom/src/querymsg.c:  STableMeta *pTableMeta = taosMemoryCalloc(1, metaSize + schemaExtSize);
libs/qcom/src/querymsg.c:  STableCfgRsp *out = taosMemoryCalloc(1, sizeof(STableCfgRsp));
libs/qcom/src/querymsg.c:    taosMemoryFree(out);
libs/qcom/src/querymsg.c:  SViewMetaRsp *out = taosMemoryCalloc(1, sizeof(SViewMetaRsp));
libs/qcom/src/querymsg.c:    taosMemoryFree(out);
libs/scalar/test/scalar/scalarTests.cpp:    vnode->datum.p = (char *)taosMemoryMalloc(varDataTLen(value));
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(row);
libs/scalar/test/scalar/scalarTests.cpp:  char *t = (char *)taosMemoryCalloc(1, (inputLen + 1) * TSDB_NCHAR_SIZE + VARSTR_HEADER_SIZE);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:    taosMemoryFree(rightData);
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(row);
libs/scalar/test/scalar/scalarTests.cpp:  SScalarParam *input = (SScalarParam *)taosMemoryCalloc(1, sizeof(SScalarParam));
libs/scalar/test/scalar/scalarTests.cpp:  input->columnData = (SColumnInfoData *)taosMemoryCalloc(1, sizeof(SColumnInfoData));
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(pInput->columnData);
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(pInput);
libs/scalar/test/scalar/scalarTests.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(pInput);
libs/scalar/test/scalar/scalarTests.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(pInput);
libs/scalar/test/scalar/scalarTests.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(pInput);
libs/scalar/test/scalar/scalarTests.cpp:  pInput = (SScalarParam *)taosMemoryCalloc(2, sizeof(SScalarParam));
libs/scalar/test/scalar/scalarTests.cpp:  taosMemoryFree(pInput);
libs/scalar/test/filter/filterTests.cpp:    vnode->datum.p = (char *)taosMemoryMalloc(varDataTLen(value));
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/test/filter/filterTests.cpp:  taosMemoryFreeClear(rowRes);
libs/scalar/src/scalar.c:  taosMemoryFree(timeStr);
libs/scalar/src/scalar.c:  SColumnInfoData *pColumnData = taosMemoryCalloc(1, sizeof(SColumnInfoData));
libs/scalar/src/scalar.c:    taosMemoryFree(pColumnData);
libs/scalar/src/scalar.c:  SScalarParam *pLeft = taosMemoryCalloc(1, sizeof(SScalarParam));
libs/scalar/src/scalar.c:  taosMemoryFree(pLeft);
libs/scalar/src/scalar.c:  SScalarParam   out = {.columnData = taosMemoryCalloc(1, sizeof(SColumnInfoData))};
libs/scalar/src/scalar.c:  taosMemoryFreeClear(out.columnData);
libs/scalar/src/scalar.c:  taosMemoryFreeClear(out.columnData);
libs/scalar/src/scalar.c:    taosMemoryFreeClear(param->columnData);
libs/scalar/src/scalar.c:  *res = taosMemoryMalloc(pNode->node.resType.bytes);
libs/scalar/src/scalar.c:  taosMemoryFree(param);
libs/scalar/src/scalar.c:  SScalarParam *paramList = taosMemoryCalloc(*paramNum, sizeof(SScalarParam));
libs/scalar/src/scalar.c:    taosMemoryFreeClear(paramList);
libs/scalar/src/scalar.c:  taosMemoryFreeClear(paramList);
libs/scalar/src/scalar.c:  SScalarParam *paramList = taosMemoryCalloc(paramNum, sizeof(SScalarParam));
libs/scalar/src/scalar.c:  taosMemoryFreeClear(paramList);
libs/scalar/src/scalar.c:  *res = taosMemoryCalloc(1, sizeof(**res));
libs/scalar/src/scalar.c:  taosMemoryFree(pWhen);
libs/scalar/src/scalar.c:  taosMemoryFree(pThen);
libs/scalar/src/scalar.c:    taosMemoryFreeClear(pWhen);
libs/scalar/src/scalar.c:    taosMemoryFreeClear(pThen);
libs/scalar/src/scalar.c:  taosMemoryFree(pWhen);
libs/scalar/src/scalar.c:  taosMemoryFree(pThen);
libs/scalar/src/scalar.c:  taosMemoryFree(pCase);
libs/scalar/src/scalar.c:  taosMemoryFree(pElse);
libs/scalar/src/scalar.c:  taosMemoryFree(pWhen);
libs/scalar/src/scalar.c:  taosMemoryFree(pThen);
libs/scalar/src/scalar.c:  taosMemoryFree(pCase);
libs/scalar/src/scalar.c:  taosMemoryFree(pElse);
libs/scalar/src/scalar.c:  taosMemoryFree(pWhen);
libs/scalar/src/scalar.c:  taosMemoryFree(pThen);
libs/scalar/src/scalar.c:      res->datum.p = taosMemoryCalloc(len, 1);
libs/scalar/src/scalar.c:      // res->datum.p = taosMemoryCalloc(res->node.resType.bytes + VARSTR_HEADER_SIZE + 1, 1);
libs/scalar/src/scalar.c:      res->datum.p = taosMemoryCalloc(varDataTLen(output.columnData->pData) + 1, 1);
libs/scalar/src/scalar.c:      res->datum.p = taosMemoryCalloc(varDataTLen(output.columnData->pData) + 1, sizeof(char));      // add \0 to the end for print json value
libs/scalar/src/sclfunc.c:    TdUcs4 *newBuf = taosMemoryCalloc((varDataLen(input) + 1) * TSDB_NCHAR_SIZE, 1);
libs/scalar/src/sclfunc.c:      taosMemoryFree(newBuf);
libs/scalar/src/sclfunc.c:    taosMemoryFree(newBuf);
libs/scalar/src/sclfunc.c:  SColumnInfoData **pInputData = taosMemoryCalloc(inputNum, sizeof(SColumnInfoData *));
libs/scalar/src/sclfunc.c:  char            **input = taosMemoryCalloc(inputNum, POINTER_BYTES);
libs/scalar/src/sclfunc.c:  outputBuf = taosMemoryCalloc(outputLen, 1);
libs/scalar/src/sclfunc.c:  taosMemoryFree(input);
libs/scalar/src/sclfunc.c:  taosMemoryFree(outputBuf);
libs/scalar/src/sclfunc.c:  taosMemoryFree(pInputData);
libs/scalar/src/sclfunc.c:  SColumnInfoData **pInputData = taosMemoryCalloc(inputNum, sizeof(SColumnInfoData *));
libs/scalar/src/sclfunc.c:  char            **input = taosMemoryCalloc(inputNum, POINTER_BYTES);
libs/scalar/src/sclfunc.c:  outputBuf = taosMemoryCalloc(outputLen, 1);
libs/scalar/src/sclfunc.c:  taosMemoryFree(input);
libs/scalar/src/sclfunc.c:  taosMemoryFree(outputBuf);
libs/scalar/src/sclfunc.c:  taosMemoryFree(pInputData);
libs/scalar/src/sclfunc.c:  char   *outputBuf = taosMemoryCalloc(outputLen, 1);
libs/scalar/src/sclfunc.c:  taosMemoryFree(outputBuf);
libs/scalar/src/sclfunc.c:  char   *outputBuf = taosMemoryCalloc(outputLen, 1);
libs/scalar/src/sclfunc.c:  taosMemoryFree(outputBuf);
libs/scalar/src/sclfunc.c:  char *outputBuf = taosMemoryMalloc(outputLen);
libs/scalar/src/sclfunc.c:  taosMemoryFree(outputBuf);
libs/scalar/src/sclfunc.c:  char* pOutputBuf = taosMemoryMalloc(bufLen);
libs/scalar/src/sclfunc.c:      pOutputBuf = taosMemoryRealloc(pOutputBuf, bufLen);
libs/scalar/src/sclfunc.c:  taosMemoryFree(pOutputBuf);
libs/scalar/src/sclfunc.c:  char   *convBuf = taosMemoryMalloc(inputLen);
libs/scalar/src/sclfunc.c:  char   *output = taosMemoryCalloc(1, outputLen + TSDB_NCHAR_SIZE);
libs/scalar/src/sclfunc.c:  taosMemoryFree(output);
libs/scalar/src/sclfunc.c:  taosMemoryFree(convBuf);
libs/scalar/src/sclfunc.c:  char *  tsStr = taosMemoryMalloc(TS_FORMAT_MAX_LEN);
libs/scalar/src/sclfunc.c:  char *  format = taosMemoryMalloc(TS_FORMAT_MAX_LEN);
libs/scalar/src/sclfunc.c:  taosMemoryFree(tsStr);
libs/scalar/src/sclfunc.c:  taosMemoryFree(format);
libs/scalar/src/sclfunc.c:  char *  format = taosMemoryMalloc(TS_FORMAT_MAX_LEN);
libs/scalar/src/sclfunc.c:  char *  out = taosMemoryCalloc(1, TS_FORMAT_MAX_LEN + VARSTR_HEADER_SIZE);
libs/scalar/src/sclfunc.c:  taosMemoryFree(format);
libs/scalar/src/sclfunc.c:  taosMemoryFree(out);
libs/scalar/src/sclfunc.c:    intervals = taosMemoryCalloc(numOfBins, sizeof(double));
libs/scalar/src/sclfunc.c:        taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:          taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:        taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:        taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:          taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:      taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:    intervals = taosMemoryCalloc(numOfBins, sizeof(double));
libs/scalar/src/sclfunc.c:      taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:        taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:        taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:  *bins = taosMemoryCalloc(numOfBins, sizeof(SHistoFuncBin));
libs/scalar/src/sclfunc.c:  taosMemoryFree(intervals);
libs/scalar/src/sclfunc.c:  taosMemoryFree(binTypeStr);
libs/scalar/src/sclfunc.c:    taosMemoryFree(binDesc);
libs/scalar/src/sclfunc.c:  taosMemoryFree(binDesc);
libs/scalar/src/sclfunc.c:  taosMemoryFree(bins);
libs/scalar/src/filter.c:  info->units = taosMemoryCalloc(info->unitSize, sizeof(SFilterUnit));
libs/scalar/src/filter.c:  info->fields[FLD_TYPE_COLUMN].fields = taosMemoryCalloc(info->fields[FLD_TYPE_COLUMN].size, sizeof(SFilterField));
libs/scalar/src/filter.c:  info->fields[FLD_TYPE_VALUE].fields = taosMemoryCalloc(info->fields[FLD_TYPE_VALUE].size, sizeof(SFilterField));
libs/scalar/src/filter.c:    r = taosMemoryCalloc(1, sizeof(SFilterRangeNode));
libs/scalar/src/filter.c:  SFilterRangeCtx *ctx = taosMemoryCalloc(1, sizeof(SFilterRangeCtx));
libs/scalar/src/filter.c:    taosMemoryFree(r);
libs/scalar/src/filter.c:    taosMemoryFree(r);
libs/scalar/src/filter.c:  taosMemoryFree(ctx);
libs/scalar/src/filter.c:  gp.unitIdxs = taosMemoryCalloc(gp.unitNum, sizeof(*gp.unitIdxs));
libs/scalar/src/filter.c:// In the params, we should use void *data instead of void **data, there is no need to use taosMemoryFreeClear(*data) to
libs/scalar/src/filter.c:          taosMemoryRealloc(info->fields[type].fields, info->fields[type].size * sizeof(SFilterField));
libs/scalar/src/filter.c:      taosMemoryFreeClear(*data);
libs/scalar/src/filter.c:    void *tmp = taosMemoryRealloc(info->units, info->unitSize * sizeof(SFilterUnit));
libs/scalar/src/filter.c:    void *tmp = taosMemoryRealloc(group->unitIdxs, group->unitSize * sizeof(*group->unitIdxs));
libs/scalar/src/filter.c:    SScalarParam out = {.columnData = taosMemoryCalloc(1, sizeof(SColumnInfoData))};
libs/scalar/src/filter.c:        void *data = taosMemoryCalloc(1, tDataTypes[TSDB_DATA_TYPE_BIGINT].bytes);  // reserved space for simple_copy
libs/scalar/src/filter.c:    taosMemoryFree(out.columnData);
libs/scalar/src/filter.c:        void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:        void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:        void *data2 = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:      void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:      void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:        void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:        void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:        void *data2 = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:      void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:      void *data = taosMemoryMalloc(sizeof(int64_t));
libs/scalar/src/filter.c:  taosMemoryFreeClear(p->unitIdxs);
libs/scalar/src/filter.c:  taosMemoryFreeClear(p->unitFlags);
libs/scalar/src/filter.c:  taosMemoryFreeClear(gRes->colIdx);
libs/scalar/src/filter.c:  taosMemoryFreeClear(gRes->colInfo);
libs/scalar/src/filter.c:  taosMemoryFreeClear(gRes);
libs/scalar/src/filter.c:      taosMemoryFreeClear(field->data);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->cunits);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->blkUnitRes);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->blkUnits);
libs/scalar/src/filter.c:    taosMemoryFreeClear(info->fields[i].fields);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->groups);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->units);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->unitRes);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->unitFlags);
libs/scalar/src/filter.c:  taosMemoryFreeClear(info->colRange);
libs/scalar/src/filter.c:    taosMemoryFreeClear(info);
libs/scalar/src/filter.c:      fi->data = taosMemoryCalloc(1, bufBytes);
libs/scalar/src/filter.c:      SScalarParam out = {.columnData = taosMemoryCalloc(1, sizeof(SColumnInfoData))};
libs/scalar/src/filter.c:        taosMemoryFree(out.columnData);
libs/scalar/src/filter.c:      fi->data = taosMemoryCalloc(1, bufBytes);
libs/scalar/src/filter.c:      taosMemoryFree(out.columnData);
libs/scalar/src/filter.c:  uint32_t *colIdx = taosMemoryMalloc(info->fields[FLD_TYPE_COLUMN].num * sizeof(uint32_t));
libs/scalar/src/filter.c:    gRes[gResIdx] = taosMemoryCalloc(1, sizeof(SFilterGroupCtx));
libs/scalar/src/filter.c:    gRes[gResIdx]->colInfo = taosMemoryCalloc(info->fields[FLD_TYPE_COLUMN].num, sizeof(SFilterColInfo));
libs/scalar/src/filter.c:  taosMemoryFreeClear(colIdx);
libs/scalar/src/filter.c:    info->groups = taosMemoryCalloc(info->groupNum, sizeof(*info->groups));
libs/scalar/src/filter.c:    pg->unitFlags = taosMemoryCalloc(pg->unitNum, sizeof(*pg->unitFlags));
libs/scalar/src/filter.c:  uint32_t        *idxNum = taosMemoryCalloc(info->fields[FLD_TYPE_COLUMN].num, sizeof(*idxNum));
libs/scalar/src/filter.c:      idxs = taosMemoryCalloc(info->fields[FLD_TYPE_COLUMN].num, sizeof(*idxs));
libs/scalar/src/filter.c:  info->colRange = taosMemoryCalloc(colNum, POINTER_BYTES);
libs/scalar/src/filter.c:  taosMemoryFreeClear(idxNum);
libs/scalar/src/filter.c:  taosMemoryFreeClear(idxs);
libs/scalar/src/filter.c:  info->cunits = taosMemoryMalloc(info->unitNum * sizeof(*info->cunits));
libs/scalar/src/filter.c:  info->blkUnitRes = taosMemoryMalloc(sizeof(*info->blkUnitRes) * info->unitNum);
libs/scalar/src/filter.c:  info->blkUnits = taosMemoryMalloc(sizeof(*info->blkUnits) * (info->unitNum + 1) * info->groupNum);
libs/scalar/src/filter.c:      char   *newColData = taosMemoryCalloc(info->cunits[uidx].dataSize * TSDB_NCHAR_SIZE + VARSTR_HEADER_SIZE, 1);
libs/scalar/src/filter.c:      taosMemoryFreeClear(newColData);
libs/scalar/src/filter.c:              char   *newColData = taosMemoryCalloc(cunit->dataSize * TSDB_NCHAR_SIZE + VARSTR_HEADER_SIZE, 1);
libs/scalar/src/filter.c:              taosMemoryFreeClear(newColData);
libs/scalar/src/filter.c:  SFilterGroupCtx **gRes = taosMemoryCalloc(info->groupNum, sizeof(SFilterGroupCtx *));
libs/scalar/src/filter.c:  taosMemoryFreeClear(gRes);
libs/scalar/src/filter.c:  info->unitRes = taosMemoryMalloc(info->unitNum * sizeof(*info->unitRes));
libs/scalar/src/filter.c:  info->unitFlags = taosMemoryMalloc(info->unitNum * sizeof(*info->unitFlags));
libs/scalar/src/filter.c:      nfi.data = taosMemoryMalloc(rows * bytes);
libs/scalar/src/filter.c:      taosMemoryFreeClear(fi->data);
libs/scalar/src/filter.c:    *pInfo = taosMemoryCalloc(1, sizeof(SFilterInfo));
libs/scalar/src/filter.c:      fltError("taosMemoryCalloc %d failed", (int32_t)sizeof(SFilterInfo));
libs/scalar/src/sclvector.c:  char *tmp = taosMemoryMalloc(varDataTLen(inData));
libs/scalar/src/sclvector.c:  taosMemoryFreeClear(tmp);
libs/scalar/src/sclvector.c:  char *tmp = taosMemoryCalloc(1, varDataTLen(inData));
libs/scalar/src/sclvector.c:  taosMemoryFree(tmp);
libs/scalar/src/sclvector.c:    char   *t = taosMemoryCalloc(1, inputLen);
libs/scalar/src/sclvector.c:      taosMemoryFree(data);
libs/scalar/src/sclvector.c:    taosMemoryFree(t);
libs/scalar/src/sclvector.c:    taosMemoryFree(data);
libs/scalar/src/sclvector.c:    char   *t = taosMemoryCalloc(1, inputLen);
libs/scalar/src/sclvector.c:    taosMemoryFree(t);
libs/scalar/src/sclvector.c:  char   *t = taosMemoryCalloc(1, outputMaxLen);
libs/scalar/src/sclvector.c:  taosMemoryFree(t);
libs/scalar/src/sclvector.c:  char   *t = taosMemoryCalloc(1, inputLen + VARSTR_HEADER_SIZE);
libs/scalar/src/sclvector.c:    taosMemoryFree(t);
libs/scalar/src/sclvector.c:  taosMemoryFree(t);
libs/scalar/src/sclvector.c:  output = taosMemoryCalloc(1, len + VARSTR_HEADER_SIZE);
libs/scalar/src/sclvector.c:  taosMemoryFree(output);
libs/scalar/src/sclvector.c:      tmp = taosMemoryMalloc(bufSize);
libs/scalar/src/sclvector.c:    taosMemoryFreeClear(tmp);
libs/scalar/src/sclvector.c:  void   *t = taosMemoryCalloc(1, inputLen);
libs/scalar/src/sclvector.c:    taosMemoryFree(t);
libs/scalar/src/sclvector.c:    taosMemoryFree(pCol);
libs/scalar/src/sclvector.c:        taosMemoryFreeClear(pLeftData);
libs/scalar/src/sclvector.c:        taosMemoryFreeClear(pRightData);
libs/scalar/src/sclvector.c:  char *jsonKey = taosMemoryCalloc(1, varDataLen(pRightData) + 1);
libs/scalar/src/sclvector.c:  taosMemoryFree(jsonKey);
libs/scalar/src/sclvector.c:  char *jsonKey = taosMemoryCalloc(1, varDataLen(pRightData) + 1);
libs/scalar/src/sclvector.c:      taosMemoryFree(data);
libs/scalar/src/sclvector.c:  taosMemoryFree(jsonKey);
libs/scalar/inc/filterInt.h:    *(dst) = taosMemoryMalloc(sizeof(uint32_t) * n); \
libs/sync/test/syncPreSnapshotReplyTest.cpp:  char                 *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncPreSnapshotReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPreSnapshotReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPreSnapshotReplyTest.cpp:  SyncPreSnapshotReply *pMsg2 = (SyncPreSnapshotReply *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncPingReplyTest.cpp:  char          *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncPingReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPingReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPingReplyTest.cpp:  SyncPingReply *pMsg2 = (SyncPingReply *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncPingReplyTest.cpp:  char          *serialized = (char *)taosMemoryMalloc(bufLen);
libs/sync/test/syncPingReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncRaftLogTest3.cpp:  pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncRaftLogTest3.cpp:  pSyncNode->pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncRaftLogTest3.cpp:  taosMemoryFree(pSyncNode);
libs/sync/test/syncSnapshotRspTest.cpp:  char            *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncSnapshotRspTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncSnapshotRspTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncSnapshotRspTest.cpp:  SyncSnapshotRsp *pMsg2 = (SyncSnapshotRsp *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncPingTimerTest2.cpp:    taosMemoryFree(s);
libs/sync/test/syncPingTest.cpp:  char     *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncPingTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPingTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPingTest.cpp:  SyncPing *pMsg2 = (SyncPing *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncPingTest.cpp:  char     *serialized = (char *)taosMemoryMalloc(bufLen);
libs/sync/test/syncPingTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncTestTool.cpp:    *ppBuf = taosMemoryMalloc(*len);
libs/sync/test/syncTestTool.cpp:  taosMemoryFree(s);
libs/sync/test/syncTestTool.cpp:  SSyncFSM* pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncTestTool.cpp:  SRpcMsg* pMsg = (SRpcMsg*)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncTestTool.cpp:      taosMemoryFree(pRpcMsg);
libs/sync/test/syncTestTool.cpp:    taosMemoryFree(simpleStr);
libs/sync/test/syncRequestVoteTest.cpp:  char            *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncRequestVoteTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncRequestVoteTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncRaftLogTest2.cpp:  pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncRaftLogTest2.cpp:  pSyncNode->pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncRaftLogTest2.cpp:  taosMemoryFree(pSyncNode);
libs/sync/test/syncAppendEntriesReplyTest.cpp:  char                   *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncAppendEntriesReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncAppendEntriesReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncRaftStoreTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncAppendEntriesTest.cpp:  char              *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncAppendEntriesTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncAppendEntriesTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncAppendEntriesTest.cpp:  SyncAppendEntries *pMsg2 = (SyncAppendEntries *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncVotesRespondTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncVotesRespondTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncVotesRespondTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncVotesRespondTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncVotesRespondTest.cpp:      taosMemoryFree(serialized);
libs/sync/test/syncVotesRespondTest.cpp:      taosMemoryFree(serialized);
libs/sync/test/syncVotesRespondTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncPingSelfTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncSnapshotTest.cpp:  pFsm = (SSyncFSM *)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncSnapshotTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncSnapshotTest.cpp:  SRpcMsg *pMsg = (SRpcMsg *)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncSnapshotTest.cpp:  pMsg->pCont = taosMemoryMalloc(pMsg->contLen);
libs/sync/test/syncSnapshotTest.cpp:  SyncClientRequest *pMsg2 = (SyncClientRequest *)taosMemoryMalloc(clientRequestMsg.contLen);
libs/sync/test/syncSnapshotSenderTest.cpp:  SSyncNode* pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(*pSyncNode));
libs/sync/test/syncSnapshotSenderTest.cpp:  // pSyncNode->pRaftStore = (SRaftStore*)taosMemoryMalloc(sizeof(*(pSyncNode->pRaftStore)));
libs/sync/test/syncSnapshotSenderTest.cpp:  pSyncNode->pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(*(pSyncNode->pFsm)));
libs/sync/test/syncSnapshotSenderTest.cpp:  pSender->pCurrentBlock = taosMemoryMalloc(pSender->blockLen);
libs/sync/test/syncHeartbeatReplyTest.cpp:  char *              serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncHeartbeatReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncHeartbeatReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncApplyMsgTest.cpp:  char         *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncApplyMsgTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncApplyMsgTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncApplyMsgTest.cpp:  SyncApplyMsg *pMsg2 = (SyncApplyMsg *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncEntryTest.cpp:  taosMemoryFree(pSyncMsg);
libs/sync/test/syncEntryTest.cpp:  taosMemoryFree(pSyncMsg);
libs/sync/test/syncConfigChangeTest.cpp:  SSyncFSM* pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncConfigChangeTest.cpp:  SRpcMsg* pMsg = (SRpcMsg*)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncConfigChangeTest.cpp:      taosMemoryFree(pRpcMsg);
libs/sync/test/syncConfigChangeTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncLeaderTransferTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncLeaderTransferTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncLeaderTransferTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncLeaderTransferTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncLeaderTransferTest.cpp:  char               *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncLeaderTransferTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncLeaderTransferTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncLeaderTransferTest.cpp:  SyncLeaderTransfer *pMsg2 = (SyncLeaderTransfer *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncSnapshotSendTest.cpp:  char             *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncSnapshotSendTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncSnapshotSendTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncSnapshotSendTest.cpp:  SyncSnapshotSend *pMsg2 = (SyncSnapshotSend *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncLogStoreTest.cpp:  pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncLogStoreTest.cpp:  taosMemoryFree(pSyncNode);
libs/sync/test/syncPreSnapshotTest.cpp:  char            *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncPreSnapshotTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPreSnapshotTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncPreSnapshotTest.cpp:  SyncPreSnapshot *pMsg2 = (SyncPreSnapshot *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncRaftCfgTest.cpp:  SRaftCfg* pCfg = (SRaftCfg*)taosMemoryMalloc(sizeof(SRaftCfg));
libs/sync/test/syncRaftCfgTest.cpp:  SSyncCfg* pCfg = (SSyncCfg*)taosMemoryMalloc(sizeof(SSyncCfg));
libs/sync/test/syncRaftCfgTest.cpp:  SSyncCfg* pCfg2 = (SSyncCfg*)taosMemoryMalloc(sizeof(SSyncCfg));
libs/sync/test/syncRaftCfgTest.cpp:  taosMemoryFree(pCfg);
libs/sync/test/syncRaftCfgTest.cpp:  taosMemoryFree(s);
libs/sync/test/syncRaftCfgTest.cpp:  taosMemoryFree(pCfg2);
libs/sync/test/syncRaftCfgTest.cpp:  taosMemoryFree(pCfg);
libs/sync/test/syncSnapshotReceiverTest.cpp:  SSyncNode* pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(*pSyncNode));
libs/sync/test/syncSnapshotReceiverTest.cpp:  // pSyncNode->pRaftStore = (SRaftStore*)taosMemoryMalloc(sizeof(*(pSyncNode->pRaftStore)));
libs/sync/test/syncSnapshotReceiverTest.cpp:  pSyncNode->pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(*(pSyncNode->pFsm)));
libs/sync/test/syncRespMgrTest.cpp:  SSyncNode *pSyncNode = (SSyncNode *)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncIndexMgrTest.cpp:  pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncIndexMgrTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncIndexMgrTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncIndexMgrTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncConfigChangeSnapshotTest.cpp:    *ppBuf = taosMemoryMalloc(*len);
libs/sync/test/syncConfigChangeSnapshotTest.cpp:  SSyncFSM* pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncConfigChangeSnapshotTest.cpp:  SRpcMsg* pMsg = (SRpcMsg*)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncConfigChangeSnapshotTest.cpp:      taosMemoryFree(pRpcMsg);
libs/sync/test/syncConfigChangeSnapshotTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncInitTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncTimeoutTest.cpp:  char        *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncTimeoutTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncTimeoutTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncTimeoutTest.cpp:  SyncTimeout *pMsg2 = (SyncTimeout *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncAppendEntriesBatchTest.cpp:  char *             serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncAppendEntriesBatchTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncAppendEntriesBatchTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncAppendEntriesBatchTest.cpp:  SyncAppendEntries *pMsg2 = (SyncAppendEntries *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncLocalCmdTest.cpp:  char         *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncLocalCmdTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncLocalCmdTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncLocalCmdTest.cpp:  SyncLocalCmd *pMsg2 = (SyncLocalCmd *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncLogStoreCheck.cpp:  SSyncNode* pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncLogStoreCheck.cpp:  taosMemoryFree(pSyncNode);
libs/sync/test/syncRestoreFromSnapshot.cpp:  SSyncNode* pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncRestoreFromSnapshot.cpp:  taosMemoryFree(pSyncNode);
libs/sync/test/syncWriteTest.cpp:  pFsm = (SSyncFSM *)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncWriteTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncWriteTest.cpp:  SRpcMsg *pMsg = (SRpcMsg *)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncWriteTest.cpp:  pMsg->pCont = taosMemoryMalloc(pMsg->contLen);
libs/sync/test/syncHeartbeatTest.cpp:  char *         serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncHeartbeatTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncHeartbeatTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncHeartbeatTest.cpp:  SyncHeartbeat *pMsg2 = (SyncHeartbeat *)taosMemoryMalloc(rpcMsg.contLen);
libs/sync/test/syncPingTimerTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncEnqTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncIOSendMsgTest.cpp:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPing* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPing* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPingReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPingReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncClientRequest* pMsg = taosMemoryCalloc(1, bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncTimeout* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncTimeout* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncRequestVote* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncRequestVote* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncRequestVoteReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncRequestVoteReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncAppendEntries* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncAppendEntries* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncAppendEntriesReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncAppendEntriesReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncHeartbeat* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncHeartbeat* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncHeartbeatReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncHeartbeatReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPreSnapshot* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPreSnapshot* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPreSnapshotReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncPreSnapshotReply* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncApplyMsg* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncApplyMsg* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncSnapshotSend* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncSnapshotSend* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncSnapshotRsp* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncSnapshotRsp* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncLeaderTransfer* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncLeaderTransfer* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncLocalCmd* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  SyncLocalCmd* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMessageDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncVoteMgrDebug.c:    int32_t *arr = (int32_t *)taosMemoryMalloc(sizeof(int32_t) * pVotesGranted->replicaNum);
libs/sync/test/sync_test_lib/src/syncVoteMgrDebug.c:    taosMemoryFree(arr);
libs/sync/test/sync_test_lib/src/syncVoteMgrDebug.c:    int32_t *arr = (int32_t *)taosMemoryMalloc(sizeof(int32_t) * pVotesRespond->replicaNum);
libs/sync/test/sync_test_lib/src/syncVoteMgrDebug.c:    taosMemoryFree(arr);
libs/sync/test/sync_test_lib/src/syncIO.c:  SSyncIO *io = (SSyncIO *)taosMemoryMalloc(sizeof(SSyncIO));
libs/sync/test/sync_test_lib/src/syncIO.c:  char   *s = taosMemoryMalloc(memLen);
libs/sync/test/sync_test_lib/src/syncIO.c:  char    *s = taosMemoryMalloc(len2);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:      int *arr = (int *)taosMemoryMalloc(sizeof(int) * pSyncIndexMgr->replicaNum);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:      taosMemoryFree(arr);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:      int *arr = (int *)taosMemoryMalloc(sizeof(int) * pSyncIndexMgr->replicaNum);
libs/sync/test/sync_test_lib/src/syncIndexMgrDebug.c:      taosMemoryFree(arr);
libs/sync/test/sync_test_lib/src/syncRaftStoreDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftStoreDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftStoreDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftStoreDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncSnapshotDebug.c:      taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncSnapshotDebug.c:      taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftLogDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncRaftEntryDebug.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:  SyncClientRequestBatch* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncBatch.c:  SyncClientRequestBatch* pSyncMsg = taosMemoryMalloc(pRpcMsg->contLen);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncBatch.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:  SyncAppendEntriesBatch* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(pMsg);
libs/sync/test/sync_test_lib/src/syncBatch.c:  char* buf = taosMemoryMalloc(pMsg->bytes);
libs/sync/test/sync_test_lib/src/syncBatch.c:  SyncAppendEntriesBatch* pMsg = taosMemoryMalloc(bytes);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(s);
libs/sync/test/sync_test_lib/src/syncBatch.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:  taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncBatch.c:    taosMemoryFree(serialized);
libs/sync/test/sync_test_lib/src/syncMainDebug.c:  char*   s = (char*)taosMemoryMalloc(len);
libs/sync/test/syncReplicateTest.cpp:  SSyncFSM* pFsm = (SSyncFSM*)taosMemoryMalloc(sizeof(SSyncFSM));
libs/sync/test/syncReplicateTest.cpp:  SRpcMsg* pMsg = (SRpcMsg*)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncReplicateTest.cpp:      taosMemoryFree(pRpcMsg);
libs/sync/test/syncReplicateTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncRpcMsgTest.cpp:  SyncClientRequest *pMsg = (SyncClientRequest *)taosMemoryMalloc(clientRequestMsg.contLen);
libs/sync/test/syncRpcMsgTest.cpp:  taosMemoryFree(pMsg);
libs/sync/test/syncRaftCfgIndexTest.cpp:  SRaftCfg* pCfg = (SRaftCfg*)taosMemoryMalloc(sizeof(SRaftCfg));
libs/sync/test/syncRaftCfgIndexTest.cpp:  SSyncCfg* pCfg = (SSyncCfg*)taosMemoryMalloc(sizeof(SSyncCfg));
libs/sync/test/syncLogStoreCheck2.cpp:  SSyncNode* pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncLogStoreCheck2.cpp:  taosMemoryFree(pSyncNode);
libs/sync/test/syncRefTest.cpp:  taosMemoryFree(pObj);
libs/sync/test/syncRefTest.cpp:  SyncObj *pObj = (SyncObj *)taosMemoryMalloc(sizeof(SyncObj));
libs/sync/test/syncVotesGrantedTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncVotesGrantedTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncVotesGrantedTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncVotesGrantedTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncVotesGrantedTest.cpp:      taosMemoryFree(serialized);
libs/sync/test/syncVotesGrantedTest.cpp:      taosMemoryFree(serialized);
libs/sync/test/syncVotesGrantedTest.cpp:    taosMemoryFree(serialized);
libs/sync/test/syncRequestVoteReplyTest.cpp:  char                 *serialized = (char *)taosMemoryMalloc(len);
libs/sync/test/syncRequestVoteReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncRequestVoteReplyTest.cpp:  taosMemoryFree(serialized);
libs/sync/test/syncHashCacheTest.cpp:  SSyncNode* pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncEncodeTest.cpp:    taosMemoryFree(s);
libs/sync/test/syncEncodeTest.cpp:  SRpcMsg *pMsg = (SRpcMsg *)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncEncodeTest.cpp:  pMsg->pCont = taosMemoryMalloc(pMsg->contLen);
libs/sync/test/syncEncodeTest.cpp:  SRpcMsg *pRetMsg = (SRpcMsg *)taosMemoryCalloc(sizeof(SRpcMsg), 1);
libs/sync/test/syncEncodeTest.cpp:  SRpcMsg *pRetMsg = (SRpcMsg *)taosMemoryMalloc(sizeof(SRpcMsg));
libs/sync/test/syncEntryCacheTest.cpp:  SSyncNode* pSyncNode = (SSyncNode*)taosMemoryMalloc(sizeof(SSyncNode));
libs/sync/test/syncElectTest.cpp:    taosMemoryFree(s);
libs/sync/src/syncRaftCfg.c:  if (buffer != NULL) taosMemoryFree(buffer);
libs/sync/src/syncRaftCfg.c:  pData = taosMemoryMalloc(size + 1);
libs/sync/src/syncRaftCfg.c:  if (pData != NULL) taosMemoryFree(pData);
libs/sync/src/syncMain.c:      pData = taosMemoryMalloc(sizeof(SSyncHbTimerData));
libs/sync/src/syncMain.c:  SSyncNode* pSyncNode = taosMemoryCalloc(1, sizeof(SSyncNode));
libs/sync/src/syncMain.c:    taosMemoryFree(pSyncInfo->pFsm);
libs/sync/src/syncMain.c:void syncHbTimerDataFree(SSyncHbTimerData* pData) { taosMemoryFree(pData); }
libs/sync/src/syncMain.c:    taosMemoryFree(pSyncNode->pFsm);
libs/sync/src/syncMain.c:  taosMemoryFree(pSyncNode);
libs/sync/src/syncMain.c:  taosMemoryFree(value);
libs/sync/src/syncMain.c:  oldLogReplMgrs = taosMemoryMalloc(length);
libs/sync/src/syncMain.c:  taosMemoryFree(oldLogReplMgrs);
libs/sync/src/syncUtil.c:  void* data = taosMemoryRealloc(pSnap->data, size);
libs/sync/src/syncVoteMgr.c:  SVotesGranted *pVotesGranted = taosMemoryCalloc(1, sizeof(SVotesGranted));
libs/sync/src/syncVoteMgr.c:    taosMemoryFree(pVotesGranted);
libs/sync/src/syncVoteMgr.c:  SVotesRespond *pVotesRespond = taosMemoryCalloc(1, sizeof(SVotesRespond));
libs/sync/src/syncVoteMgr.c:    taosMemoryFree(pVotesRespond);
libs/sync/src/syncRaftStore.c:  pData = taosMemoryMalloc(size + 1);
libs/sync/src/syncRaftStore.c:  if (pData != NULL) taosMemoryFree(pData);
libs/sync/src/syncRaftStore.c:  if (buffer != NULL) taosMemoryFree(buffer);
libs/sync/src/syncRespMgr.c:  SSyncRespMgr *pObj = taosMemoryCalloc(1, sizeof(SSyncRespMgr));
libs/sync/src/syncRespMgr.c:  taosMemoryFree(pObj);
libs/sync/src/syncRaftEntry.c:  SSyncRaftEntry* pEntry = taosMemoryCalloc(1, bytes);
libs/sync/src/syncRaftEntry.c:  SSyncRaftEntry* pEntry = taosMemoryMalloc(pMsg->dataLen);
libs/sync/src/syncRaftEntry.c:    taosMemoryFree(pEntry);
libs/sync/src/syncPipeline.c:  SSyncLogReplMgr* pMgr = taosMemoryCalloc(1, sizeof(SSyncLogReplMgr));
libs/sync/src/syncPipeline.c:  (void)taosMemoryFree(pMgr);
libs/sync/src/syncPipeline.c:  SSyncLogBuffer* pBuf = taosMemoryCalloc(1, sizeof(SSyncLogBuffer));
libs/sync/src/syncPipeline.c:  taosMemoryFree(pBuf);
libs/sync/src/syncPipeline.c:  (void)taosMemoryFree(pBuf);
libs/sync/src/syncSnapshot.c:  taosMemoryFree(ppBuf[0]);
libs/sync/src/syncSnapshot.c:  SSyncSnapBuffer *pBuf = taosMemoryCalloc(1, sizeof(SSyncSnapBuffer));
libs/sync/src/syncSnapshot.c:  SSyncSnapshotSender *pSender = taosMemoryCalloc(1, sizeof(SSyncSnapshotSender));
libs/sync/src/syncSnapshot.c:    taosMemoryFree(pSender);
libs/sync/src/syncSnapshot.c:    taosMemoryFree(pBlk->pBlock);
libs/sync/src/syncSnapshot.c:  taosMemoryFree(pBlk);
libs/sync/src/syncSnapshot.c:    taosMemoryFree(pSender->snapshotParam.data);
libs/sync/src/syncSnapshot.c:    taosMemoryFree(pSender->snapshot.data);
libs/sync/src/syncSnapshot.c:  taosMemoryFree(pSender);
libs/sync/src/syncSnapshot.c:    taosMemoryFree(snapInfo.data);
libs/sync/src/syncSnapshot.c:      pBlk = taosMemoryCalloc(1, sizeof(SyncSnapBlock));
libs/sync/src/syncSnapshot.c:  SSyncSnapshotReceiver *pReceiver = taosMemoryCalloc(1, sizeof(SSyncSnapshotReceiver));
libs/sync/src/syncSnapshot.c:    taosMemoryFree(pReceiver);
libs/sync/src/syncSnapshot.c:    taosMemoryFree(pReceiver->snapshotParam.data);
libs/sync/src/syncSnapshot.c:    taosMemoryFree(pReceiver->snapshot.data);
libs/sync/src/syncSnapshot.c:  taosMemoryFree(pReceiver);
libs/sync/src/syncSnapshot.c:  void *data = taosMemoryCalloc(1, pMsg->dataLen);
libs/sync/src/syncSnapshot.c:  data = taosMemoryRealloc(pParam->data, dataLen);
libs/sync/src/syncSnapshot.c:    taosMemoryFree(snapInfo.data);
libs/sync/src/syncSnapshot.c:  void           *data = taosMemoryRealloc(pParam->data, dataLen);
libs/sync/src/syncRaftLog.c:  SSyncLogStore* pLogStore = taosMemoryCalloc(1, sizeof(SSyncLogStore));
libs/sync/src/syncRaftLog.c:    taosMemoryFree(pLogStore);
libs/sync/src/syncRaftLog.c:  pLogStore->data = taosMemoryMalloc(sizeof(SSyncLogStoreData));
libs/sync/src/syncRaftLog.c:    taosMemoryFree(pLogStore->data);
libs/sync/src/syncRaftLog.c:    taosMemoryFree(pLogStore);
libs/sync/src/syncRaftLog.c:      taosMemoryFree(pLastEntry);
libs/sync/src/syncIndexMgr.c:  SSyncIndexMgr *pIndexMgr = taosMemoryCalloc(1, sizeof(SSyncIndexMgr));
libs/sync/src/syncIndexMgr.c:    taosMemoryFree(pIndexMgr);
libs/executor/test/executorTests.cpp:    //    colInfo1.varmeta.offset = static_cast<int32_t*>(taosMemoryCalloc(1, numOfRows * sizeof(int32_t)));
libs/executor/test/executorTests.cpp:  SOperatorInfo* pOperator = static_cast<SOperatorInfo*>(taosMemoryCalloc(1, sizeof(SOperatorInfo)));
libs/executor/test/executorTests.cpp:  SDummyInputInfo* pInfo = (SDummyInputInfo*)taosMemoryCalloc(1, sizeof(SDummyInputInfo));
libs/executor/test/executorTests.cpp:  SExprInfo *exp = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  SExprInfo *exp1 = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  su* v = static_cast<su*>(taosMemoryCalloc(1000000, sizeof(su)));
libs/executor/test/executorTests.cpp:    v[i].c = static_cast<char*>(taosMemoryMalloc(4));
libs/executor/test/executorTests.cpp:  SExprInfo *exp = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  SExprInfo *exp1 = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  taosMemoryFreeClear(exp);
libs/executor/test/executorTests.cpp:  taosMemoryFreeClear(exp1);
libs/executor/test/executorTests.cpp:  SExprInfo *exp = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  exp->base.pColumns = static_cast<SColumn*>(taosMemoryCalloc(1, sizeof(SColumn)));
libs/executor/test/executorTests.cpp:  SExprInfo *exp1 = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  SOperatorInfo** plist = (SOperatorInfo**) taosMemoryCalloc(numOfSources, sizeof(void*));
libs/executor/test/executorTests.cpp:  taosMemoryFreeClear(exp);
libs/executor/test/executorTests.cpp:  taosMemoryFreeClear(exp1);
libs/executor/test/executorTests.cpp:  SExprInfo *exp = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  exp->base.pColumns = static_cast<SColumn*>(taosMemoryCalloc(1, sizeof(SColumn)));
libs/executor/test/executorTests.cpp:  SExprInfo *exp1 = static_cast<SExprInfo*>(taosMemoryCalloc(1, sizeof(SExprInfo)));
libs/executor/test/executorTests.cpp:  exp1->base.pColumns = static_cast<SColumn*>(taosMemoryCalloc(1, sizeof(SColumn)));
libs/executor/test/executorTests.cpp:  taosMemoryFreeClear(exp);
libs/executor/test/executorTests.cpp:  taosMemoryFreeClear(exp1);
libs/executor/test/sortTests.cpp:      char*   result = static_cast<char*>(taosMemoryCalloc(tDataTypes[pInfo->type].bytes, 1));
libs/executor/test/sortTests.cpp:      taosMemoryFree(result);
libs/executor/test/sortTests.cpp:  _info* pInfo = (_info*) taosMemoryCalloc(1, sizeof(_info));
libs/executor/test/sortTests.cpp:  SSortSource* ps = static_cast<SSortSource*>(taosMemoryCalloc(1, sizeof(SSortSource)));
libs/executor/test/sortTests.cpp:  taosMemoryFreeClear(ps);
libs/executor/test/sortTests.cpp:  taosMemoryFree(pInfo);
libs/executor/test/sortTests.cpp:  _info* pInfo = (_info*) taosMemoryCalloc(8, sizeof(_info));
libs/executor/test/sortTests.cpp:    SSortSource* ps = static_cast<SSortSource*>(taosMemoryCalloc(1, sizeof(SSortSource)));
libs/executor/test/sortTests.cpp:    taosMemoryFreeClear(ps);
libs/executor/test/sortTests.cpp:  taosMemoryFree(pInfo);
libs/executor/test/sortTests.cpp:    p[i] = static_cast<SSortSource*>(taosMemoryCalloc(1, sizeof(SSortSource)));
libs/executor/test/joinTests.cpp:    SOperatorInfo* p = (SOperatorInfo*)taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/test/joinTests.cpp:  jtCtx.resColBuf = (char*)taosMemoryRealloc(jtCtx.resColBuf, jtCtx.resColSize);
libs/executor/test/joinTests.cpp:  SExecTaskInfo* p = (SExecTaskInfo*)taosMemoryCalloc(1, sizeof(SExecTaskInfo));
libs/executor/test/joinTests.cpp:    jtCtx.colRowDataBuf = (char*)taosMemoryRealloc(jtCtx.colRowDataBuf, totalSize);
libs/executor/test/joinTests.cpp:    jtCtx.rightFinMatch = (bool*)taosMemoryRealloc(jtCtx.rightFinMatch, maxGrpRows * sizeof(bool));
libs/executor/test/joinTests.cpp:  jtCtx.inColBuf = (char*)taosMemoryMalloc(jtCtx.inColSize);
libs/executor/test/joinTests.cpp:  taosMemoryFreeClear(jtCtx.rightFinMatch);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/test/joinTests.cpp:  taosMemoryFree(pTask);
libs/executor/src/sysscanoperator.c:        tagVarChar = taosMemoryMalloc(strlen(tagJson) + VARSTR_HEADER_SIZE);
libs/executor/src/sysscanoperator.c:        taosMemoryFree(tagJson);
libs/executor/src/sysscanoperator.c:        tagVarChar = taosMemoryCalloc(1, bufSize + 1);
libs/executor/src/sysscanoperator.c:    if (tagType == TSDB_DATA_TYPE_GEOMETRY || tagType == TSDB_DATA_TYPE_VARBINARY) taosMemoryFreeClear(tagData);
libs/executor/src/sysscanoperator.c:    taosMemoryFree(tagVarChar);
libs/executor/src/sysscanoperator.c:        SSysTableIndex* idx = taosMemoryMalloc(sizeof(SSysTableIndex));
libs/executor/src/sysscanoperator.c:    char*   buf1 = taosMemoryCalloc(1, contLen);
libs/executor/src/sysscanoperator.c:    SMsgSendInfo* pMsgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
libs/executor/src/sysscanoperator.c:        taosMemoryFree(pRsp);
libs/executor/src/sysscanoperator.c:    taosMemoryFree(pRsp);
libs/executor/src/sysscanoperator.c:  SSysTableScanInfo* pInfo = taosMemoryCalloc(1, sizeof(SSysTableScanInfo));
libs/executor/src/sysscanoperator.c:  SOperatorInfo*     pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/sysscanoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/sysscanoperator.c:    taosMemoryFree(pInfo->pIdx);
libs/executor/src/sysscanoperator.c:  taosMemoryFreeClear(pInfo->pUser);
libs/executor/src/sysscanoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/sysscanoperator.c:  MergeIndex* mi = taosMemoryCalloc(sz, sizeof(MergeIndex));
libs/executor/src/sysscanoperator.c:  taosMemoryFreeClear(mi);
libs/executor/src/sysscanoperator.c:  char*   p = taosMemoryCalloc(1, len + VARSTR_HEADER_SIZE);
libs/executor/src/sysscanoperator.c:  taosMemoryFree(p);
libs/executor/src/sysscanoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/sysscanoperator.c:  pCond->colList = taosMemoryCalloc(1, sizeof(SColumnInfo));
libs/executor/src/sysscanoperator.c:  pCond->pSlotList = taosMemoryMalloc(sizeof(int32_t));
libs/executor/src/sysscanoperator.c:  SBlockDistInfo* pInfo = taosMemoryCalloc(1, sizeof(SBlockDistInfo));
libs/executor/src/sysscanoperator.c:  SOperatorInfo*  pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/sysscanoperator.c:  taosMemoryFreeClear(pInfo);
libs/executor/src/sysscanoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/streamfilloperator.c:  taosMemoryFreeClear(pFillCol[start].pExpr);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pFillCol);
libs/executor/src/streamfilloperator.c:    taosMemoryFree(pFillSup->cur.pRowVal);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pFillSup->prev.pRowVal);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pFillSup->next.pRowVal);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pFillSup->nextNext.pRowVal);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pFillSup);
libs/executor/src/streamfilloperator.c:  taosMemoryFreeClear(point->val);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pFillLinear);
libs/executor/src/streamfilloperator.c:    taosMemoryFreeClear(pFillInfo->pResRow->pRowVal);
libs/executor/src/streamfilloperator.c:    taosMemoryFreeClear(pFillInfo->pResRow);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pFillInfo);
libs/executor/src/streamfilloperator.c:  taosMemoryFree(pInfo);
libs/executor/src/streamfilloperator.c:  taosMemoryFreeClear(pRowData->pRowVal);
libs/executor/src/streamfilloperator.c:        cur.val = taosMemoryCalloc(1, pCell->bytes);
libs/executor/src/streamfilloperator.c:  tmpNextRow.pRowVal = taosMemoryCalloc(1, rowSize);
libs/executor/src/streamfilloperator.c:  taosMemoryFreeClear(tmpNextRow.pRowVal);
libs/executor/src/streamfilloperator.c:  SStreamFillSupporter* pFillSup = taosMemoryCalloc(1, sizeof(SStreamFillSupporter));
libs/executor/src/streamfilloperator.c:  SStreamFillInfo* pFillInfo = taosMemoryCalloc(1, sizeof(SStreamFillInfo));
libs/executor/src/streamfilloperator.c:  pFillInfo->pLinearInfo = taosMemoryCalloc(1, sizeof(SStreamFillLinearInfo));
libs/executor/src/streamfilloperator.c:      value.val = taosMemoryCalloc(1, pColData->info.bytes);
libs/executor/src/streamfilloperator.c:      value.val = taosMemoryCalloc(1, pColData->info.bytes);
libs/executor/src/streamfilloperator.c:    pFillInfo->pResRow = taosMemoryCalloc(1, sizeof(SResultRowData));
libs/executor/src/streamfilloperator.c:    pFillInfo->pResRow->pRowVal = taosMemoryCalloc(1, pFillSup->rowSize);
libs/executor/src/streamfilloperator.c:  SStreamFillOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamFillOperatorInfo));
libs/executor/src/streamfilloperator.c:  SOperatorInfo*           pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/streamfilloperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/projectoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/projectoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/projectoperator.c:  SProjectOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SProjectOperatorInfo));
libs/executor/src/projectoperator.c:  SOperatorInfo*        pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/projectoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/projectoperator.c:  SIndefOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SIndefOperatorInfo));
libs/executor/src/projectoperator.c:  SOperatorInfo*      pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/projectoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/dataDeleter.c:  pBuf->pData = taosMemoryMalloc(pBuf->allocSize);
libs/executor/src/dataDeleter.c:  taosMemoryFreeClear(pDeleter->nextOutput.pData);  // todo persistent
libs/executor/src/dataDeleter.c:  taosMemoryFreeClear(pDeleter->nextOutput.pData);
libs/executor/src/dataDeleter.c:  taosMemoryFree(pDeleter->pParam);
libs/executor/src/dataDeleter.c:      taosMemoryFreeClear(pBuf->pData);
libs/executor/src/dataDeleter.c:  taosMemoryFree(pDeleter->pManager);
libs/executor/src/dataDeleter.c:  SDataDeleterHandle* deleter = taosMemoryCalloc(1, sizeof(SDataDeleterHandle));
libs/executor/src/dataDeleter.c:    taosMemoryFree(pParam);
libs/executor/src/dataDeleter.c:    taosMemoryFree(deleter);
libs/executor/src/dataDeleter.c:    taosMemoryFree(pManager);
libs/executor/src/executor.c:      taosMemoryFree(pTaskInfo);
libs/executor/src/executor.c:      keyBuf = taosMemoryMalloc(bufLen);
libs/executor/src/executor.c:            taosMemoryFree(keyBuf);
libs/executor/src/executor.c:      taosMemoryFree(keyBuf);
libs/executor/src/executor.c:      taosMemoryFree(pSinkManager);
libs/executor/src/executor.c:  pCond->colList = taosMemoryCalloc(pCond->numOfCols, sizeof(SColumnInfo));
libs/executor/src/executor.c:  pCond->pSlotList = taosMemoryMalloc(sizeof(int32_t) * pCond->numOfCols);
libs/executor/src/executor.c:    taosMemoryFreeClear(pCond->colList);
libs/executor/src/executor.c:    taosMemoryFreeClear(pCond->pSlotList);
libs/executor/src/executor.c:    buf.pData = taosMemoryCalloc(1, pMsg->contLen);
libs/executor/src/executil.c:static void freeEx(void* p) { taosMemoryFree(*(void**)p); }
libs/executor/src/executil.c:  taosMemoryFreeClear(pGroupResInfo->pBuf);
libs/executor/src/executil.c:    taosMemoryFree(pGroupResInfo->pBuf);
libs/executor/src/executil.c:  pGroupResInfo->pBuf = taosMemoryMalloc(bufLen);
libs/executor/src/executil.c:        pBlockInfo->pks[0].pData = taosMemoryCalloc(1, pInfoData->info.bytes);
libs/executor/src/executil.c:        pBlockInfo->pks[1].pData = taosMemoryCalloc(1, pInfoData->info.bytes);
libs/executor/src/executil.c:          taosMemoryFreeClear(pBlockInfo->pks[0].pData);
libs/executor/src/executil.c:      res->datum.p = taosMemoryCalloc(len + 1, 1);
libs/executor/src/executil.c:      res->datum.p = taosMemoryCalloc(tagVal.nData + VARSTR_HEADER_SIZE + 1, 1);
libs/executor/src/executil.c:    res->datum.p = taosMemoryCalloc(len + VARSTR_HEADER_SIZE + 1, 1);
libs/executor/src/executil.c:  SColumnInfoData* pColumnData = taosMemoryCalloc(1, sizeof(SColumnInfoData));
libs/executor/src/executil.c:    taosMemoryFree(pColumnData);
libs/executor/src/executil.c:    taosMemoryFree(col);
libs/executor/src/executil.c:    taosMemoryFree(pInfo->pTagVal);
libs/executor/src/executil.c:  taosMemoryFree(payload);
libs/executor/src/executil.c:    payload = taosMemoryRealloc(payload, len + tListLen(pContext->digest));
libs/executor/src/executil.c:  taosMemoryFree(payload);
libs/executor/src/executil.c:  keyBuf = taosMemoryCalloc(1, keyLen);
libs/executor/src/executil.c:  taosMemoryFreeClear(keyBuf);
libs/executor/src/executil.c:    taosMemoryFree(pResBlock);
libs/executor/src/executil.c:            char* tmp = taosMemoryMalloc(tagVal.nData + VARSTR_HEADER_SIZE + 1);
libs/executor/src/executil.c:            taosMemoryFree(tmp);
libs/executor/src/executil.c:  taosMemoryFreeClear(output.columnData);
libs/executor/src/executil.c:      char*  pPayload = taosMemoryMalloc(size);
libs/executor/src/executil.c:  SColumn* pCol = taosMemoryCalloc(1, sizeof(SColumn));
libs/executor/src/executil.c:  pExp->pExpr = taosMemoryCalloc(1, sizeof(tExprNode));
libs/executor/src/executil.c:    pExp->base.pParam = taosMemoryCalloc(1, sizeof(SFunctParam));
libs/executor/src/executil.c:    pExp->base.pParam = taosMemoryCalloc(1, sizeof(SFunctParam));
libs/executor/src/executil.c:    pExp->base.pParam = taosMemoryCalloc(numOfParam, sizeof(SFunctParam));
libs/executor/src/executil.c:    pExp->base.pParam = taosMemoryCalloc(1, sizeof(SFunctParam));
libs/executor/src/executil.c:    pExp->base.pParam = taosMemoryCalloc(1, sizeof(SFunctParam));
libs/executor/src/executil.c:  SExprInfo* pExprs = taosMemoryCalloc(*numOfExprs, sizeof(SExprInfo));
libs/executor/src/executil.c:  SExprInfo* pExprs = taosMemoryCalloc(*numOfExprs, sizeof(SExprInfo));
libs/executor/src/executil.c:  SqlFunctionCtx** pValCtx = taosMemoryCalloc(numOfOutput, POINTER_BYTES);
libs/executor/src/executil.c:    taosMemoryFreeClear(pValCtx);
libs/executor/src/executil.c:  SqlFunctionCtx* pFuncCtx = (SqlFunctionCtx*)taosMemoryCalloc(numOfOutput, sizeof(SqlFunctionCtx));
libs/executor/src/executil.c:  *rowEntryInfoOffset = taosMemoryCalloc(numOfOutput, sizeof(int32_t));
libs/executor/src/executil.c:    taosMemoryFreeClear(pFuncCtx);
libs/executor/src/executil.c:    pCtx->input.pData = taosMemoryCalloc(pFunct->numOfParams, POINTER_BYTES);
libs/executor/src/executil.c:    pCtx->input.pColumnDataAgg = taosMemoryCalloc(pFunct->numOfParams, POINTER_BYTES);
libs/executor/src/executil.c:  pCond->colList = taosMemoryCalloc(pCond->numOfCols, sizeof(SColumnInfo));
libs/executor/src/executil.c:  pCond->pSlotList = taosMemoryMalloc(sizeof(int32_t) * pCond->numOfCols);
libs/executor/src/executil.c:    taosMemoryFreeClear(pCond->colList);
libs/executor/src/executil.c:    taosMemoryFreeClear(pCond->pSlotList);
libs/executor/src/executil.c:  taosMemoryFreeClear(pCond->colList);
libs/executor/src/executil.c:  taosMemoryFreeClear(pCond->pSlotList);
libs/executor/src/executil.c:  STableListInfo* pListInfo = taosMemoryCalloc(1, sizeof(STableListInfo));
libs/executor/src/executil.c:  taosMemoryFreeClear(pTableListInfo->groupOffset);
libs/executor/src/executil.c:  taosMemoryFree(pTableListInfo);
libs/executor/src/executil.c:  taosMemoryFree(pTableListInfo->groupOffset);
libs/executor/src/executil.c:  pTableListInfo->groupOffset = taosMemoryMalloc(sizeof(int32_t) * pTableListInfo->numOfOuputGroups);
libs/executor/src/executil.c:  taosMemoryFree(pBuf);
libs/executor/src/executil.c:    taosMemoryFree(pBuf);
libs/executor/src/hashjoinoperator.c:  pTable->keyCols = taosMemoryMalloc(pTable->keyNum * sizeof(SHJoinColInfo));
libs/executor/src/hashjoinoperator.c:    pTable->keyBuf = taosMemoryMalloc(bufSize);
libs/executor/src/hashjoinoperator.c:  pTable->valCols = taosMemoryMalloc(pTable->valNum * sizeof(SHJoinColInfo));
libs/executor/src/hashjoinoperator.c:  pTable->primCol = taosMemoryMalloc(sizeof(SHJoinColMap));
libs/executor/src/hashjoinoperator.c:  pInfo->pResColMap = taosMemoryCalloc(pJoinNode->pTargets->length, sizeof(int8_t));
libs/executor/src/hashjoinoperator.c:  page.data = taosMemoryMalloc(page.pageSize);
libs/executor/src/hashjoinoperator.c:  taosMemoryFreeClear(pTable->keyCols);
libs/executor/src/hashjoinoperator.c:  taosMemoryFreeClear(pTable->keyBuf);
libs/executor/src/hashjoinoperator.c:  taosMemoryFreeClear(pTable->valCols);
libs/executor/src/hashjoinoperator.c:  taosMemoryFree(pTable->primCol);
libs/executor/src/hashjoinoperator.c:  taosMemoryFree(pInfo->data);
libs/executor/src/hashjoinoperator.c:      taosMemoryFree(pRow);
libs/executor/src/hashjoinoperator.c:    group.rows = taosMemoryMalloc(sizeof(SBufRowInfo));
libs/executor/src/hashjoinoperator.c:    pRow = taosMemoryMalloc(sizeof(SBufRowInfo));
libs/executor/src/hashjoinoperator.c:    taosMemoryFree(pRow);
libs/executor/src/hashjoinoperator.c:      taosMemoryFree(pRow);
libs/executor/src/hashjoinoperator.c:  taosMemoryFreeClear(pJoinOperator->pResColMap);
libs/executor/src/hashjoinoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/hashjoinoperator.c:  SHJoinOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SHJoinOperatorInfo));
libs/executor/src/hashjoinoperator.c:  SOperatorInfo*     pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/hashjoinoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(pBlock->pBlockAgg);
libs/executor/src/scanoperator.c:        taosMemoryFreeClear(pBlock->pBlockAgg);
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(pBlock->pBlockAgg);
libs/executor/src/scanoperator.c:  taosMemoryFree((void*)pVal->pName);
libs/executor/src/scanoperator.c:  taosMemoryFree(pVal->pTags);
libs/executor/src/scanoperator.c:  taosMemoryFree(pVal);
libs/executor/src/scanoperator.c:  STableCachedVal* pVal = taosMemoryMalloc(sizeof(STableCachedVal));
libs/executor/src/scanoperator.c:    pVal->pTags = taosMemoryMalloc(pTag->len);
libs/executor/src/scanoperator.c:          taosMemoryFree(data);
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(pInfo->pResBlock->pBlockAgg);
libs/executor/src/scanoperator.c:  SFileBlockLoadRecorder* pRecorder = taosMemoryCalloc(1, sizeof(SFileBlockLoadRecorder));
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/scanoperator.c:  STableScanInfo* pInfo = taosMemoryCalloc(1, sizeof(STableScanInfo));
libs/executor/src/scanoperator.c:  SOperatorInfo*  pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/scanoperator.c:  STableScanInfo* pInfo = taosMemoryCalloc(1, sizeof(STableScanInfo));
libs/executor/src/scanoperator.c:  SOperatorInfo*  pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/scanoperator.c:  taosMemoryFree(pCur);
libs/executor/src/scanoperator.c:    bool* p = taosMemoryCalloc(pBlock->info.rows, sizeof(bool));
libs/executor/src/scanoperator.c:    taosMemoryFree(p);
libs/executor/src/scanoperator.c:  bool* p = taosMemoryCalloc(pBlock->info.rows, sizeof(bool));
libs/executor/src/scanoperator.c:      void *tmq = taosMemoryMalloc(offset->primaryKey.nData + VARSTR_HEADER_SIZE);
libs/executor/src/scanoperator.c:      taosMemoryFree(tmq);
libs/executor/src/scanoperator.c:  taosMemoryFree(p);
libs/executor/src/scanoperator.c:  bool*   p = taosMemoryCalloc(numOfRows, sizeof(bool));
libs/executor/src/scanoperator.c:  taosMemoryFree(p);
libs/executor/src/scanoperator.c:      val.pData = taosMemoryMalloc(varDataLen(tmp));
libs/executor/src/scanoperator.c: *pBuff = taosMemoryCalloc(1, len);
libs/executor/src/scanoperator.c:    taosMemoryFree(pBuf);
libs/executor/src/scanoperator.c:  void* pUpInfo = taosMemoryCalloc(1, sizeof(SUpdateInfo));
libs/executor/src/scanoperator.c:    taosMemoryFree(pUpInfo);
libs/executor/src/scanoperator.c:        taosMemoryFreeClear(data);
libs/executor/src/scanoperator.c:          taosMemoryFreeClear(data);
libs/executor/src/scanoperator.c:        void*   tBuf = taosMemoryCalloc(1, tLen);
libs/executor/src/scanoperator.c:          taosMemoryFreeClear(tBuf);
libs/executor/src/scanoperator.c:          taosMemoryFreeClear(data);
libs/executor/src/scanoperator.c:        taosMemoryFreeClear(data);
libs/executor/src/scanoperator.c:  taosMemoryFree(pRawScan);
libs/executor/src/scanoperator.c:  SStreamRawScanInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamRawScanInfo));
libs/executor/src/scanoperator.c:  SOperatorInfo*      pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/scanoperator.c:  taosMemoryFree(pInfo);
libs/executor/src/scanoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/scanoperator.c:    taosMemoryFree(pStreamScan->pPseudoExpr);
libs/executor/src/scanoperator.c:  taosMemoryFree(pStreamScan);
libs/executor/src/scanoperator.c:  void* pBuff = taosMemoryCalloc(1, len);
libs/executor/src/scanoperator.c:  taosMemoryFree(pBuff);
libs/executor/src/scanoperator.c:  SUpdateInfo* pUpInfo = taosMemoryCalloc(1, sizeof(SUpdateInfo));
libs/executor/src/scanoperator.c:  taosMemoryFree(pBuff);
libs/executor/src/scanoperator.c:  SStreamScanInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamScanInfo));
libs/executor/src/scanoperator.c:  SOperatorInfo*   pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/scanoperator.c:    SExprInfo* pSubTableExpr = taosMemoryCalloc(1, sizeof(SExprInfo));
libs/executor/src/scanoperator.c:      taosMemoryFree(buff);
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/scanoperator.c:        taosMemoryFree(data);
libs/executor/src/scanoperator.c:    taosMemoryFree(pInfo->pTagVal);
libs/executor/src/scanoperator.c:  SColumnInfoData* pColumnData = taosMemoryCalloc(1, sizeof(SColumnInfoData));
libs/executor/src/scanoperator.c:    taosMemoryFree(pColumnData);
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(output.columnData);
libs/executor/src/scanoperator.c:        char* tmp = taosMemoryMalloc(tagVal.nData + VARSTR_HEADER_SIZE + 1);
libs/executor/src/scanoperator.c:        taosMemoryFree(tmp);
libs/executor/src/scanoperator.c:      info.pTagVal = taosMemoryMalloc(pCur->vLen);
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/scanoperator.c:  STagScanInfo*  pInfo = taosMemoryCalloc(1, sizeof(STagScanInfo));
libs/executor/src/scanoperator.c:  SOperatorInfo* pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/scanoperator.c:  taosMemoryFree(pInfo);
libs/executor/src/scanoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/scanoperator.c:  dst->colList = taosMemoryCalloc(src->numOfCols, sizeof(SColumnInfo));
libs/executor/src/scanoperator.c:  STmsSubTablesMergeInfo* pSubTblsInfo = taosMemoryCalloc(1, sizeof(STmsSubTablesMergeInfo));
libs/executor/src/scanoperator.c:  pSubTblsInfo->aInputs = taosMemoryCalloc(pSubTblsInfo->numSubTables, sizeof(STmsSubTableInput));
libs/executor/src/scanoperator.c:    taosMemoryFree(pSubTblsInfo);
libs/executor/src/scanoperator.c:    taosMemoryFree(pSubTblsInfo->aInputs);
libs/executor/src/scanoperator.c:    taosMemoryFree(pSubTblsInfo);
libs/executor/src/scanoperator.c:      taosMemoryFree(pInput->tblCond.colList);
libs/executor/src/scanoperator.c:    taosMemoryFree(pSubTblsInfo->aInputs);
libs/executor/src/scanoperator.c:    taosMemoryFree(pSubTblsInfo);
libs/executor/src/scanoperator.c:    //taosMemoryTrim(0);
libs/executor/src/scanoperator.c:  STableMergeScanSortSourceParam *param = taosMemoryCalloc(1, sizeof(STableMergeScanSortSourceParam));
libs/executor/src/scanoperator.c:  SSortSource* ps = taosMemoryCalloc(1, sizeof(SSortSource));
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/scanoperator.c:  STableMergeScanExecInfo* execInfo = taosMemoryCalloc(1, sizeof(STableMergeScanExecInfo));
libs/executor/src/scanoperator.c:  STableMergeScanInfo* pInfo = taosMemoryCalloc(1, sizeof(STableMergeScanInfo));
libs/executor/src/scanoperator.c:  SOperatorInfo*       pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/scanoperator.c:  taosMemoryFree(pInfo);
libs/executor/src/scanoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/scanoperator.c:  STableCountScanOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(STableCountScanOperatorInfo));
libs/executor/src/scanoperator.c:  SOperatorInfo*               pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/scanoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/filloperator.c:  taosMemoryFreeClear(pInfo->p);
libs/executor/src/filloperator.c:  taosMemoryFreeClear(param);
libs/executor/src/filloperator.c:  pInfo->p = taosMemoryCalloc(numOfCols, POINTER_BYTES);
libs/executor/src/filloperator.c:    taosMemoryFree(pInfo->pFillInfo);
libs/executor/src/filloperator.c:    taosMemoryFree(pInfo->p);
libs/executor/src/filloperator.c:    SExprInfo* pExpr = taosMemoryRealloc(pExprSupp->pExprInfo, (pExprSupp->numOfExprs + 1) * sizeof(SExprInfo));
libs/executor/src/filloperator.c:  SFillOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SFillOperatorInfo));
libs/executor/src/filloperator.c:  SOperatorInfo*     pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/filloperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/querytask.c:  SExecTaskInfo* pTaskInfo = taosMemoryCalloc(1, sizeof(SExecTaskInfo));
libs/executor/src/querytask.c:  pTaskInfo->id.str = taosMemoryMalloc(64);
libs/executor/src/querytask.c:    taosMemoryFree(sql);
libs/executor/src/querytask.c:  taosMemoryFreeClear(pSchemaInfo->dbname);
libs/executor/src/querytask.c:  taosMemoryFreeClear(pSchemaInfo->tablename);
libs/executor/src/querytask.c:      taosMemoryFree(schemaInfo.tablename);
libs/executor/src/querytask.c:      taosMemoryFree(schemaInfo.dbname);
libs/executor/src/querytask.c:  SSchemaWrapper* pqSw = taosMemoryCalloc(1, sizeof(SSchemaWrapper));
libs/executor/src/querytask.c:  pqSw->pSchema = taosMemoryCalloc(numOfCols + numOfTags, sizeof(SSchema));
libs/executor/src/querytask.c:  taosMemoryFreeClear(pTaskInfo->sql);
libs/executor/src/querytask.c:  taosMemoryFreeClear(pTaskInfo->id.str);
libs/executor/src/querytask.c:  taosMemoryFreeClear(pTaskInfo);
libs/executor/src/eventwindowoperator.c:  SEventWindowOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SEventWindowOperatorInfo));
libs/executor/src/eventwindowoperator.c:  SOperatorInfo*            pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/eventwindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/eventwindowoperator.c:    taosMemoryFree(pInfo->pRow);
libs/executor/src/eventwindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/eventwindowoperator.c:    SResultRow* p = taosMemoryCalloc(1, pAggSup->resultRowSize);
libs/executor/src/eventwindowoperator.c:  taosMemoryFree(ps);
libs/executor/src/eventwindowoperator.c:  taosMemoryFree(pe);
libs/executor/src/aggregateoperator.c:  SAggOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SAggOperatorInfo));
libs/executor/src/aggregateoperator.c:  SOperatorInfo*    pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/aggregateoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/aggregateoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/aggregateoperator.c:  pAggSup->keyBuf = taosMemoryCalloc(1, keyBufSize + POINTER_BYTES + sizeof(int64_t));
libs/executor/src/aggregateoperator.c:  taosMemoryFreeClear(pAggSup->keyBuf);
libs/executor/src/streamcountwindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/streamcountwindowoperator.c:    void*   buf = taosMemoryCalloc(1, len);
libs/executor/src/streamcountwindowoperator.c:    taosMemoryFree(buf);
libs/executor/src/streamcountwindowoperator.c:  char*                        pBuff = taosMemoryCalloc(1, resSize);
libs/executor/src/streamcountwindowoperator.c:  taosMemoryFreeClear(pBuff);
libs/executor/src/streamcountwindowoperator.c:  taosMemoryFree(pBuf);
libs/executor/src/streamcountwindowoperator.c:  SStreamCountAggOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamCountAggOperatorInfo));
libs/executor/src/streamcountwindowoperator.c:  SOperatorInfo*               pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/streamcountwindowoperator.c:    taosMemoryFree(buff);
libs/executor/src/streamcountwindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/mergejoinoperator.c:          char* p2 = taosMemoryMalloc(len);
libs/executor/src/mergejoinoperator.c:          taosMemoryFree(p2);
libs/executor/src/mergejoinoperator.c:        pBitmap = taosMemoryCalloc(1, bmLen);
libs/executor/src/mergejoinoperator.c:    taosMemoryFree(pBitmap);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(p);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(p);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(p);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(p);
libs/executor/src/mergejoinoperator.c:  SOperatorInfo** p = taosMemoryMalloc(2 * POINTER_BYTES);
libs/executor/src/mergejoinoperator.c:  pTable->primCol = taosMemoryMalloc(sizeof(SMJoinColInfo));
libs/executor/src/mergejoinoperator.c:  *pCols = taosMemoryMalloc((*colNum) * sizeof(SMJoinColInfo));
libs/executor/src/mergejoinoperator.c:    pTable->keyBuf = taosMemoryMalloc(TMAX(rowSize, pTable->keyNullSize));
libs/executor/src/mergejoinoperator.c:  pTable->finCols = taosMemoryMalloc(LIST_LENGTH(pList) * sizeof(SMJoinColMap));
libs/executor/src/mergejoinoperator.c:      pTable->pRowBitmap = taosMemoryMalloc(pTable->rowBitmapSize);
libs/executor/src/mergejoinoperator.c:    pTable->pRowBitmap = taosMemoryRealloc(pTable->pRowBitmap, newSize);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(pTable->primCol);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(pTable->finCols);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(pTable->keyCols);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(pTable->keyBuf);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(pTable->pRowBitmap);
libs/executor/src/mergejoinoperator.c:  taosMemoryFreeClear(pJoin);
libs/executor/src/mergejoinoperator.c:  SMJoinOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SMJoinOperatorInfo));
libs/executor/src/mergejoinoperator.c:  SOperatorInfo*     pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/mergejoinoperator.c:    taosMemoryFree(pDownstream);
libs/executor/src/mergejoinoperator.c:    taosMemoryFree(pDownstream);
libs/executor/src/mergejoinoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/executorInt.c:    return taosMemoryMalloc(__size);
libs/executor/src/executorInt.c:    return taosMemoryCalloc(num, __size);
libs/executor/src/executorInt.c:    return taosMemoryRealloc(p, __size);
libs/executor/src/executorInt.c:    pColInfo = taosMemoryCalloc(1, sizeof(SColumnInfoData));
libs/executor/src/executorInt.c:    char* tmp = taosMemoryMalloc(pFuncParam->param.nLen + VARSTR_HEADER_SIZE);
libs/executor/src/executorInt.c:    taosMemoryFree(tmp);
libs/executor/src/executorInt.c:    pInput->pData[paramIndex] = taosMemoryCalloc(1, sizeof(SColumnInfoData));
libs/executor/src/executorInt.c:    da = taosMemoryCalloc(1, sizeof(SColumnDataAgg));
libs/executor/src/executorInt.c:  taosMemoryFree(p);
libs/executor/src/executorInt.c:        taosMemoryFreeClear(pExprInfo->base.pParam[j].pCol);
libs/executor/src/executorInt.c:    taosMemoryFree(pExprInfo->base.pParam);
libs/executor/src/executorInt.c:    taosMemoryFree(pExprInfo->pExpr);
libs/executor/src/executorInt.c:    taosMemoryFreeClear(pCtx[i].subsidiaries.pCtx);
libs/executor/src/executorInt.c:    taosMemoryFreeClear(pCtx[i].subsidiaries.buf);
libs/executor/src/executorInt.c:    taosMemoryFree(pCtx[i].input.pData);
libs/executor/src/executorInt.c:    taosMemoryFree(pCtx[i].input.pColumnDataAgg);
libs/executor/src/executorInt.c:      taosMemoryFree(pCtx[i].udfName);
libs/executor/src/executorInt.c:  taosMemoryFreeClear(pCtx);
libs/executor/src/executorInt.c:    taosMemoryFreeClear(pSupp->pExprInfo);
libs/executor/src/executorInt.c:  taosMemoryFree(pSupp->rowEntryInfoOffset);
libs/executor/src/executorInt.c:      SInserterParam* pInserterParam = taosMemoryCalloc(1, sizeof(SInserterParam));
libs/executor/src/executorInt.c:      SDeleterParam* pDeleterParam = taosMemoryCalloc(1, sizeof(SDeleterParam));
libs/executor/src/executorInt.c:        taosMemoryFree(pDeleterParam);
libs/executor/src/executorInt.c:  taosMemoryFree(pParam->value);
libs/executor/src/executorInt.c:  taosMemoryFree(pParam);
libs/executor/src/executorInt.c:      taosMemoryFreeClear(*pppDownstramParam);
libs/executor/src/tlinearhash.c:    char* p = taosMemoryRealloc(pHashObj->pBucket, POINTER_BYTES * newLen);
libs/executor/src/tlinearhash.c:  SLHashBucket* pBucket = taosMemoryCalloc(1, sizeof(SLHashBucket));
libs/executor/src/tlinearhash.c:  SLHashObj* pHashObj = taosMemoryCalloc(1, sizeof(SLHashObj));
libs/executor/src/tlinearhash.c:    taosMemoryFree(pHashObj);
libs/executor/src/tlinearhash.c:    taosMemoryFree(pHashObj);
libs/executor/src/tlinearhash.c:  pHashObj->pBucket = taosMemoryCalloc(pHashObj->numOfAlloc, POINTER_BYTES);
libs/executor/src/tlinearhash.c:    taosMemoryFreeClear(pHashObj);
libs/executor/src/tlinearhash.c:    taosMemoryFreeClear(pHashObj->pBucket[i]);
libs/executor/src/tlinearhash.c:  taosMemoryFreeClear(pHashObj->pBucket);
libs/executor/src/tlinearhash.c:  taosMemoryFreeClear(pHashObj);
libs/executor/src/dataDispatcher.c:  pBuf->pData = taosMemoryMalloc(pBuf->allocSize);
libs/executor/src/dataDispatcher.c:  taosMemoryFreeClear(pDispatcher->nextOutput.pData);  // todo persistent
libs/executor/src/dataDispatcher.c:  taosMemoryFreeClear(pDispatcher->nextOutput.pData);
libs/executor/src/dataDispatcher.c:      taosMemoryFreeClear(pBuf->pData);
libs/executor/src/dataDispatcher.c:  taosMemoryFree(pDispatcher->pManager);
libs/executor/src/dataDispatcher.c:  SDataDispatchHandle* dispatcher = taosMemoryCalloc(1, sizeof(SDataDispatchHandle));
libs/executor/src/dataDispatcher.c:    taosMemoryFree(dispatcher);
libs/executor/src/dataDispatcher.c:  taosMemoryFree(pManager);
libs/executor/src/dataSinkMgt.c:  SDataSinkManager* pSinkManager = taosMemoryMalloc(sizeof(SDataSinkManager));
libs/executor/src/dataSinkMgt.c:  taosMemoryFree(pSinkManager);
libs/executor/src/dataSinkMgt.c:  taosMemoryFree(pHandleImpl);
libs/executor/src/cachescanoperator.c:  SCacheRowsScanInfo* pInfo = taosMemoryCalloc(1, sizeof(SCacheRowsScanInfo));
libs/executor/src/cachescanoperator.c:  SOperatorInfo*      pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/cachescanoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/cachescanoperator.c:  taosMemoryFree(pInfo->pSlotIds);
libs/executor/src/cachescanoperator.c:  taosMemoryFree(pInfo->pDstSlotIds);
libs/executor/src/cachescanoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/cachescanoperator.c:  *pSlotIds = taosMemoryMalloc(numOfCols * sizeof(int32_t));
libs/executor/src/cachescanoperator.c:  *pDstSlotIds = taosMemoryMalloc(numOfCols * sizeof(int32_t));
libs/executor/src/cachescanoperator.c:    taosMemoryFree(*pSlotIds);
libs/executor/src/groupcacheoperator.c:  pCols->pColsInfo = taosMemoryMalloc(pCols->colNum * sizeof(SGroupColInfo));
libs/executor/src/groupcacheoperator.c:    pCols->pBuf = taosMemoryMalloc(pCols->bufSize);
libs/executor/src/groupcacheoperator.c:  char* buf = taosMemoryMalloc(pGrpCacheOperator->downstreamNum * 32 + 100);
libs/executor/src/groupcacheoperator.c:  taosMemoryFree(buf);
libs/executor/src/groupcacheoperator.c:    taosMemoryFree(*ppBlock);
libs/executor/src/groupcacheoperator.c:  taosMemoryFree(pGrpCacheOperator->pDownstreams);
libs/executor/src/groupcacheoperator.c:    taosMemoryFreeClear(p->pData);
libs/executor/src/groupcacheoperator.c:      taosMemoryFreeClear(p->varmeta.offset);
libs/executor/src/groupcacheoperator.c:      taosMemoryFreeClear(p->nullbitmap);
libs/executor/src/groupcacheoperator.c:  taosMemoryFree(pGrpCacheOperator->groupColsInfo.pColsInfo);
libs/executor/src/groupcacheoperator.c:  taosMemoryFree(pGrpCacheOperator->groupColsInfo.pBuf);
libs/executor/src/groupcacheoperator.c:  taosMemoryFree(pGrpCacheOperator->execInfo.pDownstreamBlkNum);
libs/executor/src/groupcacheoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/groupcacheoperator.c:  pBufInfo->pBuf = taosMemoryMalloc(bufSize);
libs/executor/src/groupcacheoperator.c:  *ppDst = taosMemoryMalloc(sizeof(*pSrc));
libs/executor/src/groupcacheoperator.c:    taosMemoryFree(*ppDst);
libs/executor/src/groupcacheoperator.c:  *ppBuf = taosMemoryMalloc(pBasic->bufSize);
libs/executor/src/groupcacheoperator.c:    taosMemoryFreeClear(*ppBuf);
libs/executor/src/groupcacheoperator.c:    taosMemoryFree(pBuf);
libs/executor/src/groupcacheoperator.c:  taosMemoryFree(pBlk->pBuf);
libs/executor/src/groupcacheoperator.c:  pInfo->execInfo.pDownstreamBlkNum = taosMemoryCalloc(pOperator->numOfDownstream, sizeof(int64_t));
libs/executor/src/groupcacheoperator.c:  pInfo->pDownstreams = taosMemoryCalloc(pOperator->numOfDownstream, sizeof(*pInfo->pDownstreams));
libs/executor/src/groupcacheoperator.c:  SGroupCacheOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SGroupCacheOperatorInfo));
libs/executor/src/groupcacheoperator.c:  SOperatorInfo*     pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/groupcacheoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/timewindowoperator.c:      taosMemoryFree(pNode);
libs/executor/src/timewindowoperator.c:      taosMemoryFree(pNode);
libs/executor/src/timewindowoperator.c:    pOperatorInfo->pBQ = createBoundedQueue(pOperatorInfo->limit - 1, tsKeyCompFn, taosMemoryFree, pOperatorInfo);
libs/executor/src/timewindowoperator.c:  PriorityQueueNode node = {.data = taosMemoryMalloc(sizeof(TSKEY))};
libs/executor/src/timewindowoperator.c:    taosMemoryFree(node.data);
libs/executor/src/timewindowoperator.c:    taosMemoryFree(pNode);
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(pInfo->stateKey.pData);
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/timewindowoperator.c:  taosMemoryFree(pKey->pData);
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/timewindowoperator.c:      key.pData = taosMemoryCalloc(1, c.bytes);
libs/executor/src/timewindowoperator.c:      key.pData = taosMemoryCalloc(1, c.bytes);
libs/executor/src/timewindowoperator.c:  SIntervalAggOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SIntervalAggOperatorInfo));
libs/executor/src/timewindowoperator.c:  SOperatorInfo*            pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/timewindowoperator.c:  SStateWindowOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStateWindowOperatorInfo));
libs/executor/src/timewindowoperator.c:  SOperatorInfo*            pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/timewindowoperator.c:  pInfo->stateKey.pData = taosMemoryCalloc(1, pInfo->stateCol.bytes);
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/timewindowoperator.c:  SSessionAggOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SSessionAggOperatorInfo));
libs/executor/src/timewindowoperator.c:  SOperatorInfo*           pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/timewindowoperator.c:  SMergeAlignedIntervalAggOperatorInfo* miaInfo = taosMemoryCalloc(1, sizeof(SMergeAlignedIntervalAggOperatorInfo));
libs/executor/src/timewindowoperator.c:  SOperatorInfo*                        pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/timewindowoperator.c:  miaInfo->intervalAggOperatorInfo = taosMemoryCalloc(1, sizeof(SIntervalAggOperatorInfo));
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/timewindowoperator.c:  SMergeIntervalAggOperatorInfo* pMergeIntervalInfo = taosMemoryCalloc(1, sizeof(SMergeIntervalAggOperatorInfo));
libs/executor/src/timewindowoperator.c:  SOperatorInfo*                 pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/timewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/operator.c:  p->pDownstream = taosMemoryCalloc(1, num * POINTER_BYTES);
libs/executor/src/operator.c:  SOperatorInfo** ops = taosMemoryCalloc(size, POINTER_BYTES);
libs/executor/src/operator.c:      taosMemoryFree(ops);
libs/executor/src/operator.c:    taosMemoryFree(ops);
libs/executor/src/operator.c:  taosMemoryFree(ops);
libs/executor/src/operator.c:    taosMemoryFreeClear(pOperator->pDownstream);
libs/executor/src/operator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/operator.c:      //      taosMemoryFreeClear(*pRes);
libs/executor/src/operator.c:          SExchangeOperatorBatchParam* pBatch = taosMemoryMalloc(sizeof(SExchangeOperatorBatchParam));
libs/executor/src/operator.c:            taosMemoryFree(pBatch);
libs/executor/src/operator.c:          taosMemoryFree(pDst->value);
libs/executor/src/operator.c:    *pppDownstramParam = taosMemoryCalloc(pOperator->numOfDownstream, POINTER_BYTES);
libs/executor/src/dataInserter.c:    pInserter->submitRes.pRsp = taosMemoryCalloc(1, sizeof(SSubmitRsp2));
libs/executor/src/dataInserter.c:      taosMemoryFree(pInserter->submitRes.pRsp);
libs/executor/src/dataInserter.c:          taosMemoryFree(pInserter->submitRes.pRsp);
libs/executor/src/dataInserter.c:    taosMemoryFree(pInserter->submitRes.pRsp);
libs/executor/src/dataInserter.c:  taosMemoryFree(pMsg->pData);
libs/executor/src/dataInserter.c:  SMsgSendInfo* pMsgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
libs/executor/src/dataInserter.c:    taosMemoryFreeClear(pMsg);
libs/executor/src/dataInserter.c:  SSubmitRspParam* pParam = taosMemoryCalloc(1, sizeof(SSubmitRspParam));
libs/executor/src/dataInserter.c:  pMsgSendInfo->paramFreeFp = taosMemoryFree;
libs/executor/src/dataInserter.c:    pBuf = taosMemoryMalloc(len);
libs/executor/src/dataInserter.c:    taosMemoryFree(pBuf);
libs/executor/src/dataInserter.c:    if (!(pReq = taosMemoryMalloc(sizeof(SSubmitReq2)))) {
libs/executor/src/dataInserter.c:      taosMemoryFree(pReq);
libs/executor/src/dataInserter.c:        taosMemoryFree(pReq);
libs/executor/src/dataInserter.c:  taosMemoryFree(pReq);
libs/executor/src/dataInserter.c:  taosMemoryFree(pInserter->pSchema);
libs/executor/src/dataInserter.c:  taosMemoryFree(pInserter->pParam);
libs/executor/src/dataInserter.c:  taosMemoryFree(pInserter->pManager);
libs/executor/src/dataInserter.c:  SDataInserterHandle* inserter = taosMemoryCalloc(1, sizeof(SDataInserterHandle));
libs/executor/src/dataInserter.c:    taosMemoryFree(pParam);
libs/executor/src/dataInserter.c:    taosMemoryFree(inserter);
libs/executor/src/dataInserter.c:    taosMemoryFree(pManager);
libs/executor/src/timesliceoperator.c:        current.val = taosMemoryCalloc(pLinearInfo->bytes, 1);
libs/executor/src/timesliceoperator.c:        taosMemoryFree(current.val);
libs/executor/src/timesliceoperator.c:    key.pData = taosMemoryCalloc(1, pColInfo->info.bytes);
libs/executor/src/timesliceoperator.c:    key.pData = taosMemoryCalloc(1, pColInfo->info.bytes);
libs/executor/src/timesliceoperator.c:    linearInfo.start.val = taosMemoryCalloc(1, pColInfo->info.bytes);
libs/executor/src/timesliceoperator.c:    linearInfo.end.val = taosMemoryCalloc(1, pColInfo->info.bytes);
libs/executor/src/timesliceoperator.c:  pInfo->pPrevGroupKey = taosMemoryCalloc(1, sizeof(SGroupKeys));
libs/executor/src/timesliceoperator.c:      pInfo->pPrevGroupKey->pData = taosMemoryCalloc(1, pInfo->pPrevGroupKey->bytes);
libs/executor/src/timesliceoperator.c:  STimeSliceOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(STimeSliceOperatorInfo));
libs/executor/src/timesliceoperator.c:  SOperatorInfo*          pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/timesliceoperator.c:      pInfo->prevKey.pks[0].pData = taosMemoryCalloc(1, pInfo->pkCol.bytes);
libs/executor/src/timesliceoperator.c:  taosMemoryFree(pInfo);
libs/executor/src/timesliceoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/timesliceoperator.c:    taosMemoryFree(pKey->pData);
libs/executor/src/timesliceoperator.c:    taosMemoryFree(pKey->pData);
libs/executor/src/timesliceoperator.c:    taosMemoryFree(pKey->start.val);
libs/executor/src/timesliceoperator.c:    taosMemoryFree(pKey->end.val);
libs/executor/src/timesliceoperator.c:    taosMemoryFree(pInfo->pPrevGroupKey->pData);
libs/executor/src/timesliceoperator.c:    taosMemoryFree(pInfo->pPrevGroupKey);
libs/executor/src/timesliceoperator.c:  taosMemoryFree(pInfo->pFillColInfo);
libs/executor/src/timesliceoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/countwindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/countwindowoperator.c:  SCountWindowOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SCountWindowOperatorInfo));
libs/executor/src/countwindowoperator.c:  SOperatorInfo*            pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/countwindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/groupoperator.c:  taosMemoryFree(pKey->pData);
libs/executor/src/groupoperator.c:  taosMemoryFreeClear(pInfo->keyBuf);
libs/executor/src/groupoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/groupoperator.c:    key.pData = taosMemoryCalloc(1, pCol->bytes);
libs/executor/src/groupoperator.c:  (*keyBuf) = taosMemoryCalloc(1, (*keyLen));
libs/executor/src/groupoperator.c:    taosMemoryFree(pGroupResInfo->pBuf);
libs/executor/src/groupoperator.c:  SGroupbyOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SGroupbyOperatorInfo));
libs/executor/src/groupoperator.c:  SOperatorInfo*        pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/groupoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/groupoperator.c:  int32_t* offset = taosMemoryCalloc(numOfCols, sizeof(int32_t));
libs/executor/src/groupoperator.c:    taosMemoryFree(key.pData);
libs/executor/src/groupoperator.c:  taosMemoryFree(pInfo->keyBuf);
libs/executor/src/groupoperator.c:  taosMemoryFree(pInfo->columnOffset);
libs/executor/src/groupoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/groupoperator.c:  SPartitionOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SPartitionOperatorInfo));
libs/executor/src/groupoperator.c:  SOperatorInfo*          pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/groupoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/groupoperator.c:    taosMemoryFree(key.pData);
libs/executor/src/groupoperator.c:  taosMemoryFree(pInfo->partitionSup.keyBuf);
libs/executor/src/groupoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/groupoperator.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
libs/executor/src/groupoperator.c:  SStreamPartitionOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamPartitionOperatorInfo));
libs/executor/src/groupoperator.c:  SOperatorInfo*                pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/groupoperator.c:    SExprInfo* pSubTableExpr = taosMemoryCalloc(1, sizeof(SExprInfo));
libs/executor/src/groupoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/streamtimewindowoperator.c:      taosMemoryFree(value);
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFreeClear(pPos->pKey);
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(pPos);
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFreeClear(pInfo->pState->pTdbState->pOwner);
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFreeClear(pInfo->pState->pTdbState);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pInfo->pState);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/streamtimewindowoperator.c:      taosMemoryFreeClear(funName);
libs/executor/src/streamtimewindowoperator.c:    void*   buf = taosMemoryCalloc(1, len);
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(buf);
libs/executor/src/streamtimewindowoperator.c:      taosMemoryFree(pBuf);
libs/executor/src/streamtimewindowoperator.c:  SStreamIntervalOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamIntervalOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:  SOperatorInfo*               pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:  pInfo->pState = taosMemoryCalloc(1, sizeof(SStreamState));
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(buff);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pSup->pState);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pSup->pDummyCtx);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/streamtimewindowoperator.c:  pSup->pDummyCtx = (SqlFunctionCtx*)taosMemoryCalloc(numOfOutput, sizeof(SqlFunctionCtx));
libs/executor/src/streamtimewindowoperator.c:  pSup->pState = taosMemoryCalloc(1, sizeof(SStreamState));
libs/executor/src/streamtimewindowoperator.c:    void*   buf = taosMemoryCalloc(1, len);
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(buf);
libs/executor/src/streamtimewindowoperator.c:  char*                          pBuff = taosMemoryCalloc(1, resSize);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pBuff);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFree(pBuf);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFree(pBuf);
libs/executor/src/streamtimewindowoperator.c:  SStreamSessionAggOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamSessionAggOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:  SOperatorInfo*                 pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(buff);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/streamtimewindowoperator.c:    void*   buf = taosMemoryCalloc(1, len);
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(buf);
libs/executor/src/streamtimewindowoperator.c:  char*                        pBuff = taosMemoryCalloc(1, resSize);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pBuff);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFree(pBuf);
libs/executor/src/streamtimewindowoperator.c:  SStreamStateAggOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamStateAggOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:  SOperatorInfo*               pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(buff);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/streamtimewindowoperator.c:  SStreamIntervalOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamIntervalOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:  SOperatorInfo*               pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/streamtimewindowoperator.c:  pInfo->pState = taosMemoryCalloc(1, sizeof(SStreamState));
libs/executor/src/streamtimewindowoperator.c:    taosMemoryFree(buff);
libs/executor/src/streamtimewindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFree(pListHead->pLeftVg);
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFree(pListHead->pLeftUid);
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFree(pListHead->pRightVg);
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFree(pListHead->pRightUid);
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFree(pListHead);
libs/executor/src/dynqueryctrloperator.c:  taosMemoryFreeClear(param);
libs/executor/src/dynqueryctrloperator.c:  *ppRes = taosMemoryMalloc(sizeof(SOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  SGcOperatorParam* pGc = taosMemoryMalloc(sizeof(SGcOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  *ppRes = taosMemoryMalloc(sizeof(SOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  SGcNotifyOperatorParam* pGc = taosMemoryMalloc(sizeof(SGcNotifyOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  *ppRes = taosMemoryMalloc(sizeof(SOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  SExchangeOperatorParam* pExc = taosMemoryMalloc(sizeof(SExchangeOperatorParam));
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFree(pExc);
libs/executor/src/dynqueryctrloperator.c:  *ppRes = taosMemoryMalloc(sizeof(SOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  SExchangeOperatorBatchParam* pExc = taosMemoryMalloc(sizeof(SExchangeOperatorBatchParam));
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFreeClear(*ppRes);
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFree(pExc);
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFreeClear(*ppRes);
libs/executor/src/dynqueryctrloperator.c:  *ppRes = taosMemoryMalloc(sizeof(SOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  SSortMergeJoinOperatorParam* pJoin = taosMemoryMalloc(sizeof(SSortMergeJoinOperatorParam));
libs/executor/src/dynqueryctrloperator.c:  *ppRes = taosMemoryMalloc(sizeof(SOperatorParam));
libs/executor/src/dynqueryctrloperator.c:    taosMemoryFreeClear(*ppRes);
libs/executor/src/dynqueryctrloperator.c:  taosMemoryFree(pList->pLeftVg);
libs/executor/src/dynqueryctrloperator.c:  taosMemoryFree(pList->pLeftUid);
libs/executor/src/dynqueryctrloperator.c:  taosMemoryFree(pList->pRightVg);
libs/executor/src/dynqueryctrloperator.c:  taosMemoryFree(pList->pRightUid);
libs/executor/src/dynqueryctrloperator.c:  taosMemoryFree(pList);
libs/executor/src/dynqueryctrloperator.c:  SStbJoinTableList* pNew = taosMemoryMalloc(sizeof(SStbJoinTableList));
libs/executor/src/dynqueryctrloperator.c:  pNew->pLeftVg = taosMemoryMalloc(rows * sizeof(*pLeftVg));
libs/executor/src/dynqueryctrloperator.c:  pNew->pLeftUid = taosMemoryMalloc(rows * sizeof(*pLeftUid));
libs/executor/src/dynqueryctrloperator.c:  pNew->pRightVg = taosMemoryMalloc(rows * sizeof(*pRightVg));
libs/executor/src/dynqueryctrloperator.c:  pNew->pRightUid = taosMemoryMalloc(rows * sizeof(*pRightUid));
libs/executor/src/dynqueryctrloperator.c:  SDynQueryCtrlOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SDynQueryCtrlOperatorInfo));
libs/executor/src/dynqueryctrloperator.c:  SOperatorInfo*     pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/dynqueryctrloperator.c:  taosMemoryFree(pOperator);
libs/executor/src/sortoperator.c:  SSortOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SSortOperatorInfo));
libs/executor/src/sortoperator.c:  SOperatorInfo*     pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/sortoperator.c:    SSortOpGroupIdCalc* pGroupIdCalc = pInfo->pGroupIdCalc = taosMemoryCalloc(1, sizeof(SSortOpGroupIdCalc));
libs/executor/src/sortoperator.c:      pGroupIdCalc->keyBuf = taosMemoryCalloc(1, keyLen);
libs/executor/src/sortoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/sortoperator.c:  SSortSource* ps = taosMemoryCalloc(1, sizeof(SSortSource));
libs/executor/src/sortoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/sortoperator.c:  SSortExecInfo* pInfo = taosMemoryCalloc(1, sizeof(SSortExecInfo));
libs/executor/src/sortoperator.c:    taosMemoryFree(pCalc->keyBuf);
libs/executor/src/sortoperator.c:    taosMemoryFree(pCalc);
libs/executor/src/sortoperator.c:  SSortSource*           ps = taosMemoryCalloc(1, sizeof(SSortSource));
libs/executor/src/sortoperator.c:  SGroupSortSourceParam* param = taosMemoryCalloc(1, sizeof(SGroupSortSourceParam));
libs/executor/src/sortoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/sortoperator.c:  SGroupSortOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SGroupSortOperatorInfo));
libs/executor/src/sortoperator.c:  SOperatorInfo*          pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/sortoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/streameventwindowoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/streameventwindowoperator.c:  taosMemoryFree(pColStart);
libs/executor/src/streameventwindowoperator.c:  taosMemoryFree(pColEnd);
libs/executor/src/streameventwindowoperator.c:    void*   buf = taosMemoryCalloc(1, len);
libs/executor/src/streameventwindowoperator.c:    taosMemoryFree(buf);
libs/executor/src/streameventwindowoperator.c:  char*                        pBuff = taosMemoryCalloc(1, resSize);
libs/executor/src/streameventwindowoperator.c:  taosMemoryFreeClear(pBuff);
libs/executor/src/streameventwindowoperator.c:  taosMemoryFree(pBuf);
libs/executor/src/streameventwindowoperator.c:  SStreamEventAggOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamEventAggOperatorInfo));
libs/executor/src/streameventwindowoperator.c:  SOperatorInfo*               pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/streameventwindowoperator.c:    taosMemoryFree(buff);
libs/executor/src/streameventwindowoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/mergeoperator.c:    SSortSource* ps = taosMemoryCalloc(1, sizeof(SSortSource));
libs/executor/src/mergeoperator.c:  SSortExecInfo* pSortExecInfo = taosMemoryCalloc(1, sizeof(SSortExecInfo));
libs/executor/src/mergeoperator.c:  pNonSortMergeInfo->pSourceStatus = taosMemoryCalloc(pOperator->numOfDownstream, sizeof(*pNonSortMergeInfo->pSourceStatus));
libs/executor/src/mergeoperator.c:  taosMemoryFree(pNonSortMerge->pSourceStatus);
libs/executor/src/mergeoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/mergeoperator.c:  SMultiwayMergeOperatorInfo* pInfo = taosMemoryCalloc(1, sizeof(SMultiwayMergeOperatorInfo));
libs/executor/src/mergeoperator.c:  SOperatorInfo*              pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/mergeoperator.c:  taosMemoryFree(pOperator);
libs/executor/src/tfill.c:    key.pData = taosMemoryMalloc(pSchema->bytes);
libs/executor/src/tfill.c:    key.pData = taosMemoryMalloc(pSchema->bytes);
libs/executor/src/tfill.c:  SFillInfo* pFillInfo = taosMemoryCalloc(1, sizeof(SFillInfo));
libs/executor/src/tfill.c:    taosMemoryFree(pKey->pData);
libs/executor/src/tfill.c:    taosMemoryFree(pKey->pData);
libs/executor/src/tfill.c:  //    taosMemoryFreeClear(pFillInfo->pTags[i].tagVal);
libs/executor/src/tfill.c:            taosMemoryFree(pCol->fillVal.pz);
libs/executor/src/tfill.c:  taosMemoryFreeClear(pFillInfo->pTags);
libs/executor/src/tfill.c:  taosMemoryFreeClear(pFillInfo->pFillCol);
libs/executor/src/tfill.c:  taosMemoryFreeClear(pFillInfo);
libs/executor/src/tfill.c:  SFillColInfo* pFillCol = taosMemoryCalloc(numOfFillExpr + numOfNoFillExpr, sizeof(SFillColInfo));
libs/executor/src/exchangeoperator.c:            taosMemoryFreeClear(pDataInfo->pRsp);
libs/executor/src/exchangeoperator.c:          taosMemoryFreeClear(pDataInfo->pRsp);
libs/executor/src/exchangeoperator.c:      taosMemoryFreeClear(pDataInfo->pRsp);
libs/executor/src/exchangeoperator.c:          taosMemoryFreeClear(pDataInfo->pRsp);
libs/executor/src/exchangeoperator.c:  pInfo->pTaskId = taosMemoryCalloc(1, len);
libs/executor/src/exchangeoperator.c:  SExchangeInfo* pInfo = taosMemoryCalloc(1, sizeof(SExchangeInfo));
libs/executor/src/exchangeoperator.c:  SOperatorInfo* pOperator = taosMemoryCalloc(1, sizeof(SOperatorInfo));
libs/executor/src/exchangeoperator.c:  taosMemoryFreeClear(pOperator);
libs/executor/src/exchangeoperator.c:  taosMemoryFreeClear(pInfo->pRsp);
libs/executor/src/exchangeoperator.c:  taosMemoryFreeClear(pExInfo->pTaskId);
libs/executor/src/exchangeoperator.c:  taosMemoryFreeClear(param);
libs/executor/src/exchangeoperator.c:    taosMemoryFree(pMsg->pData);
libs/executor/src/exchangeoperator.c:    taosMemoryFree(pMsg->pData);
libs/executor/src/exchangeoperator.c:  *ppRes = taosMemoryMalloc(sizeof(SOperatorParam));
libs/executor/src/exchangeoperator.c:  STableScanOperatorParam* pScan = taosMemoryMalloc(sizeof(STableScanOperatorParam));
libs/executor/src/exchangeoperator.c:    taosMemoryFreeClear(*ppRes);
libs/executor/src/exchangeoperator.c:    taosMemoryFree(pScan);
libs/executor/src/exchangeoperator.c:    taosMemoryFreeClear(*ppRes);
libs/executor/src/exchangeoperator.c:  SFetchRspHandleWrapper* pWrapper = taosMemoryCalloc(1, sizeof(SFetchRspHandleWrapper));
libs/executor/src/exchangeoperator.c:    taosMemoryFree(pWrapper);
libs/executor/src/exchangeoperator.c:        taosMemoryFree(pWrapper);
libs/executor/src/exchangeoperator.c:      taosMemoryFree(pWrapper);
libs/executor/src/exchangeoperator.c:    void* msg = taosMemoryCalloc(1, msgSize);
libs/executor/src/exchangeoperator.c:      taosMemoryFree(pWrapper);
libs/executor/src/exchangeoperator.c:      taosMemoryFree(pWrapper);
libs/executor/src/exchangeoperator.c:      taosMemoryFree(msg);
libs/executor/src/exchangeoperator.c:    SMsgSendInfo* pMsgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
libs/executor/src/exchangeoperator.c:      taosMemoryFreeClear(msg);
libs/executor/src/exchangeoperator.c:      taosMemoryFree(pWrapper);
libs/executor/src/exchangeoperator.c:    pMsgSendInfo->paramFreeFp = taosMemoryFree;
libs/executor/src/exchangeoperator.c:      taosMemoryFreeClear(pDataInfo->pRsp);
libs/executor/src/exchangeoperator.c:      taosMemoryFreeClear(pDataInfo->pRsp);
libs/executor/src/exchangeoperator.c:    taosMemoryFreeClear(pDataInfo->pRsp);
libs/executor/src/tsort.c:  return taosMemoryCalloc(1, totalLen);
libs/executor/src/tsort.c:static void destoryAllocatedTuple(void* t) { taosMemoryFree(t); }
libs/executor/src/tsort.c:      *t = taosMemoryRealloc(*t, offset + length);
libs/executor/src/tsort.c:  TupleDesc* t = taosMemoryCalloc(1, sizeof(TupleDesc));
libs/executor/src/tsort.c:    taosMemoryFree(t);
libs/executor/src/tsort.c:    taosMemoryFree(pDesc);
libs/executor/src/tsort.c:  SSortHandle* pSortHandle = taosMemoryCalloc(1, sizeof(SSortHandle));
libs/executor/src/tsort.c:    taosMemoryFreeClear(pSource);
libs/executor/src/tsort.c:      taosMemoryFree((*pSource)->param);
libs/executor/src/tsort.c:    taosMemoryFreeClear(*pSource);
libs/executor/src/tsort.c:  taosMemoryFreeClear(pSortHandle->idStr);
libs/executor/src/tsort.c:  taosMemoryFreeClear(pSortHandle);
libs/executor/src/tsort.c:  SSortSource* pSource = taosMemoryCalloc(1, sizeof(SSortSource));
libs/executor/src/tsort.c:      taosMemoryFree(buf);
libs/executor/src/tsort.c:    pRegion->buf = taosMemoryMalloc(pMemFile->blockSize);
libs/executor/src/tsort.c:    *ppRow = taosMemoryMalloc(rowLen);
libs/executor/src/tsort.c:      taosMemoryFreeClear(*ppRow);
libs/executor/src/tsort.c:  SSortMemFile* pMemFile = taosMemoryCalloc(1, sizeof(SSortMemFile));
libs/executor/src/tsort.c:    pMemFile->writeBuf = taosMemoryMalloc(pMemFile->writeBufSize);
libs/executor/src/tsort.c:      if (pMemFile->aFileRegions) taosMemoryFreeClear(pMemFile->aFileRegions);
libs/executor/src/tsort.c:      if (pMemFile->writeBuf) taosMemoryFreeClear(pMemFile->writeBuf);
libs/executor/src/tsort.c:      taosMemoryFreeClear(pMemFile);
libs/executor/src/tsort.c:    taosMemoryFree(pRegion->buf);
libs/executor/src/tsort.c:  taosMemoryFree(pMemFile->writeBuf);
libs/executor/src/tsort.c:  taosMemoryFree(pMemFile);
libs/executor/src/tsort.c:  taosMemoryFree(pMemFile->writeBuf);
libs/executor/src/tsort.c:  pSup->aRowIdx = taosMemoryCalloc(numOfBlocks, sizeof(int32_t));
libs/executor/src/tsort.c:  pSup->aTs = taosMemoryCalloc(numOfBlocks, sizeof(int64_t*));
libs/executor/src/tsort.c:  pSup->aBlks = taosMemoryCalloc(numOfBlocks, sizeof(SSDataBlock*));
libs/executor/src/tsort.c:  taosMemoryFree(pSup->aRowIdx);
libs/executor/src/tsort.c:  taosMemoryFree(pSup->aTs);
libs/executor/src/tsort.c:  taosMemoryFree(pSup->aBlks);
libs/executor/src/tsort.c:        taosMemoryFree(pTree);
libs/executor/src/tsort.c:        taosMemoryFree(pTree);
libs/executor/src/tsort.c:    taosMemoryFree(source->param);
libs/executor/src/tsort.c:  taosMemoryFree(source);
libs/stream/test/tstreamUpdateTest.cpp:  // void   *buf = taosMemoryCalloc(1, bufLen);
libs/stream/test/tstreamUpdateTest.cpp:  // SUpdateInfo *pSU6 = taosMemoryCalloc(1, sizeof(SUpdateInfo));
libs/stream/test/backendTest.cpp:  SStreamTask *pTask = (SStreamTask *)taosMemoryCalloc(1, sizeof(SStreamTask));
libs/stream/test/backendTest.cpp:    taosMemoryFreeClear(pval);
libs/stream/test/backendTest.cpp:    taosMemoryFreeClear(val);
libs/stream/test/backendTest.cpp:    taosMemoryFreeClear(val);
libs/stream/test/backendTest.cpp:    taosMemoryFree(val);
libs/stream/test/backendTest.cpp:    taosMemoryFree(val);
libs/stream/src/streamBackendRocksdb.c:  char* state = taosMemoryCalloc(1, strlen(path) + 32);
libs/stream/src/streamBackendRocksdb.c:    char* chkp = taosMemoryCalloc(1, strlen(path) + 64);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(chkp);
libs/stream/src/streamBackendRocksdb.c:  char* metaPath = taosMemoryCalloc(1, strlen(path));
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(metaPath);
libs/stream/src/streamBackendRocksdb.c:      char* item = taosMemoryCalloc(1, i + 1);
libs/stream/src/streamBackendRocksdb.c:      item = taosMemoryCalloc(1, len - i);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(metaPath);
libs/stream/src/streamBackendRocksdb.c:  char*   src = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:  char*   dst = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(src);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(dst);
libs/stream/src/streamBackendRocksdb.c:  char*   tmp = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:  taosArrayDestroyP(list, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(tmp);
libs/stream/src/streamBackendRocksdb.c:  char*   srcName = taosMemoryCalloc(1, sLen + 64);
libs/stream/src/streamBackendRocksdb.c:  char*   dstName = taosMemoryCalloc(1, dLen + 64);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(srcName);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(dstName);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(srcName);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(dstName);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(srcName);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(dstName);
libs/stream/src/streamBackendRocksdb.c:  char* prefixPath = taosMemoryCalloc(1, strlen(path) + 128);
libs/stream/src/streamBackendRocksdb.c:  char* defaultPath = taosMemoryCalloc(1, strlen(path) + 256);
libs/stream/src/streamBackendRocksdb.c:  char* checkpointRoot = taosMemoryCalloc(1, pathLen);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(checkpointRoot);
libs/stream/src/streamBackendRocksdb.c:  char* chkptPath = taosMemoryCalloc(1, pathLen);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(chkptPath);
libs/stream/src/streamBackendRocksdb.c:  char* state = taosMemoryCalloc(1, strlen(path) + 32);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(state);
libs/stream/src/streamBackendRocksdb.c:  SBackendWrapper* pHandle = taosMemoryCalloc(1, sizeof(SBackendWrapper));
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(err);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFreeClear(err);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(backendPath);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pHandle);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(backendPath);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(head);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pHandle);
libs/stream/src/streamBackendRocksdb.c:        taosMemoryFreeClear(err);
libs/stream/src/streamBackendRocksdb.c:        taosMemoryFreeClear(err);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(wrapper->pHandle);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(wrapper->cfOpts);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(wrapper->param);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper);
libs/stream/src/streamBackendRocksdb.c:  char*   chkpPath = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(chkpPath);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(chkpPath);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(chkpPath);
libs/stream/src/streamBackendRocksdb.c:  // rocksdb_column_family_handle_t** ppCf = taosMemoryCalloc(nCf, sizeof(rocksdb_column_family_handle_t*));
libs/stream/src/streamBackendRocksdb.c:  char*   pChkpDir = taosMemoryCalloc(1, 256);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(pChkpDir);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(pChkpDir);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkpDir);
libs/stream/src/streamBackendRocksdb.c:  rocksdb_column_family_handle_t** ppCf = taosMemoryCalloc(nCf, sizeof(rocksdb_column_family_handle_t*));
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(err);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(err);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:  char*   pChkpDir = taosMemoryCalloc(1, 256);
libs/stream/src/streamBackendRocksdb.c:  char*   pChkpIdDir = taosMemoryCalloc(1, 256);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(pChkpDir);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(pChkpIdDir);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkpDir);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkpIdDir);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(ppCf);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(node);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(inst->pHandle);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(inst->cfOpt);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(inst->param);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(inst);
libs/stream/src/streamBackendRocksdb.c:    dst = taosMemoryCalloc(1, vlen + 128);
libs/stream/src/streamBackendRocksdb.c:    char*  p = taosMemoryCalloc(1, size);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(dst);
libs/stream/src/streamBackendRocksdb.c:      pOutput = taosMemoryCalloc(1, key.rawLen);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pCompressData);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pOutput);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pOutput);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pCompressData);
libs/stream/src/streamBackendRocksdb.c:  rocksdb_options_t**              cfOpts = taosMemoryCalloc(nCf, sizeof(rocksdb_options_t*));
libs/stream/src/streamBackendRocksdb.c:  rocksdb_column_family_handle_t** cfHandle = taosMemoryCalloc(nCf, sizeof(rocksdb_column_family_handle_t*));
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(cfOpts);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(cfHandle);
libs/stream/src/streamBackendRocksdb.c:  pTaskDb->pCf = taosMemoryCalloc(nCf, sizeof(rocksdb_column_family_handle_t*));
libs/stream/src/streamBackendRocksdb.c:  pTaskDb->pCfParams = taosMemoryCalloc(nCf, sizeof(RocksdbCfParam));
libs/stream/src/streamBackendRocksdb.c:  pTaskDb->pCfOpts = taosMemoryCalloc(nCf, sizeof(rocksdb_options_t*));
libs/stream/src/streamBackendRocksdb.c:  pTaskDb->pCompares = taosMemoryCalloc(nCf, sizeof(rocksdb_comparator_t*));
libs/stream/src/streamBackendRocksdb.c:  char* statePath = taosMemoryCalloc(1, strlen(path) + 128);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(statePath);
libs/stream/src/streamBackendRocksdb.c:  char* dbPath = taosMemoryCalloc(1, strlen(statePath) + 128);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(statePath);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(dbPath);
libs/stream/src/streamBackendRocksdb.c:  STaskDbWrapper* pTaskDb = taosMemoryCalloc(1, sizeof(STaskDbWrapper));
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:  if (err) taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(dbPath);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(statePath);
libs/stream/src/streamBackendRocksdb.c:      rocksdb_column_family_handle_t** cfs = taosMemoryCalloc(1, sizeof(rocksdb_column_family_handle_t*) * nCf);
libs/stream/src/streamBackendRocksdb.c:          taosMemoryFreeClear(err);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(cfs);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper->pCf);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper->pCompares);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper->pCfOpts);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper->pCfParams);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper->idstr);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper->path);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(wrapper);
libs/stream/src/streamBackendRocksdb.c:  char* buf = taosMemoryCalloc(1, strlen(pDb->path) + 128);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(buf);
libs/stream/src/streamBackendRocksdb.c:  char* temp = taosMemoryCalloc(1, strlen(pDb->path) + 32);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:  rocksdb_options_t**              cfOpts = taosMemoryCalloc(nCf, sizeof(rocksdb_options_t*));
libs/stream/src/streamBackendRocksdb.c:  RocksdbCfParam*                  params = taosMemoryCalloc(nCf, sizeof(RocksdbCfParam));
libs/stream/src/streamBackendRocksdb.c:  rocksdb_comparator_t**           pCompare = taosMemoryCalloc(nCf, sizeof(rocksdb_comparator_t*));
libs/stream/src/streamBackendRocksdb.c:  rocksdb_column_family_handle_t** cfHandle = taosMemoryCalloc(nCf, sizeof(rocksdb_column_family_handle_t*));
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(cfHandle);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(pCompare);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(params);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(cfOpts);
libs/stream/src/streamBackendRocksdb.c:        inst = taosMemoryCalloc(1, sizeof(RocksdbCfInst));
libs/stream/src/streamBackendRocksdb.c:        inst->pHandle = taosMemoryCalloc(cfLen, sizeof(rocksdb_column_family_handle_t*));
libs/stream/src/streamBackendRocksdb.c:        inst->cfOpt = taosMemoryCalloc(cfLen, sizeof(rocksdb_options_t*));
libs/stream/src/streamBackendRocksdb.c:        inst->param = taosMemoryCalloc(cfLen, sizeof(RocksdbCfParam));
libs/stream/src/streamBackendRocksdb.c:        inst->pCompares = taosMemoryCalloc(cfLen, sizeof(rocksdb_comparator_t*));
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(cfHandle);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pCompare);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(params);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(cfOpts);
libs/stream/src/streamBackendRocksdb.c:  SBackendCfWrapper* pBackendCfWrapper = taosMemoryCalloc(1, sizeof(SBackendCfWrapper));
libs/stream/src/streamBackendRocksdb.c:  RocksdbCfParam*           param = taosMemoryCalloc(cfLen, sizeof(RocksdbCfParam));
libs/stream/src/streamBackendRocksdb.c:  const rocksdb_options_t** cfOpt = taosMemoryCalloc(cfLen, sizeof(rocksdb_options_t*));
libs/stream/src/streamBackendRocksdb.c:  rocksdb_comparator_t** pCompare = taosMemoryCalloc(cfLen, sizeof(rocksdb_comparator_t*));
libs/stream/src/streamBackendRocksdb.c:  rocksdb_column_family_handle_t** cfHandle = taosMemoryCalloc(cfLen, sizeof(rocksdb_column_family_handle_t*));
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(inst);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(comp->comp);
libs/stream/src/streamBackendRocksdb.c:        taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(err);                                                                                        \
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(ttlV);                                                                                         \
libs/stream/src/streamBackendRocksdb.c:        taosMemoryFreeClear(err);                                                                                     \
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(val);                                                                                            \
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(err);                                                                                        \
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFree((void*)*pVal);
libs/stream/src/streamBackendRocksdb.c:  *pVal = taosMemoryMalloc(size);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(tmp);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(val);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(val);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(val);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(val);
libs/stream/src/streamBackendRocksdb.c:  void* tmp = taosMemoryMalloc(valSize);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFreeClear(*pVal);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(*pVal);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(*pVal);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(*pVal);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFreeClear(buf);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFreeClear(buf);
libs/stream/src/streamBackendRocksdb.c:  void*       tmp = taosMemoryMalloc(valSize);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(*pVal);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(*pVal);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(*pVal);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(ret);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(ttlV);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(ttlV);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(err);
libs/stream/src/streamBackendRocksdb.c:  char*   srcName = taosMemoryCalloc(1, sLen + 64);
libs/stream/src/streamBackendRocksdb.c:  char*   dstName = taosMemoryCalloc(1, dLen + 64);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(srcName);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(dstName);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(srcName);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFreeClear(dstName);
libs/stream/src/streamBackendRocksdb.c:      char* fname = taosMemoryCalloc(1, len + 1);
libs/stream/src/streamBackendRocksdb.c:  char*   p = taosMemoryCalloc(1, sz * 16 + 4);
libs/stream/src/streamBackendRocksdb.c:    char*  tname = taosMemoryCalloc(1, len + 1);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(tname);
libs/stream/src/streamBackendRocksdb.c:  char*   p = (char*)taosMemoryCalloc(1, 64 + sz * 64);
libs/stream/src/streamBackendRocksdb.c:    taosMemoryFree(p[i]);
libs/stream/src/streamBackendRocksdb.c:  taosArrayClearP(p->pAdd, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  taosArrayClearP(p->pDel, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFreeClear(p->pCurrent);
libs/stream/src/streamBackendRocksdb.c:      taosMemoryFreeClear(p->pManifest);
libs/stream/src/streamBackendRocksdb.c:        char* fname = taosMemoryCalloc(1, len + 1);
libs/stream/src/streamBackendRocksdb.c:      taosArrayClearP(p->pAdd, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:      taosArrayClearP(p->pDel, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  SDbChkp* p = taosMemoryCalloc(1, sizeof(SDbChkp));
libs/stream/src/streamBackendRocksdb.c:  p->buf = taosMemoryCalloc(1, p->len);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkp->buf);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkp->path);
libs/stream/src/streamBackendRocksdb.c:  taosArrayDestroyP(pChkp->pSST, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  taosArrayDestroyP(pChkp->pAdd, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  taosArrayDestroyP(pChkp->pDel, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkp->pCurrent);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkp->pManifest);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(pChkp);
libs/stream/src/streamBackendRocksdb.c:  char* srcBuf = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:  char* dstBuf = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:  char* srcDir = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:  char* dstDir = taosMemoryCalloc(1, len);
libs/stream/src/streamBackendRocksdb.c:  taosArrayClearP(p->pAdd, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  taosArrayClearP(p->pDel, taosMemoryFree);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(srcBuf);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(dstBuf);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(srcDir);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(dstDir);
libs/stream/src/streamBackendRocksdb.c:  SBkdMgt* p = taosMemoryCalloc(1, sizeof(SBkdMgt));
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(bm->path);
libs/stream/src/streamBackendRocksdb.c:  taosMemoryFree(bm);
libs/stream/src/streamBackendRocksdb.c:    char* path = taosMemoryCalloc(1, strlen(bm->path) + 64);
libs/stream/src/streamDispatch.c:    taosArrayDestroyP(pReq->data, taosMemoryFree);
libs/stream/src/streamDispatch.c:  SRetrieveTableRsp* pRetrieve = taosMemoryCalloc(1, dataStrLen);
libs/stream/src/streamDispatch.c:  taosMemoryFree(req.pRetrieve);
libs/stream/src/streamDispatch.c:    taosArrayDestroyP(pReq[i].data, taosMemoryFree);
libs/stream/src/streamDispatch.c:  taosMemoryFree(pReq);
libs/stream/src/streamDispatch.c:    SStreamDispatchReq* pReq = taosMemoryCalloc(1, sizeof(SStreamDispatchReq));
libs/stream/src/streamDispatch.c:    SStreamDispatchReq* pReqs = taosMemoryCalloc(numOfVgroups, sizeof(SStreamDispatchReq));
libs/stream/src/streamDispatch.c:  void*   buf = taosMemoryCalloc(1, dataStrLen);
libs/stream/src/streamQueue.c:  SStreamQueue* pQueue = taosMemoryCalloc(1, sizeof(SStreamQueue));
libs/stream/src/streamQueue.c:    taosMemoryFree(pQueue);
libs/stream/src/streamQueue.c:  taosMemoryFree(pQueue);
libs/stream/src/streamQueue.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
libs/stream/src/streamQueue.c:  taosMemoryFree(pBlock);
libs/stream/src/streamStartHistory.c:    taosMemoryFree(pInfo);
libs/stream/src/streamStartHistory.c:    taosMemoryFree(pInfo);
libs/stream/src/streamStartHistory.c:    taosMemoryFree(pInfo);
libs/stream/src/streamStartHistory.c:  taosMemoryFree(pInfo);
libs/stream/src/streamStartHistory.c:  SLaunchHTaskInfo* pInfo = taosMemoryCalloc(1, sizeof(SLaunchHTaskInfo));
libs/stream/src/streamStartHistory.c:      taosMemoryFree(pInfo);
libs/stream/src/streamUpdate.c:  SUpdateInfo *pInfo = taosMemoryCalloc(1, sizeof(SUpdateInfo));
libs/stream/src/streamUpdate.c:  pInfo->pKeyBuff = taosMemoryCalloc(1, sizeof(TSKEY) + sizeof(int64_t) + pkLen);
libs/stream/src/streamUpdate.c:  pInfo->pValueBuff = taosMemoryCalloc(1, sizeof(TSKEY) + pkLen);
libs/stream/src/streamUpdate.c:  taosMemoryFreeClear(pInfo->pKeyBuff);
libs/stream/src/streamUpdate.c:  taosMemoryFreeClear(pInfo->pValueBuff);
libs/stream/src/streamUpdate.c:  taosMemoryFree(pInfo);
libs/stream/src/streamUpdate.c:  pInfo->pKeyBuff = taosMemoryCalloc(1, sizeof(TSKEY) + sizeof(int64_t) + pInfo->pkColLen);
libs/stream/src/streamUpdate.c:  pInfo->pValueBuff = taosMemoryCalloc(1, sizeof(TSKEY) + pInfo->pkColLen);
libs/stream/src/streamState.c:  SStreamState* pState = taosMemoryCalloc(1, sizeof(SStreamState));
libs/stream/src/streamState.c:  pState->pTdbState = taosMemoryCalloc(1, sizeof(STdbState));
libs/stream/src/streamState.c:  taosMemoryFree(pTask);
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  taosMemoryFree(pCur);
libs/stream/src/streamState.c:  taosMemoryFree(val);
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamState.c:  *pVal = taosMemoryCalloc(1, TSDB_TABLE_NAME_LEN);
libs/stream/src/streamState.c:  taosMemoryFreeClear(pState->pTdbState);
libs/stream/src/streamState.c:  taosMemoryFreeClear(pState);
libs/stream/src/streamState.c:    dst->pTdbState = taosMemoryCalloc(1, sizeof(STdbState));
libs/stream/src/streamState.c:    dst->pTdbState->pOwner = taosMemoryCalloc(1, sizeof(SStreamTask));
libs/stream/src/streamState.c:  SStreamStateCur* pCur = taosMemoryCalloc(1, sizeof(SStreamStateCur));
libs/stream/src/streamSnapshot.c:  char* fullname = taosMemoryCalloc(1, strlen(path) + 32);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(fullname);
libs/stream/src/streamSnapshot.c:    char* buf = taosMemoryCalloc(1, 512);
libs/stream/src/streamSnapshot.c:    taosMemoryFree(buf);
libs/stream/src/streamSnapshot.c:  char* path = taosMemoryCalloc(1, strlen(pSnap->dbPrefixPath) + 256);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(path);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(pSnap->pCheckpointMeta);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(pSnap->pCurrent);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(pSnap->pMainfest);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(pSnap->pOptions);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(pSnap->path);
libs/stream/src/streamSnapshot.c:    taosMemoryFree(sst);
libs/stream/src/streamSnapshot.c:      taosMemoryFree(pItem->name);
libs/stream/src/streamSnapshot.c:      taosMemoryFree(pSnap->dbPrefixPath);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(handle->metaPath);
libs/stream/src/streamSnapshot.c:  SStreamSnapReader* pReader = taosMemoryCalloc(1, sizeof(SStreamSnapReader));
libs/stream/src/streamSnapshot.c:    taosMemoryFree(pReader);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(pReader);
libs/stream/src/streamSnapshot.c:  uint8_t* buf = taosMemoryCalloc(1, sizeof(SStreamSnapBlockHdr) + kBlockSize);
libs/stream/src/streamSnapshot.c:    taosMemoryFree(buf);
libs/stream/src/streamSnapshot.c:  SStreamSnapWriter* pWriter = taosMemoryCalloc(1, sizeof(SStreamSnapWriter));
libs/stream/src/streamSnapshot.c:    char* path = taosMemoryCalloc(1, strlen(pHandle->metaPath) + 256);
libs/stream/src/streamSnapshot.c:  taosMemoryFree(pWriter);
libs/stream/src/streamTask.c:  taosMemoryFree(*pInfo);
libs/stream/src/streamTask.c:  SStreamUpstreamEpInfo* pEpInfo = taosMemoryMalloc(sizeof(SStreamUpstreamEpInfo));
libs/stream/src/streamTask.c:  SStreamTask* pTask = (SStreamTask*)taosMemoryCalloc(1, sizeof(SStreamTask));
libs/stream/src/streamTask.c:    taosMemoryFreeClear(pTask);
libs/stream/src/streamTask.c:    taosMemoryFree(pTask->exec.qmsg);
libs/stream/src/streamTask.c:    taosMemoryFree(pTask->outputInfo.tbSink.pTSchema);
libs/stream/src/streamTask.c:  taosMemoryFree(pTask->outputInfo.pTokenBucket);
libs/stream/src/streamTask.c:    char* path = taosMemoryCalloc(1, strlen(pTask->pMeta->path) + 128);
libs/stream/src/streamTask.c:    taosMemoryFree(path);
libs/stream/src/streamTask.c:    taosMemoryFree((void*)pTask->id.idStr);
libs/stream/src/streamTask.c:  taosMemoryFree(pTask);
libs/stream/src/streamTask.c:  pOutputInfo->pTokenBucket = taosMemoryCalloc(1, sizeof(STokenBucket));
libs/stream/src/streamTask.c:  SActiveCheckpointInfo* pInfo = taosMemoryCalloc(1, sizeof(SActiveCheckpointInfo));
libs/stream/src/streamTask.c:  taosMemoryFree(pInfo);
libs/stream/src/streamSched.c:      pTrigger->pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
libs/stream/src/streammsg.c:  taosArrayDestroyP(pReq->data, taosMemoryFree);
libs/stream/src/streammsg.c:void tCleanupStreamRetrieveReq(SStreamRetrieveReq* pReq) { taosMemoryFree(pReq->pRetrieve); }
libs/stream/src/streammsg.c:    SStreamUpstreamEpInfo* pInfo = taosMemoryCalloc(1, sizeof(SStreamUpstreamEpInfo));
libs/stream/src/streammsg.c:      taosMemoryFreeClear(pInfo);
libs/stream/src/streammsg.c:    pTask->outputInfo.tbSink.pSchemaWrapper = taosMemoryCalloc(1, sizeof(SSchemaWrapper));
libs/stream/src/streamCheckpoint.c:  SSDataBlock* pBlock = taosMemoryCalloc(1, sizeof(SSDataBlock));
libs/stream/src/streamCheckpoint.c:  taosMemoryFree(pBlock);
libs/stream/src/streamCheckpoint.c:  char* file = taosMemoryCalloc(1, strlen(path) + 32);
libs/stream/src/streamCheckpoint.c:    taosMemoryFree(file);
libs/stream/src/streamCheckpoint.c:        char* item = taosMemoryCalloc(1, i + 1);
libs/stream/src/streamCheckpoint.c:        item = taosMemoryCalloc(1, len - i);
libs/stream/src/streamCheckpoint.c:  taosMemoryFree(file);
libs/stream/src/streamCheckpoint.c:    taosMemoryFree(pParam->taskId);
libs/stream/src/streamCheckpoint.c:    taosMemoryFree(pParam);
libs/stream/src/streamCheckpoint.c:  taosArrayDestroyP(toDelFiles, taosMemoryFree);
libs/stream/src/streamCheckpoint.c:  taosMemoryFree(path);
libs/stream/src/streamCheckpoint.c:  taosMemoryFree(pParam->taskId);
libs/stream/src/streamCheckpoint.c:  taosMemoryFree(pParam);
libs/stream/src/streamCheckpoint.c:  SAsyncUploadArg* arg = taosMemoryCalloc(1, sizeof(SAsyncUploadArg));
libs/stream/src/streamCheckpoint.c:  char*   buf = taosMemoryCalloc(1, strlen(id) + strlen(dstName) + 4);
libs/stream/src/streamCheckpoint.c:  taosMemoryFree(buf);
libs/stream/src/streamMeta.c:      taosMemoryFree(rid);
libs/stream/src/streamMeta.c:    char* state = taosMemoryCalloc(1, strlen(pMeta->path) + 32);
libs/stream/src/streamMeta.c:    taosMemoryFree(state);
libs/stream/src/streamMeta.c:  SStreamMeta* pMeta = taosMemoryCalloc(1, sizeof(SStreamMeta));
libs/stream/src/streamMeta.c:  char*   tpath = taosMemoryCalloc(1, len);
libs/stream/src/streamMeta.c:  pMeta->pHbInfo = taosMemoryCalloc(1, sizeof(SMetaHbInfo));
libs/stream/src/streamMeta.c:  int64_t* pRid = taosMemoryMalloc(sizeof(int64_t));
libs/stream/src/streamMeta.c:  taosMemoryFree(pMeta->path);
libs/stream/src/streamMeta.c:  if (pMeta->pHbInfo) taosMemoryFreeClear(pMeta->pHbInfo);
libs/stream/src/streamMeta.c:  taosMemoryFree(pMeta);
libs/stream/src/streamMeta.c:  //   taosMemoryFree(pMeta->pRid);
libs/stream/src/streamMeta.c:  taosMemoryFree(pMeta->pHbInfo);
libs/stream/src/streamMeta.c:  taosMemoryFree(pMeta->path);
libs/stream/src/streamMeta.c:  taosMemoryFree(pMeta->qHandle);
libs/stream/src/streamMeta.c:  taosMemoryFree(pMeta);
libs/stream/src/streamMeta.c:  buf = taosMemoryCalloc(1, len);
libs/stream/src/streamMeta.c:  taosMemoryFree(buf);
libs/stream/src/streamMeta.c:    SStreamTask* pTask = taosMemoryCalloc(1, sizeof(SStreamTask));
libs/stream/src/streamMeta.c:      taosMemoryFree(pTask);
libs/stream/src/streamMeta.c:  int64_t* pRid = taosMemoryMalloc(sizeof(int64_t));
libs/stream/src/streamTaskSm.c:  SStreamTaskSM* pSM = taosMemoryCalloc(1, sizeof(SStreamTaskSM));
libs/stream/src/streamTaskSm.c:    taosMemoryFree(pSM);
libs/stream/src/streamTaskSm.c:  taosMemoryFree(pSM);
libs/stream/src/streamSessionState.c:  taosMemoryFree(p);
libs/stream/src/streamSessionState.c:      taosMemoryFree(p);
libs/stream/src/streamSessionState.c:        taosMemoryFree(p);
libs/stream/src/streamSessionState.c:  taosMemoryFreeClear(pBuff);
libs/stream/src/streamSessionState.c:    taosMemoryFreeClear(pData);
libs/stream/src/streamSessionState.c:      taosMemoryFree(p);
libs/stream/src/streamSessionState.c:        taosMemoryFree(p);
libs/stream/src/streamSessionState.c:      taosMemoryFree(pRockVal);
libs/stream/src/streamSessionState.c:      taosMemoryFree(pRockVal);
libs/stream/src/streamSessionState.c:      taosMemoryFree(p);
libs/stream/src/streamData.c:  taosMemoryFree(pDataSubmit->submit.msgStr);
libs/stream/src/streamData.c:      taosMemoryFree(pSubmit->msgStr);
libs/stream/src/tstreamFileState.c:  SStateKey* pStateKey = taosMemoryCalloc(1, sizeof(SStateKey));
libs/stream/src/tstreamFileState.c:  SStateSessionKey* pStateKey = taosMemoryCalloc(1, sizeof(SStateSessionKey));
libs/stream/src/tstreamFileState.c:  (*pVal) = taosMemoryCalloc(1, *pLen);
libs/stream/src/tstreamFileState.c:  SStreamFileState* pFileState = taosMemoryCalloc(1, sizeof(SStreamFileState));
libs/stream/src/tstreamFileState.c:  taosMemoryFreeClear(valBuf);
libs/stream/src/tstreamFileState.c:  taosMemoryFreeClear(pPos->pKey);
libs/stream/src/tstreamFileState.c:  taosMemoryFreeClear(pPos->pRowBuff);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(pPos);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(*(void**)ptr);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(pFileState->id);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(pFileState->cfName);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(pFileState);
libs/stream/src/tstreamFileState.c:      taosMemoryFreeClear(pNode);
libs/stream/src/tstreamFileState.c:      taosMemoryFreeClear(pNode);
libs/stream/src/tstreamFileState.c:      taosMemoryFreeClear(pNode);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(pNode);
libs/stream/src/tstreamFileState.c:  SRowBuffPos* pPos = taosMemoryCalloc(1, sizeof(SRowBuffPos));
libs/stream/src/tstreamFileState.c:  pPos->pKey = taosMemoryCalloc(1, pFileState->keyLen);
libs/stream/src/tstreamFileState.c:    pBuff = taosMemoryCalloc(1, pFileState->rowSize);
libs/stream/src/tstreamFileState.c:    taosMemoryFree(p);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(pBuff);
libs/stream/src/tstreamFileState.c:      pPos->pRowBuff = taosMemoryCalloc(1, pFileState->rowSize);
libs/stream/src/tstreamFileState.c:  char*   buf = taosMemoryCalloc(1, len);
libs/stream/src/tstreamFileState.c:    taosMemoryFreeClear(pSKey);
libs/stream/src/tstreamFileState.c:  taosMemoryFree(buf);
libs/stream/src/tstreamFileState.c:    taosMemoryFree(valBuf);
libs/stream/src/tstreamFileState.c:    taosMemoryFree(val);
libs/stream/src/tstreamFileState.c:    taosMemoryFree(val);
libs/stream/src/tstreamFileState.c:      taosMemoryFreeClear(pNode);
libs/stream/src/tstreamFileState.c:      taosMemoryFreeClear(pVal);
libs/stream/src/tstreamFileState.c:    taosMemoryFreeClear(pVal);
libs/monitor/src/monMain.c:  taosMemoryFree(pMonitor);
libs/monitor/src/monMain.c:  SMonInfo *pMonitor = taosMemoryCalloc(1, sizeof(SMonInfo));
libs/monitor/src/monMain.c:    taosMemoryFree(pCont);
libs/monitor/src/monMain.c:    taosMemoryFree(pCont);
libs/monitor/src/monFramework.c:    taosMemoryFreeClear(pCont);
libs/monitor/src/monFramework.c:    taosMemoryFreeClear(promStr);
libs/monitor/src/clientMonitor.c:  taosMemoryFreeClear(pCont);
libs/monitor/src/clientMonitor.c:    ClientMonitor* pMonitor = taosMemoryCalloc(1, sizeof(ClientMonitor));
libs/monitor/src/clientMonitor.c:    taosMemoryFree(pMsg->pData);
libs/monitor/src/clientMonitor.c:    taosMemoryFree(pMsg->pEpSet);
libs/monitor/src/clientMonitor.c:  void* buf = taosMemoryMalloc(tlen);
libs/monitor/src/clientMonitor.c:  SMsgSendInfo* pInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
libs/monitor/src/clientMonitor.c:  // pInfo->param = taosMemoryMalloc(sizeof(int32_t));
libs/monitor/src/clientMonitor.c:  pInfo->paramFreeFp = taosMemoryFree;
libs/monitor/src/clientMonitor.c:    taosMemoryFree(pMonitor);
libs/tfs/test/tfsTest.cpp:    void   *ret = taosMemoryMalloc(size + sizeof(size_t));
libs/tfs/test/tfsTest.cpp:    taosMemoryFree(ret);
libs/tfs/src/tfs.c:  STfs *pTfs = taosMemoryCalloc(1, sizeof(STfs));
libs/tfs/src/tfs.c:  taosMemoryFree(pTfs);
libs/tfs/src/tfs.c:  taosMemoryFreeClear(rname);
libs/tfs/src/tfs.c:        taosMemoryFree(s);
libs/tfs/src/tfs.c:        taosMemoryFree(dir);
libs/tfs/src/tfs.c:      taosMemoryFree(s);
libs/tfs/src/tfs.c:      taosMemoryFree(dir);
libs/tfs/src/tfs.c:  STfsDir *pDir = taosMemoryCalloc(1, sizeof(STfsDir));
libs/tfs/src/tfs.c:    taosMemoryFree(pDir);
libs/tfs/src/tfs.c:    taosMemoryFree(pTfsDir);
libs/tfs/src/tfsDisk.c:  STfsDisk *pDisk = taosMemoryCalloc(1, sizeof(STfsDisk));
libs/tfs/src/tfsDisk.c:    taosMemoryFree(pDisk);
libs/tfs/src/tfsDisk.c:    taosMemoryFree(pDisk->path);
libs/tfs/src/tfsDisk.c:    taosMemoryFree(pDisk);
libs/audit/src/auditMain.c:    taosMemoryFree(record->detail);
libs/audit/src/auditMain.c:    taosMemoryFree(record);
libs/nodes/src/nodesToSQLFuncs.c:      taosMemoryFree(t);
libs/nodes/src/nodesCloneFuncs.c:      pDst->datum.p = taosMemoryCalloc(1, len);
libs/nodes/src/nodesCloneFuncs.c:      pDst->datum.p = taosMemoryCalloc(1, len);
libs/nodes/src/nodesCloneFuncs.c:  STableMeta* pDst = taosMemoryMalloc(len);
libs/nodes/src/nodesCloneFuncs.c:  SVgroupsInfo* pDst = taosMemoryMalloc(len);
libs/nodes/src/nodesCloneFuncs.c:    pNewFunctParam->pCol = taosMemoryCalloc(1, sizeof(SColumn));
libs/nodes/src/nodesUtilFuncs.c:  SNodeMemChunk* pNewChunk = taosMemoryCalloc(1, sizeof(SNodeMemChunk) + pAllocator->chunkSize);
libs/nodes/src/nodesUtilFuncs.c:    return taosMemoryCalloc(1, size);
libs/nodes/src/nodesUtilFuncs.c:    taosMemoryFree(ptr);
libs/nodes/src/nodesUtilFuncs.c:  *pAllocator = taosMemoryCalloc(1, sizeof(SNodeAllocator));
libs/nodes/src/nodesUtilFuncs.c:    taosMemoryFreeClear(*pAllocator);
libs/nodes/src/nodesUtilFuncs.c:    taosMemoryFree(pChunk);
libs/nodes/src/nodesUtilFuncs.c:  taosMemoryFree(pAllocator);
libs/nodes/src/nodesUtilFuncs.c:    taosMemoryFreeClear(pVg->pData);
libs/nodes/src/nodesUtilFuncs.c:    taosMemoryFreeClear(pVg);
libs/nodes/src/nodesUtilFuncs.c:  taosMemoryFree(pCfg->pComment);
libs/nodes/src/nodesUtilFuncs.c:  taosMemoryFree(pCfg->pSchemas);
libs/nodes/src/nodesUtilFuncs.c:  taosMemoryFree(pCfg->pSchemaExt);
libs/nodes/src/nodesUtilFuncs.c:  taosMemoryFree(pCfg->pTags);
libs/nodes/src/nodesUtilFuncs.c:  taosMemoryFree(pCfg);
libs/nodes/src/nodesUtilFuncs.c:static void destroySmaIndex(void* pIndex) { taosMemoryFree(((STableIndexInfo*)pIndex)->expr); }
libs/nodes/src/nodesUtilFuncs.c:static void destroyFuncParam(void* pValue) { taosMemoryFree(((SFunctParam*)pValue)->pCol); }
libs/nodes/src/nodesUtilFuncs.c:  taosMemoryFree(value);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pValue->literal);
libs/nodes/src/nodesUtilFuncs.c:        taosMemoryFreeClear(pValue->datum.p);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pReal->pMeta);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pReal->pVgroupList);
libs/nodes/src/nodesUtilFuncs.c:      taosArrayDestroyP(pReal->tsmaTargetTbVgInfo, taosMemoryFree);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pView->pMeta);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pView->pVgroupList);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pStmt->pTableMeta);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pStmt->pCreateTblReq);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pStmt->pStbRowsCxt);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFree(pStmt->pIpRanges);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFree(pStmt->pIpRanges);
libs/nodes/src/nodesUtilFuncs.c:        taosMemoryFreeClear(pStmt->pReq);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFree(((SDescribeStmt*)pNode)->pMeta);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pStmt->pReq);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(((SShowCreateDatabaseStmt*)pNode)->pCfg);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(((SShowCreateTableStmt*)pNode)->pDbCfg);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pQuery->pResSchema);
libs/nodes/src/nodesUtilFuncs.c:        taosMemoryFreeClear(pQuery->pCmdMsg->pMsg);
libs/nodes/src/nodesUtilFuncs.c:        taosMemoryFreeClear(pQuery->pCmdMsg);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFree(pStmt->pQuerySql);
libs/nodes/src/nodesUtilFuncs.c:        taosMemoryFreeClear(pStmt->pReq);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pLogicNode->pVgroupList);
libs/nodes/src/nodesUtilFuncs.c:      taosArrayDestroyP(pLogicNode->pTsmaTargetTbVgInfo, taosMemoryFree);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pLogicNode->pVgroupList);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pSubplan->pVgroupList);
libs/nodes/src/nodesUtilFuncs.c:      taosMemoryFreeClear(pSink->pData);
libs/nodes/src/nodesUtilFuncs.c:      void* buf = taosMemoryMalloc(MAX_NUM_STR_SIZE);
libs/nodes/src/nodesUtilFuncs.c:      void* buf = taosMemoryMalloc(MAX_NUM_STR_SIZE);
libs/nodes/src/nodesUtilFuncs.c:      void* buf = taosMemoryMalloc(MAX_NUM_STR_SIZE);
libs/nodes/src/nodesUtilFuncs.c:      void* buf = taosMemoryMalloc(MAX_NUM_STR_SIZE);
libs/nodes/src/nodesUtilFuncs.c:      void*   buf = taosMemoryMalloc(bufSize);
libs/nodes/src/nodesUtilFuncs.c:      pVal->pz = taosMemoryMalloc(pVal->nLen + 1);
libs/nodes/src/nodesUtilFuncs.c:      pVal->pz = taosMemoryMalloc(pVal->nLen);
libs/nodes/src/nodesUtilFuncs.c:    char* p = taosMemoryMalloc(lenStr + 1  + VARSTR_HEADER_SIZE);
libs/nodes/src/nodesMsgFuncs.c:  pEncoder->pBuf = taosMemoryMalloc(pEncoder->allocSize);
libs/nodes/src/nodesMsgFuncs.c:static void clearTlvEncoder(STlvEncoder* pEncoder) { taosMemoryFree(pEncoder->pBuf); }
libs/nodes/src/nodesMsgFuncs.c:    void* pNewBuf = taosMemoryRealloc(pEncoder->pBuf, pEncoder->allocSize);
libs/nodes/src/nodesMsgFuncs.c:    void* pNewBuf = taosMemoryRealloc(pEncoder->pBuf, pEncoder->allocSize * 2);
libs/nodes/src/nodesMsgFuncs.c:    void* pNewBuf = taosMemoryRealloc(pEncoder->pBuf, pEncoder->allocSize);
libs/nodes/src/nodesMsgFuncs.c:  *pValue = taosMemoryMalloc(pTlv->len);
libs/nodes/src/nodesMsgFuncs.c:      pNode->datum.p = taosMemoryCalloc(1, pNode->node.resType.bytes + 1);
libs/nodes/src/nodesCodeFuncs.c:      char* buf = taosMemoryCalloc(varDataLen(pNode->datum.p) * 2 + 1, sizeof(char));
libs/nodes/src/nodesCodeFuncs.c:        taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:      taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:      char*   buf = taosMemoryCalloc(len * 2 + 1, sizeof(char));
libs/nodes/src/nodesCodeFuncs.c:        taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:      taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:      pNode->datum.p = taosMemoryCalloc(1, pNode->node.resType.bytes + 1);
libs/nodes/src/nodesCodeFuncs.c:        char* buf = taosMemoryCalloc(1, pNode->node.resType.bytes * 2 + VARSTR_HEADER_SIZE + 1);
libs/nodes/src/nodesCodeFuncs.c:          taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:          taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:        taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:      pNode->datum.p = taosMemoryCalloc(1, pNode->node.resType.bytes);
libs/nodes/src/nodesCodeFuncs.c:      char* buf = taosMemoryCalloc(1, pNode->node.resType.bytes * 2 + 1);
libs/nodes/src/nodesCodeFuncs.c:        taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:        taosMemoryFree(buf);
libs/nodes/src/nodesCodeFuncs.c:      taosMemoryFree(buf);
libs/monitorfw/src/taos_monitor_util.c:  char* name = taosMemoryMalloc(size + 1);
libs/monitorfw/src/taos_metric_formatter_custom.c:  char* keyvalues = taosMemoryMalloc(len);
libs/monitorfw/src/taos_metric_formatter_custom.c:  char** keyvalue = taosMemoryMalloc(sizeof(char*) * (count + 1));
libs/monitorfw/src/taos_metric_formatter_custom.c:  char** arr = taosMemoryMalloc(sizeof(char*) * (count + 1) * 2);
libs/monitorfw/src/taos_metric_formatter_custom.c:  taosMemoryFreeClear(arr);
libs/monitorfw/src/taos_metric_formatter_custom.c:  taosMemoryFreeClear(keyvalue);
libs/monitorfw/src/taos_metric_formatter_custom.c:  taosMemoryFreeClear(keyvalues);
libs/monitorfw/src/taos_metric_formatter_custom.c:  char* name = taosMemoryMalloc(size + 1);
libs/monitorfw/src/taos_metric_formatter_custom.c:  taosMemoryFreeClear(name);
libs/wal/test/walMetaTest.cpp:    SWalCfg* pCfg = (SWalCfg*)taosMemoryMalloc(sizeof(SWalCfg));
libs/wal/test/walMetaTest.cpp:    taosMemoryFree(pCfg);
libs/wal/test/walMetaTest.cpp:    SWalCfg* pCfg = (SWalCfg*)taosMemoryMalloc(sizeof(SWalCfg));
libs/wal/test/walMetaTest.cpp:    taosMemoryFree(pCfg);
libs/wal/test/walMetaTest.cpp:    SWalCfg* pCfg = (SWalCfg*)taosMemoryMalloc(sizeof(SWalCfg));
libs/wal/test/walMetaTest.cpp:    taosMemoryFree(pCfg);
libs/wal/test/walMetaTest.cpp:  taosMemoryFree(ss);
libs/wal/test/walMetaTest.cpp:  taosMemoryFree(oldss);
libs/wal/test/walMetaTest.cpp:  taosMemoryFree(newss);
libs/wal/src/walRef.c:  SWalRef *pRef = taosMemoryCalloc(1, sizeof(SWalRef));
libs/wal/src/walRef.c:  taosMemoryFree(pRef);
libs/wal/src/walMeta.c:    void* ptr = taosMemoryRealloc(buf, capacity);
libs/wal/src/walMeta.c:          void* ptr = taosMemoryRealloc(buf, capacity);
libs/wal/src/walMeta.c:  taosMemoryFree(buf);
libs/wal/src/walMeta.c:  taosMemoryFree(buf);
libs/wal/src/walMeta.c:  SWalFileInfo* pNewInfo = taosMemoryMalloc(sizeof(SWalFileInfo));
libs/wal/src/walMeta.c:  taosMemoryFree(pNewInfo);
libs/wal/src/walMeta.c:  taosMemoryFree(serialized);
libs/wal/src/walMeta.c:  taosMemoryFree(serialized);
libs/wal/src/walMeta.c:  char* buf = taosMemoryMalloc(size + 5);
libs/wal/src/walMeta.c:    taosMemoryFree(buf);
libs/wal/src/walMeta.c:    taosMemoryFree(buf);
libs/wal/src/walMeta.c:  taosMemoryFree(buf);
libs/wal/src/walMgmt.c:  SWal *pWal = taosMemoryCalloc(1, sizeof(SWal));
libs/wal/src/walMgmt.c:    taosMemoryFree(pWal);
libs/wal/src/walMgmt.c:  taosMemoryFree(pWal);
libs/wal/src/walMgmt.c:    taosMemoryFree(pRef);
libs/wal/src/walMgmt.c:  taosMemoryFreeClear(pWal);
libs/wal/src/walRead.c:  SWalReader *pReader = taosMemoryCalloc(1, sizeof(SWalReader));
libs/wal/src/walRead.c:  pReader->pHead = taosMemoryMalloc(sizeof(SWalCkHead));
libs/wal/src/walRead.c:    taosMemoryFree(pReader);
libs/wal/src/walRead.c:  taosMemoryFreeClear(pReader->pHead);
libs/wal/src/walRead.c:  taosMemoryFree(pReader);
libs/wal/src/walRead.c:    SWalCkHead *ptr = (SWalCkHead *)taosMemoryRealloc(pRead->pHead, sizeof(SWalCkHead) + cryptedBodyLen);
libs/wal/src/walRead.c:        (SWalCkHead *)taosMemoryRealloc(pReader->pHead, sizeof(SWalCkHead) + cryptedBodyLen);
libs/wal/src/walRead.c:    char   *newBody = taosMemoryMalloc(cryptedBodyLen);
libs/wal/src/walRead.c:    taosMemoryFree(newBody);
libs/wal/src/walWrite.c:    newBody = taosMemoryMalloc(cyptedBodyLen);
libs/wal/src/walWrite.c:    newBodyEncrypted = taosMemoryMalloc(cyptedBodyLen);
libs/wal/src/walWrite.c:      if(newBody != NULL) taosMemoryFreeClear(newBody);
libs/wal/src/walWrite.c:      taosMemoryFreeClear(newBody);
libs/wal/src/walWrite.c:      taosMemoryFreeClear(newBodyEncrypted);
libs/wal/src/walWrite.c:    taosMemoryFreeClear(newBody);
libs/wal/src/walWrite.c:    taosMemoryFreeClear(newBodyEncrypted); 
libs/scheduler/test/schedulerTests.cpp:  void *pRsp = taosMemoryCalloc(msgSize, 1);
libs/scheduler/test/schedulerTests.cpp:  SRetrieveTableRsp* rsp = (SRetrieveTableRsp*)taosMemoryCalloc(sizeof(SRetrieveTableRsp), 1);
libs/scheduler/test/schedulerTests.cpp:  void* msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/test/schedulerTests.cpp:  ((SDataInserterNode*)insertPlan->pDataSink)->pData = taosMemoryCalloc(1, 1);
libs/scheduler/test/schedulerTests.cpp:  ((SDataInserterNode*)insertPlan->pDataSink)->pData = taosMemoryCalloc(1, 1);
libs/scheduler/test/schedulerTests.cpp:  *str = (char *)taosMemoryCalloc(1, 20);
libs/scheduler/test/schedulerTests.cpp:    taosMemoryFreeClear(pInfo->param);
libs/scheduler/test/schedulerTests.cpp:    taosMemoryFreeClear(pInfo->msgInfo.pData);
libs/scheduler/test/schedulerTests.cpp:    taosMemoryFree(pInfo);
libs/scheduler/test/schedulerTests.cpp:    param = (SSchTaskCallbackParam *)taosMemoryCalloc(1, sizeof(*param));
libs/scheduler/test/schedulerTests.cpp:    SRetrieveTableRsp *rsp = (SRetrieveTableRsp *)taosMemoryCalloc(1, sizeof(SRetrieveTableRsp));
libs/scheduler/test/schedulerTests.cpp:    param = (SSchTaskCallbackParam *)taosMemoryCalloc(1, sizeof(*param));
libs/scheduler/test/schedulerTests.cpp:    param = (SSchTaskCallbackParam *)taosMemoryCalloc(1, sizeof(*param));
libs/scheduler/test/schedulerTests.cpp:  taosMemoryFreeClear(data);
libs/scheduler/test/schedulerTests.cpp:  taosMemoryFreeClear(data);
libs/scheduler/test/schedulerTests.cpp:  taosMemoryFreeClear(data);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:    taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:        SSubmitRsp2 *rsp = taosMemoryMalloc(sizeof(*rsp));
libs/scheduler/src/schRemote.c:          taosMemoryFree(rsp);
libs/scheduler/src/schRemote.c:            taosMemoryFree(rsp);
libs/scheduler/src/schRemote.c:          taosMemoryFree(rsp);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:      taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(pMsg->pData);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(pMsg->pEpSet);
libs/scheduler/src/schRemote.c:    taosMemoryFree(pMsg->pData);
libs/scheduler/src/schRemote.c:    taosMemoryFree(pMsg->pEpSet);
libs/scheduler/src/schRemote.c:    taosMemoryFree(pMsg->pData);
libs/scheduler/src/schRemote.c:    taosMemoryFree(pMsg->pEpSet);
libs/scheduler/src/schRemote.c:    taosMemoryFree(pMsg->pData);
libs/scheduler/src/schRemote.c:    taosMemoryFree(pMsg->pEpSet);
libs/scheduler/src/schRemote.c:  taosMemoryFree(pMsg->pData);
libs/scheduler/src/schRemote.c:  taosMemoryFree(pMsg->pEpSet);
libs/scheduler/src/schRemote.c:    SSchTaskCallbackParam *param = taosMemoryCalloc(1, sizeof(SSchTaskCallbackParam));
libs/scheduler/src/schRemote.c:    SSchHbCallbackParam *param = taosMemoryCalloc(1, sizeof(SSchHbCallbackParam));
libs/scheduler/src/schRemote.c:  SSchTaskCallbackParam *param = taosMemoryCalloc(1, sizeof(SSchTaskCallbackParam));
libs/scheduler/src/schRemote.c:  SMsgSendInfo *msgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
libs/scheduler/src/schRemote.c:  msgSendInfo->paramFreeFp = taosMemoryFree;
libs/scheduler/src/schRemote.c:  taosMemoryFree(msg);
libs/scheduler/src/schRemote.c:  SSchHbCallbackParam *param = taosMemoryCalloc(1, sizeof(SSchHbCallbackParam));
libs/scheduler/src/schRemote.c:  pMsgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
libs/scheduler/src/schRemote.c:  param = taosMemoryCalloc(1, sizeof(SSchHbCallbackParam));
libs/scheduler/src/schRemote.c:  pMsgSendInfo->paramFreeFp = taosMemoryFree;
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(param);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(pMsgSendInfo);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(pMsgSendInfo->param);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(pMsgSendInfo);
libs/scheduler/src/schRemote.c:    taosMemoryFreeClear(pExplainMsgSendInfo->param);
libs/scheduler/src/schRemote.c:    taosMemoryFreeClear(pExplainMsgSendInfo);
libs/scheduler/src/schRemote.c:    SSchHbCallbackParam *dst = taosMemoryMalloc(sizeof(SSchHbCallbackParam));
libs/scheduler/src/schRemote.c:  SSchTaskCallbackParam *dst = taosMemoryMalloc(sizeof(SSchTaskCallbackParam));
libs/scheduler/src/schRemote.c:  SMsgSendInfo *pDst = taosMemoryCalloc(1, sizeof(*pSrc));
libs/scheduler/src/schRemote.c:  pDst->paramFreeFp = taosMemoryFree;
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(pDst);
libs/scheduler/src/schRemote.c:  void *msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(msg);
libs/scheduler/src/schRemote.c:      msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:      msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:      msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:        taosMemoryFree(msg);
libs/scheduler/src/schRemote.c:      msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:      msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:        taosMemoryFree(msg);
libs/scheduler/src/schRemote.c:      msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:      msg = taosMemoryCalloc(1, msgSize);
libs/scheduler/src/schRemote.c:        taosMemoryFree(msg);
libs/scheduler/src/schRemote.c:    taosMemoryFree(msg);
libs/scheduler/src/schRemote.c:  taosMemoryFreeClear(msg);
libs/scheduler/src/schTask.c:  taosMemoryFreeClear(pTask->msg);
libs/scheduler/src/schTask.c:  taosMemoryFreeClear(pTask->msg);
libs/scheduler/src/schTask.c:  taosMemoryFreeClear(pData->pData);
libs/scheduler/src/schTask.c:  taosMemoryFreeClear(pData->pEpSet);
libs/scheduler/src/schTask.c:  taosMemoryFreeClear(pData->pData);
libs/scheduler/src/schTask.c:  taosMemoryFreeClear(pData->pEpSet);
libs/scheduler/src/schTask.c:  taosMemoryFree(origEpset);
libs/scheduler/src/schTask.c:  taosMemoryFree(newEpset);
libs/scheduler/src/schTask.c:      taosMemoryFree(msg);
libs/scheduler/src/schTask.c:    taosMemoryFree(param);
libs/scheduler/src/schTask.c:  taosMemoryFree(param);
libs/scheduler/src/schTask.c:  SSchTaskCtx *param = taosMemoryCalloc(1, sizeof(SSchTaskCtx));
libs/scheduler/src/schTask.c:  taosMemoryFree(pTimerParam);
libs/scheduler/src/schTask.c:    SSchTimerParam *param = taosMemoryMalloc(sizeof(SSchTimerParam));
libs/scheduler/src/schTask.c:      SCH_TASK_ELOG("taosMemoryMalloc %d failed", (int)sizeof(SSchTimerParam));
libs/scheduler/src/schDbg.c:  taosMemoryFree(pResult);
libs/scheduler/src/schUtil.c:  char   *str = taosMemoryMalloc(maxSize);
libs/scheduler/src/schJob.c:    SRetrieveTableRsp *rsp = (SRetrieveTableRsp *)taosMemoryCalloc(1, sizeof(SRetrieveTableRsp));
libs/scheduler/src/schJob.c:  SExecResult *pRes = taosMemoryCalloc(1, sizeof(SExecResult));
libs/scheduler/src/schJob.c:  taosMemoryFreeClear(pJob->userRes.execRes);
libs/scheduler/src/schJob.c:  taosMemoryFreeClear(pJob->fetchRes);
libs/scheduler/src/schJob.c:  taosMemoryFreeClear(pJob->sql);
libs/scheduler/src/schJob.c:  taosMemoryFree(pJob);
libs/scheduler/src/schJob.c:  SSchJob *pJob = taosMemoryCalloc(1, sizeof(SSchJob));
libs/scheduler/src/schJob.c:  taosMemoryFreeClear(pMsg->pData);
libs/scheduler/src/schJob.c:  taosMemoryFreeClear(pMsg->pEpSet);
libs/qworker/test/qworkerTests.cpp:  char *msg = (char*)taosMemoryCalloc(1, msgSize);
libs/qworker/test/qworkerTests.cpp:    taosMemoryFree(msg);
libs/qworker/test/qworkerTests.cpp:  struct SRpcMsg *newMsg = (struct SRpcMsg *)taosMemoryCalloc(1, sizeof(struct SRpcMsg));
libs/qworker/test/qworkerTests.cpp:  struct SRpcMsg *newMsg = (struct SRpcMsg *)taosMemoryCalloc(1, sizeof(struct SRpcMsg));
libs/qworker/test/qworkerTests.cpp:      *pRes = (SSDataBlock *)taosMemoryCalloc(1, sizeof(SSDataBlock));
libs/qworker/test/qworkerTests.cpp:  taosMemoryFree((void *)pInput->pData);
libs/qworker/test/qworkerTests.cpp:    taosMemoryFree(queryRpc);
libs/qworker/test/qworkerTests.cpp:    taosMemoryFree(fetchRpc);
libs/qworker/src/qwUtil.c:  taosMemoryFree(pInfo->verboseInfo);
libs/qworker/src/qwUtil.c:    SExplainExecInfo *pExec = taosMemoryCalloc(localRsp.rsp.numOfPlans, sizeof(SExplainExecInfo));
libs/qworker/src/qwUtil.c:  taosMemoryFree(mgmt);
libs/qworker/src/qwMsg.c:      (SRetrieveTableRsp *)(rpcMalloc ? rpcReallocCont(*rsp, msgSize) : taosMemoryRealloc(*rsp, msgSize));
libs/qworker/src/qwMsg.c:  taosMemoryFreeClear(req.sql);
libs/qworker/src/qwMsg.c:  taosMemoryFreeClear(req.msg);
libs/qworker/src/qworker.c:  output.pData = taosMemoryCalloc(1, len);
libs/qworker/src/qworker.c:    taosMemoryFree(output.pData);
libs/qworker/src/qworker.c:  taosMemoryFree(output.pData);
libs/qworker/src/qworker.c:  taosMemoryFree(sql);
libs/qworker/src/qworker.c:  rspList = taosMemoryCalloc(schNum, sizeof(SQWHbInfo));
libs/qworker/src/qworker.c:    taosMemoryFree(rspList);
libs/qworker/src/qworker.c:  taosMemoryFreeClear(rspList);
libs/qworker/src/qworker.c:  SQWorker *mgmt = taosMemoryCalloc(1, sizeof(SQWorker));
libs/qworker/src/qworker.c:    taosMemoryFreeClear(mgmt);
libs/qworker/src/qworker.c:    taosMemoryFreeClear(mgmt);
libs/qworker/src/qworker.c:  rHandle.pMsgCb = taosMemoryCalloc(1, sizeof(SMsgCb));
libs/qworker/src/qworker.c:  taosMemoryFree(rHandle.pMsgCb);
libs/transport/test/http_test.c:    char *  msg = taosMemoryCalloc(1, len);
libs/transport/test/http_test.c:    taosMemoryFree(msg);
libs/transport/test/http_test.c:  TThread *thread = taosMemoryCalloc(1, sizeof(TThread) * numOfThreads);
libs/transport/test/transportTests.cpp:    QueueElem *el = (QueueElem *)taosMemoryMalloc(sizeof(QueueElem));
libs/transport/test/transportTests.cpp:    taosMemoryFree(el);
libs/transport/test/transportTests.cpp:    QueueElem *el = (QueueElem *)taosMemoryMalloc(sizeof(QueueElem));
libs/transport/test/transportTests.cpp:    taosMemoryFree(el);
libs/transport/test/transportTests.cpp:    QueueElem *el = (QueueElem *)taosMemoryMalloc(sizeof(QueueElem));
libs/transport/test/transportTests.cpp:    ctx = (STransCtx *)taosMemoryCalloc(1, sizeof(STransCtx));
libs/transport/test/transportTests.cpp:  *dst = taosMemoryCalloc(1, sz + 1);
libs/transport/test/transportTests.cpp://    STransCtx *src = (STransCtx *)taosMemoryCalloc(1, sizeof(STransCtx));
libs/transport/test/transportTests.cpp://      STransCtxVal val1 = {NULL, NULL, (void (*)(const void *))taosMemoryFree};
libs/transport/test/transportTests.cpp://      val1.val = taosMemoryMalloc(12);
libs/transport/test/transportTests.cpp://      STransCtxVal val1 = {NULL, NULL, (void (*)(const void *))taosMemoryFree};
libs/transport/test/transportTests.cpp://      val1.val = taosMemoryMalloc(12);
libs/transport/test/transportTests.cpp://    taosMemoryFree(src);
libs/transport/test/transportTests.cpp://    STransCtx *src = (STransCtx *)taosMemoryCalloc(1, sizeof(STransCtx));
libs/transport/test/transportTests.cpp://      STransCtxVal val1 = {NULL, NULL, (void (*)(const void *))taosMemoryFree};
libs/transport/test/transportTests.cpp://      val1.val = taosMemoryMalloc(12);
libs/transport/test/transportTests.cpp://      STransCtxVal val1 = {NULL, NULL, (void (*)(const void *))taosMemoryFree};
libs/transport/test/transportTests.cpp://      val1.val = taosMemoryMalloc(12);
libs/transport/test/transportTests.cpp://    taosMemoryFree(src);
libs/transport/test/transportTests.cpp://    STransCtx *src = (STransCtx *)taosMemoryCalloc(1, sizeof(STransCtx));
libs/transport/test/transportTests.cpp://      STransCtxVal val1 = {NULL, NULL, (void (*)(const void *))taosMemoryFree};
libs/transport/test/transportTests.cpp://      val1.val = taosMemoryCalloc(1, 11);
libs/transport/test/transportTests.cpp://      STransCtxVal val1 = {NULL, NULL, (void (*)(const void *))taosMemoryFree};
libs/transport/test/transportTests.cpp://      val1.val = taosMemoryCalloc(1, 11);
libs/transport/test/transportTests.cpp://    taosMemoryFree(src);
libs/transport/test/transportTests.cpp://  taosMemoryFree(skey);
libs/transport/test/svrBench.c:  multiQ = taosMemoryMalloc(sizeof(numOfAthread));
libs/transport/test/svrBench.c:  multiQ->qhandle = (STaosQueue **)taosMemoryMalloc(sizeof(STaosQueue *) * numOfAthread);
libs/transport/test/svrBench.c:  multiQ->qset = (STaosQset **)taosMemoryMalloc(sizeof(STaosQset *) * numOfAthread);
libs/transport/test/svrBench.c:  TThread *threads = taosMemoryMalloc(sizeof(TThread) * numOfAthread);
libs/transport/test/cliBench.c:  SInfo *pInfo = (SInfo *)taosMemoryCalloc(1, sizeof(SInfo) * appThreads);
libs/transport/test/uv.c:  taosMemoryFree(req);
libs/transport/test/uv.c:    uv_write_t *req = (uv_write_t *)taosMemoryMalloc(sizeof(uv_write_t));
libs/transport/test/uv.c:    taosMemoryFree(buf->base);
libs/transport/test/uv.c:  taosMemoryFree(buf->base);
libs/transport/test/uv.c:  buf->base = taosMemoryMalloc(suggested_size);
libs/transport/test/uv.c:  uv_tcp_t *client = (uv_tcp_t *)taosMemoryMalloc(sizeof(uv_tcp_t));
libs/transport/test/uv.c:    uv_write_t *write_req = (uv_write_t *)taosMemoryMalloc(sizeof(uv_write_t));
libs/transport/test/uv.c:  SConnCtx *pConn = taosMemoryMalloc(sizeof(SConnCtx));
libs/transport/test/uv.c:  pConn->pTimer = taosMemoryMalloc(sizeof(uv_timer_t));
libs/transport/test/uv.c:  pConn->pClient = (uv_tcp_t *)taosMemoryMalloc(sizeof(uv_tcp_t));
libs/transport/test/uv.c:    taosMemoryFree(pConn->pTimer);
libs/transport/test/uv.c:    taosMemoryFree(pConn->pClient);
libs/transport/test/uv.c:    taosMemoryFree(pConn);
libs/transport/test/uv.c:  pObj->loop = (uv_loop_t *)taosMemoryMalloc(sizeof(uv_loop_t));
libs/transport/test/uv.c:  pObj->workerAsync = taosMemoryMalloc(sizeof(uv_async_t));
libs/transport/test/uv.c:  SServerObj *server = taosMemoryCalloc(1, sizeof(SServerObj));
libs/transport/test/uv.c:  server->loop = (uv_loop_t *)taosMemoryMalloc(sizeof(uv_loop_t));
libs/transport/test/uv.c:  server->pThreadObj = (SThreadObj **)taosMemoryCalloc(server->numOfThread, sizeof(SThreadObj *));
libs/transport/test/uv.c:  server->pipe = (uv_pipe_t **)taosMemoryCalloc(server->numOfThread, sizeof(uv_pipe_t *));
libs/transport/test/uv.c:    server->pThreadObj[i] = (SThreadObj *)taosMemoryCalloc(1, sizeof(SThreadObj));
libs/transport/test/uv.c:    server->pipe[i] = (uv_pipe_t *)taosMemoryCalloc(2, sizeof(uv_pipe_t));
libs/transport/src/transCli.c:    taosMemoryFree(pHead);
libs/transport/src/transCli.c:    taosMemoryFree(msglist);
libs/transport/src/transCli.c:    SMsgList* nList = taosMemoryCalloc(1, sizeof(SMsgList));
libs/transport/src/transCli.c:    SMsgList* nList = taosMemoryCalloc(1, sizeof(SMsgList));
libs/transport/src/transCli.c:      STaskArg* arg = taosMemoryMalloc(sizeof(STaskArg));
libs/transport/src/transCli.c:        STaskArg* arg = taosMemoryMalloc(sizeof(STaskArg));
libs/transport/src/transCli.c:    STaskArg* arg = taosMemoryCalloc(1, sizeof(STaskArg));
libs/transport/src/transCli.c:  SExHandle* exh = taosMemoryCalloc(1, sizeof(SExHandle));
libs/transport/src/transCli.c:    taosMemoryFree(exh);
libs/transport/src/transCli.c:  SCliConn* conn = taosMemoryCalloc(1, sizeof(SCliConn));
libs/transport/src/transCli.c:  conn->stream = (uv_stream_t*)taosMemoryMalloc(sizeof(uv_tcp_t));
libs/transport/src/transCli.c:    timer = taosMemoryCalloc(1, sizeof(uv_timer_t));
libs/transport/src/transCli.c:  taosMemoryFree(conn->dstAddr);
libs/transport/src/transCli.c:  taosMemoryFree(conn->stream);
libs/transport/src/transCli.c:  taosMemoryFree(conn);
libs/transport/src/transCli.c:  uv_buf_t* wb = taosMemoryCalloc(wLen, sizeof(uv_buf_t));
libs/transport/src/transCli.c:  uv_write_t* req = taosMemoryCalloc(1, sizeof(uv_write_t));
libs/transport/src/transCli.c:  taosMemoryFree(wb);
libs/transport/src/transCli.c:      timer = taosMemoryCalloc(1, sizeof(uv_timer_t));
libs/transport/src/transCli.c:  taosMemoryFree(pBatch);
libs/transport/src/transCli.c:  taosMemoryFree(req);
libs/transport/src/transCli.c:  taosMemoryFree(arg);
libs/transport/src/transCli.c:        SCliBatchList* pBatchList = taosMemoryCalloc(1, sizeof(SCliBatchList));
libs/transport/src/transCli.c:        SCliBatch* pBatch = taosMemoryCalloc(1, sizeof(SCliBatch));
libs/transport/src/transCli.c:          SCliBatch* pBatch = taosMemoryCalloc(1, sizeof(SCliBatch));
libs/transport/src/transCli.c:          SCliBatch* pBatch = taosMemoryCalloc(1, sizeof(SCliBatch));
libs/transport/src/transCli.c:  SCliObj* cli = taosMemoryCalloc(1, sizeof(SCliObj));
libs/transport/src/transCli.c:  cli->pThreadObj = (SCliThrd**)taosMemoryCalloc(cli->numOfThreads, sizeof(SCliThrd*));
libs/transport/src/transCli.c:  taosMemoryFree(cli->pThreadObj);
libs/transport/src/transCli.c:  taosMemoryFree(cli);
libs/transport/src/transCli.c:  taosMemoryFree(pMsg);
libs/transport/src/transCli.c:  taosMemoryFree(pMsg);
libs/transport/src/transCli.c:  SCliThrd* pThrd = (SCliThrd*)taosMemoryCalloc(1, sizeof(SCliThrd));
libs/transport/src/transCli.c:  pThrd->loop = (uv_loop_t*)taosMemoryMalloc(sizeof(uv_loop_t));
libs/transport/src/transCli.c:    taosMemoryFree(pThrd->loop);
libs/transport/src/transCli.c:    taosMemoryFree(pThrd);
libs/transport/src/transCli.c:    taosMemoryFree(pThrd->loop);
libs/transport/src/transCli.c:    taosMemoryFree(pThrd);
libs/transport/src/transCli.c:  pThrd->prepare = taosMemoryCalloc(1, sizeof(uv_prepare_t));
libs/transport/src/transCli.c:    uv_timer_t* timer = taosMemoryCalloc(1, sizeof(uv_timer_t));
libs/transport/src/transCli.c:    taosMemoryFree(timer);
libs/transport/src/transCli.c:  taosMemoryFree(pThrd->prepare);
libs/transport/src/transCli.c:  taosMemoryFree(pThrd->loop);
libs/transport/src/transCli.c:    taosMemoryFree(pBatchList->ip);
libs/transport/src/transCli.c:    taosMemoryFree(pBatchList->dst);
libs/transport/src/transCli.c:    taosMemoryFree(pBatchList);
libs/transport/src/transCli.c:  taosMemoryFree(pThrd);
libs/transport/src/transCli.c:  taosMemoryFree(ctx);
libs/transport/src/transCli.c:  SCliMsg* msg = taosMemoryCalloc(1, sizeof(SCliMsg));
libs/transport/src/transCli.c:  taosMemoryFree(arg);
libs/transport/src/transCli.c:  taosMemoryFree(arg);
libs/transport/src/transCli.c:  STaskArg* arg = taosMemoryMalloc(sizeof(STaskArg));
libs/transport/src/transCli.c:  taosMemoryFree(cli->pThreadObj);
libs/transport/src/transCli.c:  taosMemoryFree(cli);
libs/transport/src/transCli.c:  STransConnCtx* pCtx = taosMemoryCalloc(1, sizeof(STransConnCtx));
libs/transport/src/transCli.c:  SCliMsg* cmsg = taosMemoryCalloc(1, sizeof(SCliMsg));
libs/transport/src/transCli.c:  STransConnCtx* pCtx = taosMemoryCalloc(1, sizeof(STransConnCtx));
libs/transport/src/transCli.c:  SCliMsg* cliMsg = taosMemoryCalloc(1, sizeof(SCliMsg));
libs/transport/src/transCli.c:  STransMsg* pTransRsp = taosMemoryCalloc(1, sizeof(STransMsg));
libs/transport/src/transCli.c:    taosMemoryFree(pTransRsp);
libs/transport/src/transCli.c:    taosMemoryFree(pTransRsp);
libs/transport/src/transCli.c:  tsem_t* sem = taosMemoryCalloc(1, sizeof(tsem_t));
libs/transport/src/transCli.c:  STransConnCtx* pCtx = taosMemoryCalloc(1, sizeof(STransConnCtx));
libs/transport/src/transCli.c:  SCliMsg* cliMsg = taosMemoryCalloc(1, sizeof(SCliMsg));
libs/transport/src/transCli.c:  taosMemoryFree(sem);
libs/transport/src/transCli.c:  taosMemoryFree(pTransRsp);
libs/transport/src/transCli.c:  tsem2_t* sem = taosMemoryCalloc(1, sizeof(tsem2_t));
libs/transport/src/transCli.c:  STransSyncMsg* pSyncMsg = taosMemoryCalloc(1, sizeof(STransSyncMsg));
libs/transport/src/transCli.c:  STransMsg* pTransMsg = taosMemoryCalloc(1, sizeof(STransMsg));
libs/transport/src/transCli.c:    taosMemoryFree(pTransMsg);
libs/transport/src/transCli.c:    taosMemoryFree(pTransMsg);
libs/transport/src/transCli.c:  STransConnCtx* pCtx = taosMemoryCalloc(1, sizeof(STransConnCtx));
libs/transport/src/transCli.c:  SCliMsg* cliMsg = taosMemoryCalloc(1, sizeof(SCliMsg));
libs/transport/src/transCli.c:    STransConnCtx* pCtx = taosMemoryCalloc(1, sizeof(STransConnCtx));
libs/transport/src/transCli.c:    SCliMsg* cliMsg = taosMemoryCalloc(1, sizeof(SCliMsg));
libs/transport/src/transCli.c:  SExHandle* exh = taosMemoryCalloc(1, sizeof(SExHandle));
libs/transport/src/transSvr.c:  SIpWhiteListTab* pWhiteList = taosMemoryCalloc(1, sizeof(SIpWhiteListTab));
libs/transport/src/transSvr.c:    taosMemoryFree(pUserList->pList);
libs/transport/src/transSvr.c:    taosMemoryFree(pUserList);
libs/transport/src/transSvr.c:  taosMemoryFree(pWhite);
libs/transport/src/transSvr.c:  char*   pBuf = taosMemoryCalloc(1, tlen + 64);
libs/transport/src/transSvr.c:  taosMemoryFree(tmp);
libs/transport/src/transSvr.c:    taosMemoryFree(buf);
libs/transport/src/transSvr.c:    SWhiteUserList* pUserList = taosMemoryCalloc(1, sizeof(SWhiteUserList));
libs/transport/src/transSvr.c:    taosMemoryFreeClear(pUserList->pList);
libs/transport/src/transSvr.c:  //  uv_work_t* wreq = taosMemoryMalloc(sizeof(uv_work_t));
libs/transport/src/transSvr.c:  buf->base = taosMemoryCalloc(1, sizeof(char) * buf->len);
libs/transport/src/transSvr.c:          taosMemoryFree(msg);
libs/transport/src/transSvr.c:    taosMemoryFree(req->data);
libs/transport/src/transSvr.c:  taosMemoryFree(req);
libs/transport/src/transSvr.c:  taosMemoryFree(smsg);
libs/transport/src/transSvr.c:  taosMemoryFree(handle);
libs/transport/src/transSvr.c:  taosMemoryFree(req);
libs/transport/src/transSvr.c:    SSvrMsg*  srvMsg = taosMemoryCalloc(1, sizeof(SSvrMsg));
libs/transport/src/transSvr.c:  taosMemoryFree(req);
libs/transport/src/transSvr.c:  uv_tcp_t* cli = (uv_tcp_t*)taosMemoryMalloc(sizeof(uv_tcp_t));
libs/transport/src/transSvr.c:    taosMemoryFree(cli);
libs/transport/src/transSvr.c:    uv_write_t* wr = (uv_write_t*)taosMemoryMalloc(sizeof(uv_write_t));
libs/transport/src/transSvr.c:      taosMemoryFree(cli);
libs/transport/src/transSvr.c:    taosMemoryFree(buf->base);
libs/transport/src/transSvr.c:  taosMemoryFree(buf->base);
libs/transport/src/transSvr.c:  pConn->pTcp = (uv_tcp_t*)taosMemoryMalloc(sizeof(uv_tcp_t));
libs/transport/src/transSvr.c:  pThrd->loop = (uv_loop_t*)taosMemoryMalloc(sizeof(uv_loop_t));
libs/transport/src/transSvr.c:  pThrd->prepare = taosMemoryCalloc(1, sizeof(uv_prepare_t));
libs/transport/src/transSvr.c:  srv->pAcceptAsync = taosMemoryCalloc(1, sizeof(uv_async_t));
libs/transport/src/transSvr.c:  SSvrConn* pConn = (SSvrConn*)taosMemoryCalloc(1, sizeof(SSvrConn));
libs/transport/src/transSvr.c:  SExHandle* exh = taosMemoryMalloc(sizeof(SExHandle));
libs/transport/src/transSvr.c:  SExHandle* exh = taosMemoryMalloc(sizeof(SExHandle));
libs/transport/src/transSvr.c:  taosMemoryFree(conn->pTcp);
libs/transport/src/transSvr.c:  taosMemoryFree(conn);
libs/transport/src/transSvr.c:  SServerObj* srv = taosMemoryCalloc(1, sizeof(SServerObj));
libs/transport/src/transSvr.c:  srv->loop = (uv_loop_t*)taosMemoryMalloc(sizeof(uv_loop_t));
libs/transport/src/transSvr.c:  srv->pThreadObj = (SWorkThrd**)taosMemoryCalloc(srv->numOfThreads, sizeof(SWorkThrd*));
libs/transport/src/transSvr.c:  srv->pipe = (uv_pipe_t**)taosMemoryCalloc(srv->numOfThreads, sizeof(uv_pipe_t*));
libs/transport/src/transSvr.c:    SWorkThrd* thrd = (SWorkThrd*)taosMemoryCalloc(1, sizeof(SWorkThrd));
libs/transport/src/transSvr.c:    srv->pipe[i] = (uv_pipe_t*)taosMemoryCalloc(2, sizeof(uv_pipe_t));
libs/transport/src/transSvr.c:    SWorkThrd* thrd = (SWorkThrd*)taosMemoryCalloc(1, sizeof(SWorkThrd));
libs/transport/src/transSvr.c:    srv->pipe[i] = (uv_pipe_t*)taosMemoryCalloc(2, sizeof(uv_pipe_t));
libs/transport/src/transSvr.c:  taosMemoryFree(msg);
libs/transport/src/transSvr.c:    taosMemoryFree(msg);
libs/transport/src/transSvr.c:      SIpWhiteList* pList = taosMemoryCalloc(1, sz + sizeof(SIpWhiteList));
libs/transport/src/transSvr.c:    taosMemoryFree(req);
libs/transport/src/transSvr.c:  taosMemoryFree(msg);
libs/transport/src/transSvr.c:  taosMemoryFree(pThrd->prepare);
libs/transport/src/transSvr.c:  taosMemoryFree(pThrd->loop);
libs/transport/src/transSvr.c:  taosMemoryFree(pThrd);
libs/transport/src/transSvr.c:  SSvrMsg* msg = taosMemoryCalloc(1, sizeof(SSvrMsg));
libs/transport/src/transSvr.c:  taosMemoryFree(srv->pThreadObj);
libs/transport/src/transSvr.c:  taosMemoryFree(srv->pAcceptAsync);
libs/transport/src/transSvr.c:  taosMemoryFree(srv->loop);
libs/transport/src/transSvr.c:    taosMemoryFree(srv->pipe[i]);
libs/transport/src/transSvr.c:  taosMemoryFree(srv->pipe);
libs/transport/src/transSvr.c:  taosMemoryFree(srv);
libs/transport/src/transSvr.c:  SSvrMsg* m = taosMemoryCalloc(1, sizeof(SSvrMsg));
libs/transport/src/transSvr.c:  SSvrMsg* m = taosMemoryCalloc(1, sizeof(SSvrMsg));
libs/transport/src/transSvr.c:  SSvrMsg* m = taosMemoryCalloc(1, sizeof(SSvrMsg));
libs/transport/src/transSvr.c:    SSvrMsg*        msg = taosMemoryCalloc(1, sizeof(SSvrMsg));
libs/transport/src/thttp.c:  void*   pDest = taosMemoryMalloc(destLen);
libs/transport/src/thttp.c:  taosMemoryFree(pDest);
libs/transport/src/thttp.c:  taosMemoryFree(msg->server);
libs/transport/src/thttp.c:  taosMemoryFree(msg->uri);
libs/transport/src/thttp.c:  taosMemoryFree(msg->cont);
libs/transport/src/thttp.c:  taosMemoryFree(msg);
libs/transport/src/thttp.c:  // taosMemoryFree(msg->server);
libs/transport/src/thttp.c:  // taosMemoryFree(msg->uri);
libs/transport/src/thttp.c:  // taosMemoryFree(msg->cont);
libs/transport/src/thttp.c:  // taosMemoryFree(msg);
libs/transport/src/thttp.c:  taosMemoryFree(cli->wbuf[0].base);
libs/transport/src/thttp.c:  taosMemoryFree(cli->wbuf[1].base);
libs/transport/src/thttp.c:  taosMemoryFree(cli->wbuf);
libs/transport/src/thttp.c:  taosMemoryFree(cli->rbuf);
libs/transport/src/thttp.c:  taosMemoryFree(cli->addr);
libs/transport/src/thttp.c:  taosMemoryFree(cli);
libs/transport/src/thttp.c:  SHttpMsg* msg = taosMemoryCalloc(1, sizeof(SHttpMsg));
libs/transport/src/thttp.c:  SHttpMsg* msg = taosMemoryMalloc(sizeof(SHttpMsg));
libs/transport/src/thttp.c:  msg->cont = taosMemoryMalloc(contLen);
libs/transport/src/thttp.c:  taosMemoryFree(msg);
libs/transport/src/thttp.c:  char*   header = taosMemoryCalloc(1, len);
libs/transport/src/thttp.c:    taosMemoryFree(header);
libs/transport/src/thttp.c:  uv_buf_t* wb = taosMemoryCalloc(2, sizeof(uv_buf_t));
libs/transport/src/thttp.c:  SHttpClient* cli = taosMemoryCalloc(1, sizeof(SHttpClient));
libs/transport/src/thttp.c:  cli->rbuf = taosMemoryCalloc(1, HTTP_RECV_BUF_SIZE);
libs/transport/src/thttp.c:  taosMemoryFree(msg->uri);
libs/transport/src/thttp.c:  taosMemoryFree(msg);
libs/transport/src/thttp.c:static void transHttpDestroyHandle(void* handle) { taosMemoryFree(handle); }
libs/transport/src/thttp.c:  SHttpModule* http = taosMemoryCalloc(1, sizeof(SHttpModule));
libs/transport/src/thttp.c:  http->loop = taosMemoryMalloc(sizeof(uv_loop_t));
libs/transport/src/thttp.c:    taosMemoryFree(http->loop);
libs/transport/src/thttp.c:    taosMemoryFree(http);
libs/transport/src/thttp.c:    taosMemoryFree(http->loop);
libs/transport/src/thttp.c:    taosMemoryFree(http);
libs/transport/src/thttp.c:  taosMemoryFree(load->loop);
libs/transport/src/transComm.c:  char* buf = taosMemoryMalloc(len + compHdr + 8);  // 8 extra bytes
libs/transport/src/transComm.c:  taosMemoryFree(buf);
libs/transport/src/transComm.c:  char*          buf = taosMemoryCalloc(1, oriLen + sizeof(STransMsgHead));
libs/transport/src/transComm.c:  taosMemoryFree(pHead);
libs/transport/src/transComm.c:  taosMemoryFree((char*)msg - sizeof(STransMsgHead));
libs/transport/src/transComm.c:  buf->buf = taosMemoryCalloc(1, BUFFER_CAP);
libs/transport/src/transComm.c:  taosMemoryFree(p->buf);
libs/transport/src/transComm.c:    p->buf = taosMemoryRealloc(p->buf, BUFFER_CAP);
libs/transport/src/transComm.c:    *buf = taosMemoryCalloc(1, total);
libs/transport/src/transComm.c:        p->buf = taosMemoryRealloc(p->buf, p->cap);
libs/transport/src/transComm.c:      p->buf = taosMemoryRealloc(p->buf, p->cap);
libs/transport/src/transComm.c:  SAsyncPool* pool = taosMemoryCalloc(1, sizeof(SAsyncPool));
libs/transport/src/transComm.c:  pool->asyncs = taosMemoryCalloc(1, sizeof(uv_async_t) * pool->nAsync);
libs/transport/src/transComm.c:    SAsyncItem* item = taosMemoryCalloc(1, sizeof(SAsyncItem));
libs/transport/src/transComm.c:    taosMemoryFree(item);
libs/transport/src/transComm.c:  taosMemoryFree(pool->asyncs);
libs/transport/src/transComm.c:  taosMemoryFree(pool);
libs/transport/src/transComm.c:  STransReq* req = taosMemoryCalloc(1, sizeof(STransReq));
libs/transport/src/transComm.c:  taosMemoryFree(req);
libs/transport/src/transComm.c:    taosMemoryFree(req);
libs/transport/src/transComm.c:      taosMemoryFree(task);
libs/transport/src/transComm.c:  uv_timer_t* timer = taosMemoryCalloc(1, sizeof(uv_timer_t));
libs/transport/src/transComm.c:  SDelayQueue* q = taosMemoryCalloc(1, sizeof(SDelayQueue));
libs/transport/src/transComm.c:  taosMemoryFree(queue->timer);
libs/transport/src/transComm.c:    taosMemoryFree(arg);
libs/transport/src/transComm.c:    taosMemoryFree(task);
libs/transport/src/transComm.c:  taosMemoryFree(queue);
libs/transport/src/transComm.c:    taosMemoryFree(task->arg);
libs/transport/src/transComm.c:    taosMemoryFree(task);
libs/transport/src/transComm.c:  taosMemoryFree(task->arg);
libs/transport/src/transComm.c:  taosMemoryFree(task);
libs/transport/src/transComm.c:  SDelayTask* task = taosMemoryCalloc(1, sizeof(SDelayTask));
libs/transport/src/transComm.c:  taosMemoryFree(handle);
libs/transport/src/transComm.c:  taosMemoryFree(pSyncMsg->pSem);
libs/transport/src/transComm.c:  taosMemoryFree(pSyncMsg->pRsp);
libs/transport/src/transComm.c:  taosMemoryFree(pSyncMsg);
libs/transport/src/transComm.c:  char*   pBuf = taosMemoryCalloc(1, pList->num * 36);
libs/transport/src/trans.c:  SRpcInfo* pRpc = taosMemoryCalloc(1, sizeof(SRpcInfo));
libs/transport/src/trans.c:      taosMemoryFree(pRpc);
libs/transport/src/trans.c:    taosMemoryFree(pRpc);
libs/transport/src/trans.c:  taosMemoryFree(pRpc);
libs/transport/src/trans.c:  char*   start = taosMemoryCalloc(1, size);
libs/transport/src/trans.c:  st = taosMemoryRealloc(st, sz);
libs/catalog/test/catalogTests.cpp:      (STableMeta *)taosMemoryCalloc(1, sizeof(STableMeta) + sizeof(SSchema) * (ctgTestColNum + ctgTestColNum));
libs/catalog/test/catalogTests.cpp:  SDBVgInfo     *dbVgroup = (SDBVgInfo *)taosMemoryCalloc(1, sizeof(SDBVgInfo));
libs/catalog/test/catalogTests.cpp:  rspMsg->pSchemas = (SSchema *)taosMemoryCalloc(rspMsg->numOfTags + rspMsg->numOfColumns, sizeof(SSchema));
libs/catalog/test/catalogTests.cpp:  metaRsp.pSchemas = (SSchema *)taosMemoryMalloc((metaRsp.numOfTags + metaRsp.numOfColumns) * sizeof(SSchema));
libs/catalog/test/catalogTests.cpp:  metaRsp.pSchemas = (SSchema *)taosMemoryMalloc((metaRsp.numOfTags + metaRsp.numOfColumns) * sizeof(SSchema));
libs/catalog/test/catalogTests.cpp:  metaRsp.pSchemas = (SSchema *)taosMemoryMalloc((metaRsp.numOfTags + metaRsp.numOfColumns) * sizeof(SSchema));
libs/catalog/test/catalogTests.cpp:  metaRsp.pSchemas = (SSchema *)taosMemoryMalloc((metaRsp.numOfTags + metaRsp.numOfColumns) * sizeof(SSchema));
libs/catalog/test/catalogTests.cpp:  tblRsp.pSchemas = (SSchema *)taosMemoryMalloc((tblRsp.numOfTags + tblRsp.numOfColumns) * sizeof(SSchema));
libs/catalog/test/catalogTests.cpp:    info.expr = (char *)taosMemoryCalloc(1, 10);
libs/catalog/test/catalogTests.cpp:    taosMemoryFreeClear(tbMeta);
libs/catalog/test/catalogTests.cpp:    output = (STableMetaOutput *)taosMemoryMalloc(sizeof(STableMetaOutput));
libs/catalog/test/catalogTests.cpp:    SCtgUpdateTbMetaMsg *msg = (SCtgUpdateTbMetaMsg *)taosMemoryMalloc(sizeof(SCtgUpdateTbMetaMsg));
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(dbs);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(stb);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(dbs);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(stb);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(dbs);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(stb);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(rsp.pSchemas);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:  taosMemoryFreeClear(tableMeta);
libs/catalog/test/catalogTests.cpp:    taosMemoryFree(tableMeta);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(dbs);
libs/catalog/test/catalogTests.cpp:      taosMemoryFree(stable);
libs/catalog/test/catalogTests.cpp:  taosMemoryFree(pCfg);
libs/catalog/src/catalog.c:  taosMemoryFreeClear(*pInfo);
libs/catalog/src/catalog.c:  STableMetaOutput* output = taosMemoryCalloc(1, sizeof(STableMetaOutput));
libs/catalog/src/catalog.c:      taosMemoryFreeClear(output->tbMeta);
libs/catalog/src/catalog.c:        taosMemoryFreeClear(output->tbMeta);
libs/catalog/src/catalog.c:        taosMemoryFreeClear(output->tbMeta);
libs/catalog/src/catalog.c:    taosMemoryFreeClear(output->tbMeta);
libs/catalog/src/catalog.c:    taosMemoryFreeClear(output);
libs/catalog/src/catalog.c:      taosMemoryFreeClear(output->tbMeta);
libs/catalog/src/catalog.c:    taosMemoryFreeClear(output->tbMeta);
libs/catalog/src/catalog.c:  taosMemoryFreeClear(output);
libs/catalog/src/catalog.c:  STableMetaOutput* output = taosMemoryCalloc(1, sizeof(STableMetaOutput));
libs/catalog/src/catalog.c:    taosMemoryFreeClear(output->tbMeta);
libs/catalog/src/catalog.c:    taosMemoryFreeClear(output);
libs/catalog/src/catalog.c:  taosMemoryFree(pMeta);
libs/catalog/src/catalog.c:  STableIndex* pIndex = taosMemoryCalloc(1, sizeof(STableIndex));
libs/catalog/src/catalog.c:  taosMemoryFree(pIndex);
libs/catalog/src/catalog.c:  taosMemoryFreeClear(tbMeta);
libs/catalog/src/catalog.c:  gCtgMgmt.queue.head = taosMemoryCalloc(1, sizeof(SCtgQNode));
libs/catalog/src/catalog.c:    clusterCtg = taosMemoryCalloc(1, sizeof(SCatalog));
libs/catalog/src/catalog.c:  pInfo->vgHash = taosMemoryCalloc(pInfo->vgNum, sizeof(TAOS_VGROUP_HASH_INFO));
libs/catalog/src/catalog.c:  STableIndex* pIndex = taosMemoryCalloc(1, sizeof(STableIndex));
libs/catalog/src/catalog.c:        taosMemoryFreeClear(pTableMeta);
libs/catalog/src/catalog.c:      taosMemoryFreeClear(pMeta);
libs/catalog/src/catalog.c:  *dynViewVersion = taosMemoryMalloc(sizeof(SDynViewVersion));
libs/catalog/src/catalog.c:  *users = taosMemoryCalloc(*num, sizeof(SUserAuthVersion));
libs/catalog/src/ctgCache.c:    *pTableMeta = taosMemoryCalloc(1, metaSize + schemaExtSize);
libs/catalog/src/ctgCache.c:  *pTableMeta = taosMemoryCalloc(1, metaSize);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(*pTableMeta);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(*pTableMeta);
libs/catalog/src/ctgCache.c:  *pTableMeta = taosMemoryRealloc(*pTableMeta, metaSize);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(*pTableMeta);
libs/catalog/src/ctgCache.c:    taosMemoryFree(pInfo);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(orig);
libs/catalog/src/ctgCache.c:  SCtgQNode *node = taosMemoryCalloc(1, sizeof(SCtgQNode));
libs/catalog/src/ctgCache.c:    taosMemoryFree(operation->data);
libs/catalog/src/ctgCache.c:    taosMemoryFree(operation);
libs/catalog/src/ctgCache.c:    taosMemoryFree(operation);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropDBMsg *msg = taosMemoryMalloc(sizeof(SCtgDropDBMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropDbVgroupMsg *msg = taosMemoryMalloc(sizeof(SCtgDropDbVgroupMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropStbMetaMsg *msg = taosMemoryMalloc(sizeof(SCtgDropStbMetaMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropTblMetaMsg *msg = taosMemoryMalloc(sizeof(SCtgDropTblMetaMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateVgMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateVgMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:    taosMemoryFree(msg);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateDbCfgMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateDbCfgMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateTbMetaMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateTbMetaMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:    taosMemoryFree(output->tbMeta);
libs/catalog/src/ctgCache.c:    taosMemoryFree(output);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateEpsetMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateEpsetMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateUserMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateUserMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateTbIndexMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateTbIndexMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(*pIndex);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropTbIndexMsg *msg = taosMemoryMalloc(sizeof(SCtgDropTbIndexMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgClearCacheMsg *msg = taosMemoryMalloc(sizeof(SCtgClearCacheMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateViewMetaMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateViewMetaMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:    taosMemoryFree(pRsp);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropViewMetaMsg *msg = taosMemoryMalloc(sizeof(SCtgDropViewMetaMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:    taosMemoryFree(meta);
libs/catalog/src/ctgCache.c:      taosMemoryFree(meta);
libs/catalog/src/ctgCache.c:      taosMemoryFree(meta);
libs/catalog/src/ctgCache.c:    taosMemoryFree(pCache->pMeta);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(*index);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(*index);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(pCache->pIndex);
libs/catalog/src/ctgCache.c:    taosMemoryFree(pCache->pMeta);
libs/catalog/src/ctgCache.c:    taosMemoryFree(pMeta);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:    SCTableMeta *ctbMeta = taosMemoryMalloc(sizeof(SCTableMeta));
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(pMeta->tbMeta);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(pMeta);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(pIndex);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  STableIndex *pIndex = taosMemoryCalloc(1, sizeof(STableIndex));
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(pIndex);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  pMeta = taosMemoryCalloc(1, sizeof(SViewMeta));
libs/catalog/src/ctgCache.c:  taosMemoryFree(pRsp);
libs/catalog/src/ctgCache.c:  taosMemoryFree(pMeta);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(op->data);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(msg->pMeta->tbMeta);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(msg->pMeta);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(op->data);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(op->data);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(op->data);
libs/catalog/src/ctgCache.c:        taosMemoryFreeClear(msg->pIndex);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(op->data);
libs/catalog/src/ctgCache.c:        taosMemoryFreeClear(msg->pTsma);
libs/catalog/src/ctgCache.c:          taosMemoryFree(op);
libs/catalog/src/ctgCache.c:      taosMemoryFree(node);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(gCtgMgmt.queue.head);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(operation);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(*pTableMeta);
libs/catalog/src/ctgCache.c:        taosMemoryFreeClear(pTableMeta);
libs/catalog/src/ctgCache.c:      pTableMeta = taosMemoryCalloc(1, metaSize + schemaExtSize);
libs/catalog/src/ctgCache.c:    pTableMeta = taosMemoryCalloc(1, metaSize);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(pTableMeta);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(pTableMeta);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(pTableMeta);
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(pTableMeta);
libs/catalog/src/ctgCache.c:    pTableMeta = taosMemoryRealloc(pTableMeta, metaSize);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(tblMeta);
libs/catalog/src/ctgCache.c:  *pVgroup = taosMemoryCalloc(1, sizeof(SVgroupInfo));
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(*pVgroup);
libs/catalog/src/ctgCache.c:    SViewMeta  *pViewMeta = taosMemoryCalloc(1, sizeof(SViewMeta));
libs/catalog/src/ctgCache.c:      taosMemoryFree(pViewMeta->querySql);
libs/catalog/src/ctgCache.c:      taosMemoryFree(pViewMeta->user);
libs/catalog/src/ctgCache.c:      taosMemoryFree(pViewMeta);
libs/catalog/src/ctgCache.c:    pViewMeta->pSchema = taosMemoryMalloc(pViewMeta->numOfCols * sizeof(SSchema));
libs/catalog/src/ctgCache.c:      taosMemoryFree(pViewMeta);
libs/catalog/src/ctgCache.c:    STableTSMAInfoRsp *pRsp = taosMemoryCalloc(1, sizeof(STableTSMAInfoRsp));
libs/catalog/src/ctgCache.c:      taosMemoryFreeClear(pRsp);
libs/catalog/src/ctgCache.c:        taosMemoryFreeClear(pRsp);
libs/catalog/src/ctgCache.c:    res.pRes = taosMemoryCalloc(1, sizeof(STableTSMAInfoRsp));
libs/catalog/src/ctgCache.c:  SCtgCacheOperation *op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgUpdateTbTSMAMsg *msg = taosMemoryMalloc(sizeof(SCtgUpdateTbTSMAMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation* op = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropTbTSMAMsg* msg = taosMemoryCalloc(1, sizeof(SCtgDropTbTSMAMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(op);
libs/catalog/src/ctgCache.c:  SCtgCacheOperation* pOp = taosMemoryCalloc(1, sizeof(SCtgCacheOperation));
libs/catalog/src/ctgCache.c:  SCtgDropTbTSMAMsg* pMsg = taosMemoryCalloc(1, sizeof(SCtgDropTbTSMAMsg));
libs/catalog/src/ctgCache.c:    taosMemoryFree(pOp);
libs/catalog/src/ctgCache.c:    taosMemoryFree(pOp->data);
libs/catalog/src/ctgCache.c:    taosMemoryFree(pOp);
libs/catalog/src/ctgCache.c:        taosMemoryFreeClear(pInfo);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgCache.c:    taosMemoryFreeClear(pTsmaInfo);
libs/catalog/src/ctgCache.c:  taosMemoryFreeClear(msg);
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgTbMetaCtx));
libs/catalog/src/ctgAsync.c:  ctx->pName = taosMemoryMalloc(sizeof(*name));
libs/catalog/src/ctgAsync.c:    taosMemoryFree(task.taskCtx);
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgTbMetasCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgDbVgCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgDbCfgCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgDbInfoCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgTbHashCtx));
libs/catalog/src/ctgAsync.c:  ctx->pName = taosMemoryMalloc(sizeof(*name));
libs/catalog/src/ctgAsync.c:    taosMemoryFree(task.taskCtx);
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgTbHashsCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgIndexCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgUdfCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgUserCtx));
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgTbIndexCtx));
libs/catalog/src/ctgAsync.c:  ctx->pName = taosMemoryMalloc(sizeof(*name));
libs/catalog/src/ctgAsync.c:    taosMemoryFree(task.taskCtx);
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgTbCfgCtx));
libs/catalog/src/ctgAsync.c:  ctx->pName = taosMemoryMalloc(sizeof(*name));
libs/catalog/src/ctgAsync.c:    taosMemoryFree(task.taskCtx);
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgTbTagCtx));
libs/catalog/src/ctgAsync.c:  ctx->pName = taosMemoryMalloc(sizeof(*name));
libs/catalog/src/ctgAsync.c:    taosMemoryFree(task.taskCtx);
libs/catalog/src/ctgAsync.c:  task.taskCtx = taosMemoryCalloc(1, sizeof(SCtgViewsCtx));
libs/catalog/src/ctgAsync.c:  SCtgTbTSMACtx* pTaskCtx = taosMemoryCalloc(1, sizeof(SCtgTbTSMACtx));
libs/catalog/src/ctgAsync.c:  SCtgTbTSMACtx* pTaskCtx = taosMemoryCalloc(1, sizeof(SCtgTbTSMACtx));
libs/catalog/src/ctgAsync.c:  *job = taosMemoryCalloc(1, sizeof(SCtgJob));
libs/catalog/src/ctgAsync.c:    pJob->jobRes.pSvrVer = taosMemoryCalloc(1, sizeof(SMetaRes));
libs/catalog/src/ctgAsync.c:        taosMemoryFreeClear(pOut->tbMeta);
libs/catalog/src/ctgAsync.c:          taosMemoryFreeClear(pOut->tbMeta);
libs/catalog/src/ctgAsync.c:        taosMemoryFreeClear(pOut->tbMeta);
libs/catalog/src/ctgAsync.c:            taosMemoryFreeClear(stbMeta);
libs/catalog/src/ctgAsync.c:            taosMemoryFreeClear(pOut->tbMeta);
libs/catalog/src/ctgAsync.c:            taosMemoryFreeClear(stbMeta);
libs/catalog/src/ctgAsync.c:      pTask->res = taosMemoryMalloc(sizeof(SVgroupInfo));
libs/catalog/src/ctgAsync.c:  taosMemoryFreeClear(pTask->msgCtx.out);
libs/catalog/src/ctgAsync.c:  SViewMeta*    pViewMeta = taosMemoryCalloc(1, sizeof(SViewMeta));
libs/catalog/src/ctgAsync.c:    taosMemoryFree(pViewMeta);
libs/catalog/src/ctgAsync.c:  taosMemoryFreeClear(pMsgCtx->out);
libs/catalog/src/ctgAsync.c:    pTask->res = taosMemoryMalloc(sizeof(SVgroupInfo));
libs/catalog/src/ctgAsync.c:    pTask->res = taosMemoryCalloc(1, sizeof(SDbCfgInfo));
libs/catalog/src/ctgAsync.c:  pTask->res = taosMemoryCalloc(1, sizeof(SDbInfo));
libs/catalog/src/ctgAsync.c:  rsp.pRawRes = taosMemoryCalloc(1, sizeof(SUserAuthRes));
libs/catalog/src/ctgAsync.c:  taosMemoryFreeClear(rsp.pRawRes);
libs/catalog/src/ctgAsync.c:    pCtx->pVgInfo = taosMemoryCalloc(1, sizeof(SVgroupInfo));
libs/catalog/src/ctgAsync.c:    pCtx->pVgInfo = taosMemoryCalloc(1, sizeof(SVgroupInfo));
libs/catalog/src/ctgRent.c:  mgmt->slots = taosMemoryCalloc(1, msgSize);
libs/catalog/src/ctgRent.c:  *res = taosMemoryMalloc(msize);
libs/catalog/src/ctgRemote.c:  taosMemoryFree(pMsg->pData);
libs/catalog/src/ctgRemote.c:  taosMemoryFree(pMsg->pEpSet);
libs/catalog/src/ctgRemote.c:  SMsgSendInfo* msgSendInfo = taosMemoryCalloc(1, sizeof(SMsgSendInfo));
libs/catalog/src/ctgRemote.c:  SCtgTaskCallbackParam* param = taosMemoryCalloc(1, sizeof(SCtgTaskCallbackParam));
libs/catalog/src/ctgRemote.c:  taosMemoryFree(msg);
libs/catalog/src/ctgRemote.c:  *msg = taosMemoryCalloc(1, msgSize);
libs/catalog/src/ctgRemote.c:  taosMemoryFree(msg);
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(SUseDbOutput));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(SDbCfgInfo));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(SIndexInfo));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(STableIndex));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(SFuncInfo));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(SGetUserAuthRsp));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(STableMetaOutput));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(STableMetaOutput));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, POINTER_BYTES);
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    void* pOut = taosMemoryCalloc(1, sizeof(STableTSMAInfoRsp));
libs/catalog/src/ctgRemote.c:  void* (*mallocFp)(int64_t) = pTask ? (MallocType)taosMemoryMalloc : (MallocType)rpcMallocCont;
libs/catalog/src/ctgRemote.c:    SStreamProgressRsp* pOut = taosMemoryCalloc(1, sizeof(SStreamProgressRsp));
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta->user);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta->querySql);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta->pSchema);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(param);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMsg->msg);
libs/catalog/src/ctgUtil.c:    taosMemoryFree(node->op->data);
libs/catalog/src/ctgUtil.c:    taosMemoryFree(node->op);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(node);
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(pData->pSvrVer);
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(mgmt->slots);
libs/catalog/src/ctgUtil.c:    taosMemoryFreeClear(pCache->pMeta);
libs/catalog/src/ctgUtil.c:    taosMemoryFreeClear(pCache->pIndex);
libs/catalog/src/ctgUtil.c:    taosMemoryFreeClear(pCache->pMeta);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pCtg);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pCtg);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pOutput);
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(pCtx->target);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:      taosMemoryFree(pOut->tbMeta);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:      taosMemoryFree(pOut->pCode);
libs/catalog/src/ctgUtil.c:      taosMemoryFree(pOut->pComment);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:          taosMemoryFree(pOut);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(pCtx->out);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pOutput->tbMeta);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pOutput);
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(pTask->msgCtx.target);
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(pTask->res);
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(pRes->pRes);
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(pRes->pRes);
libs/catalog/src/ctgUtil.c:    taosMemoryFreeClear(pRes->pRes);
libs/catalog/src/ctgUtil.c:    taosMemoryFree(pTsmaRsp);
libs/catalog/src/ctgUtil.c:    taosMemoryFree(pVal->pData);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(*pRes);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(*pRes);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(*pRes);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(*pRes);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(*pRes);
libs/catalog/src/ctgUtil.c:        taosMemoryFreeClear(*pRes);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(*pRes);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx->pName);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx->pName);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx->pName);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx->pName);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx->pVgInfo);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx->pName);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx->pVgInfo);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(pTask->taskCtx);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(job);
libs/catalog/src/ctgUtil.c:      vgInfo = taosMemoryMalloc(sizeof(SVgroupInfo));
libs/catalog/src/ctgUtil.c:      vgInfo = taosMemoryMalloc(sizeof(SVgroupInfo));
libs/catalog/src/ctgUtil.c:    SVgroupInfo* pNewVg = taosMemoryMalloc(sizeof(SVgroupInfo));
libs/catalog/src/ctgUtil.c:  *dst = taosMemoryMalloc(sizeof(SDBVgInfo));
libs/catalog/src/ctgUtil.c:    taosMemoryFreeClear(*dst);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(*dst);
libs/catalog/src/ctgUtil.c:  *pOutput = taosMemoryMalloc(sizeof(STableMetaOutput));
libs/catalog/src/ctgUtil.c:    (*pOutput)->tbMeta = taosMemoryMalloc(metaSize + schemaExtSize);
libs/catalog/src/ctgUtil.c:      taosMemoryFreeClear(*pOutput);
libs/catalog/src/ctgUtil.c:  SDbCfgInfo* pDst = taosMemoryMalloc(sizeof(SDbCfgInfo));
libs/catalog/src/ctgUtil.c:  SDbInfo* pDst = taosMemoryMalloc(sizeof(SDbInfo));
libs/catalog/src/ctgUtil.c:static void ctgFreeDbInfo(void* p) { taosMemoryFree(((SMetaRes*)p)->pRes); }
libs/catalog/src/ctgUtil.c://   STableMeta* pDst = taosMemoryMalloc(sizeof(STableMeta));
libs/catalog/src/ctgUtil.c://   void* pSchema = taosMemoryMalloc(total * sizeof(SSchema));
libs/catalog/src/ctgUtil.c://     taosMemoryFree(pDst);
libs/catalog/src/ctgUtil.c://   void* pSchemaExt = taosMemoryMalloc(pMeta->tableInfo.numOfColumns * sizeof(SSchemaExt));
libs/catalog/src/ctgUtil.c://     taosMemoryFree(pSchema);
libs/catalog/src/ctgUtil.c://     taosMemoryFree(pDst);
libs/catalog/src/ctgUtil.c:static void ctgFreeTableMeta(void* p) { taosMemoryFree(((SMetaRes*)p)->pRes); }
libs/catalog/src/ctgUtil.c:  SVgroupInfo* pDst = taosMemoryMalloc(sizeof(SVgroupInfo));
libs/catalog/src/ctgUtil.c:static void ctgFreeVgroupInfo(void* p) { taosMemoryFree(((SMetaRes*)p)->pRes); }
libs/catalog/src/ctgUtil.c:  SFuncInfo* pDst = taosMemoryMalloc(sizeof(SFuncInfo));
libs/catalog/src/ctgUtil.c:static void ctgFreeFuncInfo(void* p) { taosMemoryFree(((SMetaRes*)p)->pRes); }
libs/catalog/src/ctgUtil.c:  SIndexInfo* pDst = taosMemoryMalloc(sizeof(SIndexInfo));
libs/catalog/src/ctgUtil.c:static void ctgFreeIndexInfo(void* p) { taosMemoryFree(((SMetaRes*)p)->pRes); }
libs/catalog/src/ctgUtil.c:  bool* pDst = taosMemoryMalloc(sizeof(bool));
libs/catalog/src/ctgUtil.c:static void ctgFreeUserAuth(void* p) { taosMemoryFree(((SMetaRes*)p)->pRes); }
libs/catalog/src/ctgUtil.c://   STableCfg* pDst = taosMemoryMalloc(sizeof(STableCfg));
libs/catalog/src/ctgUtil.c:static void ctgFreeTableCfg(void* p) { taosMemoryFree(((SMetaRes*)p)->pRes); }
libs/catalog/src/ctgUtil.c:  SViewMeta* pDst = taosMemoryMalloc(sizeof(SViewMeta));
libs/catalog/src/ctgUtil.c:  pDst->pSchema = taosMemoryMalloc(pSrcMeta->numOfCols * sizeof(*pSrcMeta->pSchema));
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta->user);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta->querySql);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta->pSchema);  
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(((SMetaRes*)p)->pRes);
libs/catalog/src/ctgUtil.c:    taosMemoryFreeClear(pMeta);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(pMeta);
libs/catalog/src/ctgUtil.c:  taosMemoryFree(stbName);
libs/catalog/src/ctgUtil.c:  SMetaData* pRes = taosMemoryCalloc(1, sizeof(SMetaData));
libs/catalog/src/ctgUtil.c:  taosMemoryFreeClear(pData->pSvrVer);
libs/catalog/src/ctgUtil.c:  pViewMeta->pSchema = taosMemoryMalloc(pViewMeta->numOfCols * sizeof(SSchema));
libs/catalog/src/ctgDbg.c:  taosMemoryFree(param);
libs/catalog/src/ctgDbg.c:  int32_t *param = taosMemoryCalloc(1, sizeof(int32_t));
libs/catalog/src/ctgDbg.c:    taosMemoryFree(dup);
libs/catalog/src/ctgDbg.c:    taosMemoryFree(dup);
libs/catalog/src/ctgDbg.c:  taosMemoryFree(dup);
os/test/osTests.cpp:  char *  writeBuffer = (char *)taosMemoryCalloc(1, MAX_TEST_FILE_SIZE);
os/test/osTests.cpp:  char *  readBuffer = (char *)taosMemoryCalloc(1, MAX_TEST_FILE_SIZE);
os/test/osTests.cpp:  taosMemoryFree(writeBuffer);
os/test/osTests.cpp:  taosMemoryFree(readBuffer);
os/src/osTimezone.c:  char  *buf = taosMemoryCalloc(len + 1, 1);
os/src/osTimezone.c:  taosMemoryFree(buf);
os/src/osSocket.c:  taosMemoryFree(*ppSocket);
os/src/osSocket.c:  taosMemoryFree(*ppSocketServer);
os/src/osSocket.c:  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
os/src/osSocket.c:  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
os/src/osSocket.c:  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
os/src/osSocket.c:  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
os/src/osSocket.c:  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
os/src/osMemory.c:int32_t taosMemoryDbgInit() {
os/src/osMemory.c:int32_t taosMemoryDbgInitRestore() {
os/src/osMemory.c:void *taosMemoryMalloc(int64_t size) {
os/src/osMemory.c:void *taosMemoryCalloc(int64_t num, int64_t size) {
os/src/osMemory.c:void *taosMemoryRealloc(void *ptr, int64_t size) {
os/src/osMemory.c:  if (ptr == NULL) return taosMemoryMalloc(size);
os/src/osMemory.c:void taosMemoryFree(void *ptr) {
os/src/osMemory.c:int64_t taosMemorySize(void *ptr) {
os/src/osMemory.c:void taosMemoryTrim(int32_t size) {
os/src/osMemory.c:void *taosMemoryMallocAlign(uint32_t alignment, int64_t size) {
os/src/osMemory.c:  return taosMemoryMalloc(size);
os/src/osFile.c:        taosMemoryFree(s);
os/src/osFile.c:      taosMemoryFree(s);
os/src/osFile.c:  TdFilePtr pFile = (TdFilePtr)taosMemoryMalloc(sizeof(TdFile));
os/src/osFile.c:  taosMemoryFree(*ppFile);
os/src/osFile.c:    taosMemoryFreeClear(*ptrBuf);
os/src/osFile.c:  *ptrBuf = taosMemoryMalloc(bufferSize);
os/src/osFile.c:      taosMemoryFreeClear(*ptrBuf);
os/src/osFile.c:    void *newBuf = taosMemoryRealloc(*ptrBuf, bufferSize);
os/src/osFile.c:      taosMemoryFreeClear(*ptrBuf);
os/src/osFile.c:  char   *data = taosMemoryMalloc(compressSize);
os/src/osFile.c:  taosMemoryFree(data);
os/src/osLocale.c:    taosMemoryFree(revisedCharset);
os/src/osLocale.c:    taosMemoryFree(revisedCharset);
os/src/osDir.c:  TdDirPtr pDir = taosMemoryMalloc(sizeof(TdDir));
os/src/osDir.c:    taosMemoryFree(pDir);
os/src/osDir.c:  TdDirPtr dirPtr = (TdDirPtr)taosMemoryMalloc(sizeof(TdDir));
os/src/osDir.c:  taosMemoryFree(*ppDir);
os/src/osDir.c:  taosMemoryFree(*ppDir);
os/src/osSystem.c:    taosMemoryFreeClear(*ptrBuf);
os/src/osSystem.c:  *ptrBuf = taosMemoryMalloc(1024);
os/src/osSystem.c:    taosMemoryFreeClear(*ptrBuf);
os/src/osString.c://  char *f1_mbs = taosMemoryCalloc(bytes, 1);
os/src/osString.c://  char *f2_mbs = taosMemoryCalloc(bytes, 1);
os/src/osString.c://  taosMemoryFree(f1_mbs);
os/src/osString.c://  taosMemoryFree(f2_mbs);
os/src/osString.c:  ASSERT(taosMemorySize(target_ucs4) >= len_ucs4 * sizeof(TdUcs4));
os/src/osString.c:  gConv[M2C] = taosMemoryCalloc(gConvMaxNum[M2C], sizeof(SConv));
os/src/osString.c:  gConv[1 - M2C] = taosMemoryCalloc(gConvMaxNum[1 - M2C], sizeof(SConv));
os/src/osString.c:  taosMemoryFreeClear(gConv[M2C]);
os/src/osString.c:  taosMemoryFreeClear(gConv[1 - M2C]);
os/src/osString.c:  uint8_t *tmp = (uint8_t *)taosMemoryCalloc(*size, 1);
os/src/osString.c://  uint8_t* tmp = (uint8_t*)taosMemoryCalloc(*size, 1);
os/src/osString.c:  uint8_t* tmp = (uint8_t*)taosMemoryCalloc(*size + 1, 1);
util/test/trefTest.c:      pSpace->p[id] = taosMemoryMalloc(128);
util/test/trefTest.c:void myfree(void *p) { taosMemoryFree(p); }
util/test/trefTest.c:  pSpace->p = (void **)taosMemoryCalloc(sizeof(void *), pSpace->refNum);
util/test/trefTest.c:  pSpace->rid = taosMemoryCalloc(pSpace->refNum, sizeof(int64_t));
util/test/trefTest.c:  taosMemoryFree(pSpace->p);
util/test/trefTest.c:  SRefSpace *pSpaceList = (SRefSpace *)taosMemoryCalloc(sizeof(SRefSpace), threads);
util/test/trefTest.c:  TdThread  *pThreadList = (TdThread *)taosMemoryCalloc(sizeof(TdThread), threads);
util/test/trefTest.c:  taosMemoryFree(pSpaceList);
util/test/trefTest.c:  taosMemoryFree(pThreadList);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/stringTest.cpp:  taosMemoryFree(ret);
util/test/pageBufferTest.cpp:  char* rowData = (char*)taosMemoryCalloc(1, len);
util/test/pageBufferTest.cpp:  taosMemoryFree(rowData);
util/test/decompressTest.cpp:  int64_t* pList = static_cast<int64_t*>(taosMemoryCalloc(num, sizeof(int64_t)));
util/test/decompressTest.cpp:  char*   px = static_cast<char*>(taosMemoryMalloc(num * sizeof(int64_t)));
util/test/decompressTest.cpp:  char* pOutput = static_cast<char*>(taosMemoryMalloc(num * sizeof(int64_t)));
util/test/decompressTest.cpp:  taosMemoryFree(pList);
util/test/decompressTest.cpp:  taosMemoryFree(pOutput);
util/test/decompressTest.cpp:  taosMemoryFree(px);
util/test/decompressTest.cpp:    char*   px = static_cast<char*>(taosMemoryMalloc(num * sizeof(int64_t)));
util/test/decompressTest.cpp:    char*   pBuf = static_cast<char*>(taosMemoryMalloc(num * sizeof(int64_t) + 64));
util/test/decompressTest.cpp:    char* pOutput = static_cast<char*>(taosMemoryCalloc(1, num * sizeof(int64_t) + 64));
util/test/decompressTest.cpp:    taosMemoryFree(px);
util/test/decompressTest.cpp:    taosMemoryFree(pBuf);
util/test/decompressTest.cpp:    taosMemoryFree(pOutput);
util/test/decompressTest.cpp:    char*   px = static_cast<char*>(taosMemoryMalloc(externalSize));
util/test/decompressTest.cpp:    char*   pBuf = static_cast<char*>(taosMemoryMalloc(externalSize));
util/test/decompressTest.cpp:    char* pOutput = static_cast<char*>(taosMemoryCalloc(1, externalSize));
util/test/decompressTest.cpp:    taosMemoryFree(px);
util/test/decompressTest.cpp:    taosMemoryFree(pBuf);
util/test/decompressTest.cpp:    taosMemoryFree(pOutput);
util/test/decompressTest.cpp:    // taosMemoryFree(pVal);
util/test/decompressTest.cpp:  char*    pBuf = (char*)taosMemoryCalloc(1, cnt);
util/test/decompressTest.cpp:  char*    pBuf = (char*)taosMemoryCalloc(1, cnt);
util/test/decompressTest.cpp:  int64_t* pList = static_cast<int64_t*>(taosMemoryCalloc(num, sizeof(int64_t)));
util/test/decompressTest.cpp:  taosMemoryFree(pList);
util/test/decompressTest.cpp:      taosMemoryFree(p);
util/test/decompressTest.cpp:    taosMemoryFree(p);
util/test/decompressTest.cpp:      // taosMemoryFree(p);
util/test/decompressTest.cpp:    taosMemoryFree(p);
util/test/hashTest.cpp:  data.p = (char*)taosMemoryMalloc(10);
util/test/hashTest.cpp:  data.p = (char*)taosMemoryMalloc(10);
util/test/hashTest.cpp:  taosMemoryFreeClear(pdata->p);
util/test/hashTest.cpp:  taosMemoryFreeClear(data.p);
util/test/hashTest.cpp:  char* name = (char*)taosMemoryCalloc(50000000, 9);
util/test/arrayTest.cpp:    taosMemoryFree(pItem);
util/test/arrayTest.cpp:      char *v = (char *)taosMemoryCalloc(100, sizeof(char));
util/test/arrayTest.cpp:  taosArrayClearP(pa, taosMemoryFree);
util/test/arrayTest.cpp:  taosArrayDestroyP(pa, taosMemoryFree);
util/test/tbaseCodecTest.cpp:  taosMemoryFreeClear(pDec);
util/test/tbaseCodecTest.cpp:  taosMemoryFreeClear(pEnc);
util/test/tbaseCodecTest.cpp:  pRaw = (uint8_t *)taosMemoryCalloc(1, TEST_LEN_MAX);
util/test/tbaseCodecTest.cpp:  taosMemoryFreeClear(pRaw);
util/test/tbaseCodecTest.cpp:  taosMemoryFreeClear(pRaw);
util/test/trbtreeTest.cpp:    SRBTreeNode *pNode = (SRBTreeNode *)taosMemoryMalloc(sizeof(*pNode) + sizeof(int));
util/test/skiplistTest.cpp:    //    auto d = (SSkipListNode*)taosMemoryCalloc(1, size + sizeof(double) * 2);
util/test/skiplistTest.cpp:      taosMemoryFreeClear(pNodes);
util/test/skiplistTest.cpp:    auto d = (SSkipListNode*)taosMemoryCalloc(1, s + sizeof(int32_t) * 2);
util/test/skiplistTest.cpp:  auto pNode = (SSkipListNode*)taosMemoryCalloc(1, headsize + max_key_size + sizeof(double));
util/test/skiplistTest.cpp:  pNode = (SSkipListNode*)taosMemoryCalloc(1, headsize + max_key_size + sizeof(double));
util/test/skiplistTest.cpp:  taosMemoryFree(pRes);
util/test/skiplistTest.cpp:    auto pNode = (SSkipListNode*)taosMemoryCalloc(1, headsize + 20 + sizeof(double));
util/test/skiplistTest.cpp:      taosMemoryFreeClear(pres);
util/test/skiplistTest.cpp:  char* total = (char*)taosMemoryCalloc(1, unit * size);
util/test/skiplistTest.cpp:  taosMemoryFreeClear(total);
util/test/skiplistTest.cpp:      SSkipListNode* d = (SSkipListNode*)taosMemoryCalloc(1, size + sizeof(int32_t));
util/test/skiplistTest.cpp:      taosMemoryFreeClear(pNodes);
util/test/skiplistTest.cpp:      SSkipListKey *pKeys = taosMemoryMalloc(sizeof(SSkipListKey) * 20);
util/test/skiplistTest.cpp:      taosMemoryFreeClear(pNodes);
util/test/skiplistTest.cpp:      taosMemoryFree(pKeys);*/
util/src/tpagedbuf.c:  SPageInfo* ppi = taosMemoryMalloc(sizeof(SPageInfo));
util/src/tpagedbuf.c:  taosMemoryFreeClear(pn);
util/src/tpagedbuf.c:  *pBuf = taosMemoryCalloc(1, sizeof(SDiskbasedBuf));
util/src/tpagedbuf.c:        taosMemoryCalloc(1, getAllocPageSize(pBuf->pageSize));  // add extract bytes in case of zipped buffer increased.
util/src/tpagedbuf.c:    taosMemoryFreeClear(pItem);
util/src/tpagedbuf.c:        taosMemoryFree(availablePage);
util/src/tpagedbuf.c:          taosMemoryFree((*pi)->pData);
util/src/tpagedbuf.c:  taosMemoryFreeClear(pBuf->path);
util/src/tpagedbuf.c:    taosMemoryFreeClear(pi->pData);
util/src/tpagedbuf.c:    taosMemoryFreeClear(pi);
util/src/tpagedbuf.c:  taosMemoryFreeClear(pBuf->id);
util/src/tpagedbuf.c:  taosMemoryFreeClear(pBuf->assistBuf);
util/src/tpagedbuf.c:  taosMemoryFreeClear(pBuf);
util/src/tpagedbuf.c:    pBuf->assistBuf = taosMemoryMalloc(pBuf->pageSize + 2);  // EXTRA BYTES
util/src/tpagedbuf.c:  taosMemoryFreeClear(ppi->pData);
util/src/tpagedbuf.c:  taosMemoryFreeClear(pNode);
util/src/tpagedbuf.c:    taosMemoryFreeClear(pi->pData);
util/src/tpagedbuf.c:    taosMemoryFreeClear(pi);
util/src/tbase58.c:    if (!(pbuf = taosMemoryCalloc(1, size))) {
util/src/tbase58.c:  uint8_t *result = taosMemoryCalloc(1, nz + (pbuf + size - pi) + 1);
util/src/tbase58.c:    if (bfree) taosMemoryFree(pbuf);
util/src/tbase58.c:  if (bfree) taosMemoryFree(pbuf);
util/src/tbase58.c:    if (!(pbuf = taosMemoryCalloc(1, size))) {
util/src/tbase58.c:      if (bfree) taosMemoryFree(pbuf);
util/src/tbase58.c:    if (bfree) taosMemoryFree(pbuf);
util/src/tbase58.c:  uint8_t *result = taosMemoryCalloc(1, nz + (pbuf + size - it) + 1);
util/src/tbase58.c:    if (bfree) taosMemoryFree(pbuf);
util/src/tbase58.c:  if (bfree) taosMemoryFree(pbuf);
util/src/tlosertree.c:      (SMultiwayMergeTreeInfo*)taosMemoryCalloc(1, sizeof(SMultiwayMergeTreeInfo) + sizeof(STreeNode) * totalEntries);
util/src/tlosertree.c:  taosMemoryFreeClear(*pTree);
util/src/thash.c:    taosMemoryFreeClear(_n);         \
util/src/thash.c:  SHashObj *pHashObj = (SHashObj *)taosMemoryMalloc(sizeof(SHashObj));
util/src/thash.c:  pHashObj->hashList = (SHashEntry **)taosMemoryMalloc(pHashObj->capacity * sizeof(void *));
util/src/thash.c:    taosMemoryFree(pHashObj);
util/src/thash.c:    taosMemoryFree(pHashObj->hashList);
util/src/thash.c:    taosMemoryFree(pHashObj);
util/src/thash.c:  void *p = taosMemoryMalloc(pHashObj->capacity * sizeof(SHashEntry));
util/src/thash.c:    taosMemoryFree(pHashObj->hashList);
util/src/thash.c:    taosMemoryFree(pHashObj);
util/src/thash.c:        *d = taosMemoryCalloc(1, *size);
util/src/thash.c:        char *tmp = taosMemoryRealloc(*d, *size);
util/src/thash.c:// the input paras should be SHashObj **, so the origin input will be set by taosMemoryFreeClear(*pHashObj)
util/src/thash.c:  taosMemoryFreeClear(pHashObj->hashList);
util/src/thash.c:    taosMemoryFreeClear(p);
util/src/thash.c:  taosMemoryFree(pHashObj);
util/src/thash.c:  SHashEntry **pNewEntryList = taosMemoryRealloc(pHashObj->hashList, sizeof(SHashEntry *) * newCapacity);
util/src/thash.c:  void  *p = taosMemoryCalloc(inc, sizeof(SHashEntry));
util/src/thash.c:  SHashNode *pNewNode = taosMemoryMalloc(sizeof(SHashNode) + keyLen + dsize + 1);
util/src/tsimplehash.c:    taosMemoryFreeClear(_n);   \
util/src/tsimplehash.c:  SSHashObj *pHashObj = (SSHashObj *)taosMemoryMalloc(sizeof(SSHashObj));
util/src/tsimplehash.c:  pHashObj->hashList = (SHNode **)taosMemoryCalloc(pHashObj->capacity, sizeof(void *));
util/src/tsimplehash.c:    taosMemoryFree(pHashObj);
util/src/tsimplehash.c:    void* pNewPage = taosMemoryMalloc(allocSize);
util/src/tsimplehash.c:  return taosMemoryMalloc(size);
util/src/tsimplehash.c:  void   *pNewEntryList = taosMemoryRealloc(pHashObj->hashList, POINTER_BYTES * newCapacity);
util/src/tsimplehash.c:  taosMemoryFreeClear(pHashObj->hashList);
util/src/tsimplehash.c:  taosMemoryFree(pHashObj);
util/src/tarray.c:  SArray* pArray = taosMemoryMalloc(sizeof(SArray));
util/src/tarray.c:  pArray->pData = taosMemoryCalloc(size, elemSize);
util/src/tarray.c:    taosMemoryFree(pArray);
util/src/tarray.c:  SArray* pArray = taosMemoryMalloc(sizeof(SArray));
util/src/tarray.c:  pArray->pData = taosMemoryCalloc(initialSize, elemSize);
util/src/tarray.c:    taosMemoryFree(pArray);
util/src/tarray.c:  void* tmp = taosMemoryRealloc(pArray->pData, size * pArray->elemSize);
util/src/tarray.c:    pArray->pData = taosMemoryRealloc(pArray->pData, tsize * pArray->elemSize);
util/src/tarray.c:    taosMemoryFree(pArray->pData);
util/src/tarray.c:    taosMemoryFree(pArray);
util/src/tarray.c:    void* data = taosMemoryCalloc(1, dataSz);
util/src/tbloomfilter.c:  SBloomFilter *pBF = taosMemoryCalloc(1, sizeof(SBloomFilter));
util/src/tbloomfilter.c:  pBF->buffer = taosMemoryCalloc(pBF->numUnits, sizeof(uint64_t));
util/src/tbloomfilter.c:  taosMemoryFree(pBF->buffer);
util/src/tbloomfilter.c:  taosMemoryFree(pBF);
util/src/tbloomfilter.c:  SBloomFilter *pBF = taosMemoryCalloc(1, sizeof(SBloomFilter));
util/src/tbloomfilter.c:  pBF->buffer = taosMemoryCalloc(pBF->numUnits, sizeof(uint64_t));
util/src/tqueue.c:  STaosQueue *queue = taosMemoryCalloc(1, sizeof(STaosQueue));
util/src/tqueue.c:    taosMemoryFree(pTemp);
util/src/tqueue.c:  taosMemoryFree(queue);
util/src/tqueue.c:  STaosQnode *pNode = taosMemoryCalloc(1, sizeof(STaosQnode) + size);
util/src/tqueue.c:      taosMemoryFree(pNode);
util/src/tqueue.c:  taosMemoryFree(pNode);
util/src/tqueue.c:  STaosQall *qall = taosMemoryCalloc(1, sizeof(STaosQall));
util/src/tqueue.c:void taosFreeQall(STaosQall *qall) { taosMemoryFree(qall); }
util/src/tqueue.c:  STaosQset *qset = taosMemoryCalloc(sizeof(STaosQset), 1);
util/src/tqueue.c:  taosMemoryFree(qset);
util/src/tworker.c:  pool->workers = taosMemoryCalloc(pool->max, sizeof(SQueueWorker));
util/src/tworker.c:  taosMemoryFreeClear(pool->workers);
util/src/tworker.c:    taosMemoryFree(worker);
util/src/tworker.c:    SQueueWorker *worker = taosMemoryCalloc(1, sizeof(SQueueWorker));
util/src/tworker.c:      taosMemoryFree(worker);
util/src/tworker.c:      taosMemoryFree(worker);
util/src/tworker.c:  pool->workers = taosMemoryCalloc(pool->max, sizeof(SWWorker));
util/src/tworker.c:  taosMemoryFreeClear(pool->workers);
util/src/tbase64.c:  char   *result = (char *)taosMemoryMalloc((size_t)(vlen * 4) / 3 + 10);
util/src/tbase64.c:  uint8_t *result = (uint8_t *)taosMemoryMalloc((size_t)(inlen * 3) / 4 + 1);
util/src/tbase64.c:  taosMemoryFree(result);
util/src/tmempool.c:  pool_p = (pool_t *)taosMemoryMalloc(sizeof(pool_t));
util/src/tmempool.c:  pool_p->pool = (char *)taosMemoryMalloc((size_t)(blockSize * numOfBlock));
util/src/tmempool.c:  pool_p->freeList = (int32_t *)taosMemoryMalloc(sizeof(int32_t) * (size_t)numOfBlock);
util/src/tmempool.c:    taosMemoryFreeClear(pool_p->freeList);
util/src/tmempool.c:    taosMemoryFreeClear(pool_p->pool);
util/src/tmempool.c:    taosMemoryFreeClear(pool_p);
util/src/tmempool.c:  if (pool_p->pool) taosMemoryFree(pool_p->pool);
util/src/tmempool.c:  if (pool_p->freeList) taosMemoryFree(pool_p->freeList);
util/src/tmempool.c:  taosMemoryFree(pool_p);
util/src/tstrbuild.c:    void* tmp = taosMemoryRealloc(sb->buf, size);
util/src/tstrbuild.c:  taosMemoryFree(sb->buf);
util/src/tcompression.c:  *ppCmprsor = (SCompressor *)taosMemoryCalloc(1, sizeof(SCompressor));
util/src/tcompression.c:  taosMemoryFree(pCmprsor);
util/src/tref.c:  nodeList = taosMemoryCalloc(sizeof(SRefNode *), (size_t)max);
util/src/tref.c:  lockedBy = taosMemoryCalloc(sizeof(int64_t), (size_t)max);
util/src/tref.c:    taosMemoryFree(nodeList);
util/src/tref.c:    taosMemoryFree(nodeList);
util/src/tref.c:    taosMemoryFree(lockedBy);
util/src/tref.c:  pNode = taosMemoryCalloc(sizeof(SRefNode), 1);
util/src/tref.c:    taosMemoryFree(pNode);
util/src/tref.c:    taosMemoryFreeClear(pSet->nodeList);
util/src/tref.c:    taosMemoryFreeClear(pSet->lockedBy);
util/src/tlog.c:    taosMemoryFreeClear(tsLogObj.slowHandle->buffer);
util/src/tlog.c:    taosMemoryFreeClear(tsLogObj.slowHandle);
util/src/tlog.c:    taosMemoryFreeClear(tsLogObj.logHandle->buffer);
util/src/tlog.c:    taosMemoryFreeClear(tsLogObj.logHandle);
util/src/tlog.c:  OldFileKeeper* oldFileKeeper = taosMemoryMalloc(sizeof(OldFileKeeper));
util/src/tlog.c:  taosMemoryFree(oldFileKeeper);
util/src/tlog.c:  char   *buffer = taosMemoryMalloc(LOG_MAX_LINE_DUMP_BUFFER_SIZE);
util/src/tlog.c:  taosMemoryFree(buffer);
util/src/tlog.c:  char   *buffer = taosMemoryMalloc(LOG_MAX_LINE_DUMP_BUFFER_SIZE);
util/src/tlog.c:  taosMemoryFree(buffer);
util/src/tlog.c:  pLogBuf = taosMemoryCalloc(1, sizeof(SLogBuff));
util/src/tlog.c:  LOG_BUF_BUFFER(pLogBuf) = taosMemoryMalloc(bufSize);
util/src/tlog.c:  taosMemoryFreeClear(LOG_BUF_BUFFER(pLogBuf));
util/src/tlog.c:  taosMemoryFreeClear(pLogBuf);
util/src/tlog.c:  taosMemoryFree(pMsg);
util/src/tlog.c:  buf = taosMemoryMalloc(msgLen);
util/src/tlog.c:  taosMemoryFree(buf);
util/src/tscalablebf.c:  SScalableBf *pSBf = taosMemoryCalloc(1, sizeof(SScalableBf));
util/src/tscalablebf.c:  taosMemoryFree(pSBf);
util/src/tscalablebf.c:  SScalableBf *pSBf = taosMemoryCalloc(1, sizeof(SScalableBf));
util/src/tdes.c:  char* dest = taosMemoryCalloc(len + 1, 1);
util/src/tdes.c:  char*    temp = taosMemoryCalloc(len + 8, 1);
util/src/tdes.c:  taosMemoryFree(temp);
util/src/tskiplist.c:#define tSkipListFreeNode(n) taosMemoryFreeClear((n))
util/src/tskiplist.c:  SSkipList *pSkipList = (SSkipList *)taosMemoryCalloc(1, sizeof(SSkipList));
util/src/tskiplist.c:    pSkipList->lock = (TdThreadRwlock *)taosMemoryCalloc(1, sizeof(TdThreadRwlock));
util/src/tskiplist.c:    taosMemoryFreeClear(pSkipList->lock);
util/src/tskiplist.c:  taosMemoryFreeClear(pSkipList);
util/src/tskiplist.c:  taosMemoryFreeClear(iter);
util/src/tskiplist.c:  SSkipListIterator *iter = taosMemoryCalloc(1, sizeof(SSkipListIterator));
util/src/tskiplist.c:  SSkipListNode *pNode = (SSkipListNode *)taosMemoryCalloc(1, tsize);
util/src/tcache.c:  taosMemoryFree(pNode);
util/src/tcache.c:  taosMemoryFree(pElem->pData);
util/src/tcache.c:  taosMemoryFree(pElem);
util/src/tcache.c:  SCacheObj *pCacheObj = (SCacheObj *)taosMemoryCalloc(1, sizeof(SCacheObj));
util/src/tcache.c:  pCacheObj->pEntryList = taosMemoryCalloc(pCacheObj->capacity, sizeof(SCacheEntry));
util/src/tcache.c:    taosMemoryFree(pCacheObj);
util/src/tcache.c:    taosMemoryFreeClear(pCacheObj->pEntryList);
util/src/tcache.c:    taosMemoryFree(pCacheObj);
util/src/tcache.c:      taosMemoryFreeClear(pNode);
util/src/tcache.c:            taosMemoryFree(pNode);
util/src/tcache.c:  SCacheNode *pNewNode = taosMemoryCalloc(1, sizeInBytes);
util/src/tcache.c:  STrashElem *pElem = taosMemoryCalloc(1, sizeof(STrashElem));
util/src/tcache.c:  taosMemoryFreeClear(pCacheObj->pEntryList);
util/src/tcache.c:  taosMemoryFreeClear(pCacheObj->name);
util/src/tcache.c:  taosMemoryFree(pCacheObj);
util/src/tcache.c:  SCacheIter *pIter = taosMemoryCalloc(1, sizeof(SCacheIter));
util/src/tcache.c:        char *tmp = taosMemoryRealloc(pIter->pCurrent, pEntry->num * POINTER_BYTES);
util/src/tcache.c:  taosMemoryFreeClear(pIter->pCurrent);
util/src/tcache.c:  taosMemoryFreeClear(pIter);
util/src/tdigest.c:  unmerged_centroids = (SCentroid *)taosMemoryMalloc(sizeof(SCentroid) * t->num_buffered_pts);
util/src/tdigest.c:  args.centroids = (SCentroid *)taosMemoryMalloc((size_t)(sizeof(SCentroid) * t->size));
util/src/tdigest.c:  taosMemoryFree((void *)unmerged_centroids);
util/src/tdigest.c:  taosMemoryFree((void *)args.centroids);
util/src/tlrucache.c:  taosMemoryFree(entry);
util/src/tlrucache.c:  table->list = taosMemoryCalloc(1 << table->lengthBits, sizeof(SLRUEntry *));
util/src/tlrucache.c:  taosMemoryFree(table->list);
util/src/tlrucache.c:  SLRUEntry **newList = taosMemoryCalloc(1 << newLengthBits, sizeof(SLRUEntry *));
util/src/tlrucache.c:  taosMemoryFree(table->list);
util/src/tlrucache.c:        taosMemoryFree(e);
util/src/tlrucache.c:  SLRUEntry *e = taosMemoryCalloc(1, sizeof(SLRUEntry) - 1 + keyLen);
util/src/tlrucache.c:  SLRUCache *cache = taosMemoryCalloc(1, sizeof(SLRUCache));
util/src/tlrucache.c:  cache->shards = taosMemoryCalloc(numShards, sizeof(SLRUCacheShard));
util/src/tlrucache.c:    taosMemoryFree(cache);
util/src/tlrucache.c:      taosMemoryFree(cache->shards);
util/src/tlrucache.c:    taosMemoryFree(cache);
util/src/tutil.c:  char **split = taosMemoryMalloc(POINTER_BYTES * size);
util/src/tutil.c:      split = taosMemoryRealloc(split, POINTER_BYTES * size);
util/src/tutil.c:      result = (char *)taosMemoryCalloc(1, size);
util/src/tencode.c:    taosMemoryFree(pMem);
util/src/tencode.c:    taosMemoryFree(pMem);
util/src/tconfig.c:  SConfig *pCfg = taosMemoryCalloc(1, sizeof(SConfig));
util/src/tconfig.c:    taosMemoryFree(pCfg);
util/src/tconfig.c:    taosMemoryFreeClear(pItem->str);
util/src/tconfig.c:    taosMemoryFreeClear(pItem->name);
util/src/tconfig.c:  taosMemoryFree(pCfg);
util/src/tconfig.c:  taosMemoryFreeClear(pItem->str);
util/src/tconfig.c:  taosMemoryFreeClear(pItem->str);
util/src/tconfig.c:      taosMemoryFree(pItem->name);
util/src/tconfig.c:      taosMemoryFree(pItem->str);
util/src/tconfig.c:    taosMemoryFree(pItem->name);
util/src/tconfig.c://   if (line != NULL) taosMemoryFreeClear(line);
util/src/tconfig.c:    char  *buf = taosMemoryMalloc(fileSize);
util/src/tconfig.c:      taosMemoryFreeClear(buf);
util/src/tconfig.c:      taosMemoryFreeClear(buf);
util/src/tconfig.c:    taosMemoryFreeClear(buf);
util/src/tconfig.c:        cfgLineBuf = taosMemoryMalloc(itemNameLen + itemValueStringLen + 2);
util/src/tconfig.c:  SConfigIter* pIter = taosMemoryCalloc(1, sizeof(SConfigIter));
util/src/tconfig.c:  taosMemoryFree(pIter);
util/src/theap.c:  Heap* heap = taosMemoryCalloc(1, sizeof(Heap));
util/src/theap.c:void heapDestroy(Heap* heap) { taosMemoryFree(heap); }
util/src/theap.c:  PriorityQueue* pq = (PriorityQueue*)taosMemoryCalloc(1, sizeof(PriorityQueue));
util/src/theap.c:  taosMemoryFree(pq);
util/src/theap.c:  BoundedQueue* q = (BoundedQueue*)taosMemoryCalloc(1, sizeof(BoundedQueue));
util/src/theap.c:  taosMemoryFree(q);
util/src/talgo.c:  char *buf = taosMemoryCalloc(1, size);  // prepare the swap buffer
util/src/talgo.c:  taosMemoryFreeClear(buf);
util/src/talgo.c:    tmp = taosMemoryMalloc(size);
util/src/talgo.c:    taosMemoryFree(tmp);
util/src/talgo.c:  char *buf = taosMemoryCalloc(1, size);
util/src/talgo.c:  taosMemoryFree(buf);
util/src/talgo.c:  char         *buf = taosMemoryCalloc(1, size);  // prepare the swap buffer
util/src/talgo.c:  taosMemoryFreeClear(buf);
util/src/talgo.c:    void   *tmp = taosMemoryMalloc(numOfElem * size);
util/src/talgo.c:    taosMemoryFreeClear(tmp);
util/src/tlist.c:  SList *list = (SList *)taosMemoryMalloc(sizeof(SList));
util/src/tlist.c:    taosMemoryFree(node);
util/src/tlist.c:    taosMemoryFree(list);
util/src/tlist.c:    taosMemoryFree(node);
util/src/tlist.c:    taosMemoryFree(list);
util/src/tlist.c:  SListNode *node = (SListNode *)taosMemoryMalloc(sizeof(SListNode) + list->eleSize);
util/src/tlist.c:  SListNode *node = (SListNode *)taosMemoryCalloc(1, sizeof(SListNode) + list->eleSize);
util/src/tlist.c:  SListNode *node = (SListNode *)taosMemoryCalloc(1, sizeof(SListNode) + list->eleSize);
util/src/tjson.c:  *pObj = taosMemoryCalloc(1, objSize);
util/src/tthread.c:  TdThread*    pthread = (TdThread*)taosMemoryMalloc(sizeof(TdThread));
util/src/tthread.c:    taosMemoryFree(pthread);
util/src/tthread.c:  taosMemoryFree(pthread);
util/src/tidpool.c:  id_pool_t *pIdPool = taosMemoryCalloc(1, sizeof(id_pool_t));
util/src/tidpool.c:  pIdPool->freeList = taosMemoryCalloc(maxId, sizeof(bool));
util/src/tidpool.c:    taosMemoryFree(pIdPool);
util/src/tidpool.c:  if (pIdPool->freeList) taosMemoryFree(pIdPool->freeList);
util/src/tidpool.c:  taosMemoryFree(pIdPool);
util/src/tidpool.c:  bool *idList = taosMemoryCalloc(maxId, sizeof(bool));
util/src/tidpool.c:  taosMemoryFree(oldIdList);
util/src/tsched.c:    pSched = (SSchedQueue *)taosMemoryCalloc(sizeof(SSchedQueue), 1);
util/src/tsched.c:  pSched->queue = (SSchedMsg *)taosMemoryCalloc(sizeof(SSchedMsg), queueSize);
util/src/tsched.c:      taosMemoryFree(pSched);
util/src/tsched.c:  pSched->qthread = taosMemoryCalloc(sizeof(TdThread), numOfThreads);
util/src/tsched.c:      taosMemoryFree(pSched);
util/src/tsched.c:      taosMemoryFree(pSched);
util/src/tsched.c:      taosMemoryFree(pSched);
util/src/tsched.c:      taosMemoryFree(pSched);
util/src/tsched.c:        taosMemoryFree(pSched);
util/src/tsched.c:  if (pSched->queue) taosMemoryFree(pSched->queue);
util/src/tsched.c:  if (pSched->qthread) taosMemoryFree(pSched->qthread);
util/src/tsched.c:  // taosMemoryFree(pSched);
util/src/tcompare.c:  pOldPattern = taosMemoryMalloc(strlen(pPattern) + 1);
util/src/tcompare.c:    taosMemoryFree(pOldPattern);
util/src/tcompare.c:  char  *pattern = taosMemoryMalloc(sz + 1);
util/src/tcompare.c:  char *str = taosMemoryMalloc(sz + 1);
util/src/tcompare.c:  taosMemoryFree(str);
util/src/tcompare.c:  taosMemoryFree(pattern);
util/src/tcompare.c:  char  *pattern = taosMemoryMalloc(len + 1);
util/src/tcompare.c:    taosMemoryFree(pattern);
util/src/tcompare.c:  char *str = taosMemoryMalloc(len + 1);
util/src/tcompare.c:    taosMemoryFree(str);
util/src/tcompare.c:    taosMemoryFree(pattern);
util/src/tcompare.c:  taosMemoryFree(str);
util/src/tcompare.c:  taosMemoryFree(pattern);
util/src/ttimer.c:    taosMemoryFree(timer);
util/src/ttimer.c:  tmr_obj_t* timer = (tmr_obj_t*)taosMemoryCalloc(1, sizeof(tmr_obj_t));
util/src/ttimer.c:  tmrCtrls = taosMemoryMalloc(sizeof(tmr_ctrl_t) * tsMaxTmrCtrl);
util/src/ttimer.c:    wheel->slots = (tmr_obj_t**)taosMemoryCalloc(wheel->size, sizeof(tmr_obj_t*));
util/src/ttimer.c:  timerMap.slots = (timer_list_t*)taosMemoryCalloc(timerMap.size, sizeof(timer_list_t));
util/src/ttimer.c:    taosMemoryFreeClear(tmrQhandle);
util/src/ttimer.c:      taosMemoryFree(wheel->slots);
util/src/ttimer.c:        taosMemoryFree(t);
util/src/ttimer.c:    taosMemoryFree(timerMap.slots);
util/src/ttimer.c:    taosMemoryFree(tmrCtrls);
